2025-08-28 16:30:05,154:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:30:05,154:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:30:05,155:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:30:05,155:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:30:05,677:INFO:PyCaret RegressionExperiment
2025-08-28 16:30:05,677:INFO:Logging name: reg-default-name
2025-08-28 16:30:05,677:INFO:ML Usecase: MLUsecase.REGRESSION
2025-08-28 16:30:05,677:INFO:version 3.3.2
2025-08-28 16:30:05,678:INFO:Initializing setup()
2025-08-28 16:30:05,678:INFO:self.USI: 5446
2025-08-28 16:30:05,678:INFO:self._variable_keys: {'seed', 'USI', 'logging_param', 'fold_groups_param', 'exp_name_log', 'memory', 'target_param', 'fold_generator', 'y_test', 'data', 'X', '_available_plots', 'log_plots_param', 'fold_shuffle_param', 'X_test', 'gpu_n_jobs_param', 'idx', 'y', 'html_param', 'transform_target_param', 'pipeline', 'gpu_param', 'n_jobs_param', 'X_train', 'y_train', 'exp_id', '_ml_usecase'}
2025-08-28 16:30:05,678:INFO:Checking environment
2025-08-28 16:30:05,678:INFO:python_version: 3.11.13
2025-08-28 16:30:05,678:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-28 16:30:05,678:INFO:machine: AMD64
2025-08-28 16:30:05,717:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-28 16:30:05,720:INFO:Memory: svmem(total=34293444608, available=9635807232, percent=71.9, used=24657637376, free=9635807232)
2025-08-28 16:30:05,720:INFO:Physical Core: 6
2025-08-28 16:30:05,720:INFO:Logical Core: 12
2025-08-28 16:30:05,721:INFO:Checking libraries
2025-08-28 16:30:05,721:INFO:System:
2025-08-28 16:30:05,721:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-28 16:30:05,721:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-28 16:30:05,721:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-28 16:30:05,721:INFO:PyCaret required dependencies:
2025-08-28 16:30:05,971:INFO:                 pip: 25.1
2025-08-28 16:30:05,972:INFO:          setuptools: 72.1.0
2025-08-28 16:30:05,972:INFO:             pycaret: 3.3.2
2025-08-28 16:30:05,972:INFO:             IPython: 9.4.0
2025-08-28 16:30:05,972:INFO:          ipywidgets: 8.1.7
2025-08-28 16:30:05,972:INFO:                tqdm: 4.67.1
2025-08-28 16:30:05,972:INFO:               numpy: 1.26.4
2025-08-28 16:30:05,972:INFO:              pandas: 2.1.4
2025-08-28 16:30:05,972:INFO:              jinja2: 3.1.6
2025-08-28 16:30:05,972:INFO:               scipy: 1.11.4
2025-08-28 16:30:05,972:INFO:              joblib: 1.3.2
2025-08-28 16:30:05,972:INFO:             sklearn: 1.4.2
2025-08-28 16:30:05,972:INFO:                pyod: 2.0.5
2025-08-28 16:30:05,972:INFO:            imblearn: 0.14.0
2025-08-28 16:30:05,972:INFO:   category_encoders: 2.7.0
2025-08-28 16:30:05,972:INFO:            lightgbm: 4.6.0
2025-08-28 16:30:05,972:INFO:               numba: 0.61.2
2025-08-28 16:30:05,972:INFO:            requests: 2.32.4
2025-08-28 16:30:05,972:INFO:          matplotlib: 3.7.5
2025-08-28 16:30:05,973:INFO:          scikitplot: 0.3.7
2025-08-28 16:30:05,973:INFO:         yellowbrick: 1.5
2025-08-28 16:30:05,973:INFO:              plotly: 5.24.1
2025-08-28 16:30:05,973:INFO:    plotly-resampler: Not installed
2025-08-28 16:30:05,973:INFO:             kaleido: 1.0.0
2025-08-28 16:30:05,973:INFO:           schemdraw: 0.15
2025-08-28 16:30:05,973:INFO:         statsmodels: 0.14.5
2025-08-28 16:30:05,973:INFO:              sktime: 0.26.0
2025-08-28 16:30:05,973:INFO:               tbats: 1.1.3
2025-08-28 16:30:05,973:INFO:            pmdarima: 2.0.4
2025-08-28 16:30:05,973:INFO:              psutil: 7.0.0
2025-08-28 16:30:05,973:INFO:          markupsafe: 3.0.2
2025-08-28 16:30:05,973:INFO:             pickle5: Not installed
2025-08-28 16:30:05,973:INFO:         cloudpickle: 3.1.1
2025-08-28 16:30:05,973:INFO:         deprecation: 2.1.0
2025-08-28 16:30:05,973:INFO:              xxhash: 3.5.0
2025-08-28 16:30:05,973:INFO:           wurlitzer: Not installed
2025-08-28 16:30:05,973:INFO:PyCaret optional dependencies:
2025-08-28 16:30:07,266:INFO:                shap: Not installed
2025-08-28 16:30:07,266:INFO:           interpret: Not installed
2025-08-28 16:30:07,266:INFO:                umap: Not installed
2025-08-28 16:30:07,266:INFO:     ydata_profiling: Not installed
2025-08-28 16:30:07,266:INFO:  explainerdashboard: Not installed
2025-08-28 16:30:07,266:INFO:             autoviz: Not installed
2025-08-28 16:30:07,266:INFO:           fairlearn: Not installed
2025-08-28 16:30:07,266:INFO:          deepchecks: Not installed
2025-08-28 16:30:07,266:INFO:             xgboost: Not installed
2025-08-28 16:30:07,266:INFO:            catboost: Not installed
2025-08-28 16:30:07,266:INFO:              kmodes: Not installed
2025-08-28 16:30:07,266:INFO:             mlxtend: Not installed
2025-08-28 16:30:07,266:INFO:       statsforecast: Not installed
2025-08-28 16:30:07,266:INFO:        tune_sklearn: Not installed
2025-08-28 16:30:07,267:INFO:                 ray: Not installed
2025-08-28 16:30:07,267:INFO:            hyperopt: Not installed
2025-08-28 16:30:07,267:INFO:              optuna: Not installed
2025-08-28 16:30:07,267:INFO:               skopt: Not installed
2025-08-28 16:30:07,267:INFO:              mlflow: Not installed
2025-08-28 16:30:07,267:INFO:              gradio: Not installed
2025-08-28 16:30:07,267:INFO:             fastapi: 0.116.1
2025-08-28 16:30:07,267:INFO:             uvicorn: 0.35.0
2025-08-28 16:30:07,267:INFO:              m2cgen: Not installed
2025-08-28 16:30:07,267:INFO:           evidently: Not installed
2025-08-28 16:30:07,267:INFO:               fugue: Not installed
2025-08-28 16:30:07,267:INFO:           streamlit: 1.49.0
2025-08-28 16:30:07,267:INFO:             prophet: Not installed
2025-08-28 16:30:07,267:INFO:None
2025-08-28 16:30:07,267:INFO:Set up data.
2025-08-28 16:30:07,274:INFO:Set up folding strategy.
2025-08-28 16:30:07,274:INFO:Set up train/test split.
2025-08-28 16:30:07,289:INFO:Set up index.
2025-08-28 16:30:07,289:INFO:Assigning column types.
2025-08-28 16:30:07,293:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-28 16:30:07,293:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,297:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,302:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,360:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,401:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,401:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,403:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,403:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,407:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,411:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,467:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,507:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,507:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,507:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,508:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-08-28 16:30:07,513:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,517:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,571:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,615:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,615:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,615:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,619:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,624:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,677:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,719:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,720:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,721:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,721:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-08-28 16:30:07,729:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,785:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,828:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,828:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,828:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,837:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,897:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,941:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:07,941:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,941:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:07,942:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-08-28 16:30:08,002:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:08,045:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:08,046:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,046:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,116:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:08,160:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:30:08,161:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,161:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,161:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-28 16:30:08,224:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:08,265:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,265:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,328:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:30:08,370:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,370:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,371:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-08-28 16:30:08,499:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,499:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,613:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,613:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:08,620:INFO:Preparing preprocessing pipeline...
2025-08-28 16:30:08,620:INFO:Set up simple imputation.
2025-08-28 16:30:08,625:INFO:Set up encoding of ordinal features.
2025-08-28 16:30:08,628:INFO:Set up encoding of categorical features.
2025-08-28 16:30:08,707:INFO:Finished creating preprocessing pipeline.
2025-08-28 16:30:08,746:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))])
2025-08-28 16:30:08,746:INFO:Creating final display dataframe.
2025-08-28 16:30:08,951:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target           charges
2                   Target type        Regression
3           Original data shape         (1338, 7)
4        Transformed data shape        (1338, 10)
5   Transformed train set shape         (936, 10)
6    Transformed test set shape         (402, 10)
7              Numeric features                 3
8          Categorical features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator             KFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  reg-default-name
21                          USI              5446
2025-08-28 16:30:09,061:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:09,062:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:09,173:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:09,174:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:30:09,175:INFO:setup() successfully completed in 3.5s...............
2025-08-28 16:30:09,176:INFO:Initializing compare_models()
2025-08-28 16:30:09,176:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2025-08-28 16:30:09,176:INFO:Checking exceptions
2025-08-28 16:30:09,177:INFO:Preparing display monitor
2025-08-28 16:30:09,181:INFO:Initializing Linear Regression
2025-08-28 16:30:09,182:INFO:Total runtime is 1.668532689412435e-05 minutes
2025-08-28 16:30:09,182:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:09,182:INFO:Initializing create_model()
2025-08-28 16:30:09,182:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:09,182:INFO:Checking exceptions
2025-08-28 16:30:09,182:INFO:Importing libraries
2025-08-28 16:30:09,182:INFO:Copying training dataset
2025-08-28 16:30:09,186:INFO:Defining folds
2025-08-28 16:30:09,186:INFO:Declaring metric variables
2025-08-28 16:30:09,186:INFO:Importing untrained model
2025-08-28 16:30:09,186:INFO:Linear Regression Imported successfully
2025-08-28 16:30:09,187:INFO:Starting cross validation
2025-08-28 16:30:09,212:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:15,189:INFO:Calculating mean and std
2025-08-28 16:30:15,190:INFO:Creating metrics dataframe
2025-08-28 16:30:15,194:INFO:Uploading results into container
2025-08-28 16:30:15,195:INFO:Uploading model into container now
2025-08-28 16:30:15,196:INFO:_master_model_container: 1
2025-08-28 16:30:15,196:INFO:_display_container: 2
2025-08-28 16:30:15,196:INFO:LinearRegression(n_jobs=-1)
2025-08-28 16:30:15,196:INFO:create_model() successfully completed......................................
2025-08-28 16:30:15,331:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:15,331:INFO:Creating metrics dataframe
2025-08-28 16:30:15,333:INFO:Initializing Lasso Regression
2025-08-28 16:30:15,333:INFO:Total runtime is 0.1025459090868632 minutes
2025-08-28 16:30:15,333:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:15,334:INFO:Initializing create_model()
2025-08-28 16:30:15,334:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:15,334:INFO:Checking exceptions
2025-08-28 16:30:15,334:INFO:Importing libraries
2025-08-28 16:30:15,334:INFO:Copying training dataset
2025-08-28 16:30:15,337:INFO:Defining folds
2025-08-28 16:30:15,338:INFO:Declaring metric variables
2025-08-28 16:30:15,338:INFO:Importing untrained model
2025-08-28 16:30:15,339:INFO:Lasso Regression Imported successfully
2025-08-28 16:30:15,339:INFO:Starting cross validation
2025-08-28 16:30:15,341:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:18,172:INFO:Calculating mean and std
2025-08-28 16:30:18,174:INFO:Creating metrics dataframe
2025-08-28 16:30:18,176:INFO:Uploading results into container
2025-08-28 16:30:18,177:INFO:Uploading model into container now
2025-08-28 16:30:18,177:INFO:_master_model_container: 2
2025-08-28 16:30:18,178:INFO:_display_container: 2
2025-08-28 16:30:18,178:INFO:Lasso(random_state=123)
2025-08-28 16:30:18,178:INFO:create_model() successfully completed......................................
2025-08-28 16:30:18,297:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:18,297:INFO:Creating metrics dataframe
2025-08-28 16:30:18,299:INFO:Initializing Ridge Regression
2025-08-28 16:30:18,299:INFO:Total runtime is 0.15197468598683675 minutes
2025-08-28 16:30:18,299:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:18,300:INFO:Initializing create_model()
2025-08-28 16:30:18,300:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:18,300:INFO:Checking exceptions
2025-08-28 16:30:18,300:INFO:Importing libraries
2025-08-28 16:30:18,300:INFO:Copying training dataset
2025-08-28 16:30:18,304:INFO:Defining folds
2025-08-28 16:30:18,304:INFO:Declaring metric variables
2025-08-28 16:30:18,304:INFO:Importing untrained model
2025-08-28 16:30:18,304:INFO:Ridge Regression Imported successfully
2025-08-28 16:30:18,304:INFO:Starting cross validation
2025-08-28 16:30:18,305:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:18,510:INFO:Calculating mean and std
2025-08-28 16:30:18,511:INFO:Creating metrics dataframe
2025-08-28 16:30:18,513:INFO:Uploading results into container
2025-08-28 16:30:18,513:INFO:Uploading model into container now
2025-08-28 16:30:18,514:INFO:_master_model_container: 3
2025-08-28 16:30:18,514:INFO:_display_container: 2
2025-08-28 16:30:18,514:INFO:Ridge(random_state=123)
2025-08-28 16:30:18,514:INFO:create_model() successfully completed......................................
2025-08-28 16:30:18,611:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:18,611:INFO:Creating metrics dataframe
2025-08-28 16:30:18,613:INFO:Initializing Elastic Net
2025-08-28 16:30:18,613:INFO:Total runtime is 0.1572058876355489 minutes
2025-08-28 16:30:18,614:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:18,614:INFO:Initializing create_model()
2025-08-28 16:30:18,614:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:18,614:INFO:Checking exceptions
2025-08-28 16:30:18,614:INFO:Importing libraries
2025-08-28 16:30:18,614:INFO:Copying training dataset
2025-08-28 16:30:18,617:INFO:Defining folds
2025-08-28 16:30:18,617:INFO:Declaring metric variables
2025-08-28 16:30:18,617:INFO:Importing untrained model
2025-08-28 16:30:18,618:INFO:Elastic Net Imported successfully
2025-08-28 16:30:18,618:INFO:Starting cross validation
2025-08-28 16:30:18,620:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:18,850:INFO:Calculating mean and std
2025-08-28 16:30:18,852:INFO:Creating metrics dataframe
2025-08-28 16:30:18,853:INFO:Uploading results into container
2025-08-28 16:30:18,853:INFO:Uploading model into container now
2025-08-28 16:30:18,854:INFO:_master_model_container: 4
2025-08-28 16:30:18,854:INFO:_display_container: 2
2025-08-28 16:30:18,854:INFO:ElasticNet(random_state=123)
2025-08-28 16:30:18,854:INFO:create_model() successfully completed......................................
2025-08-28 16:30:18,952:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:18,952:INFO:Creating metrics dataframe
2025-08-28 16:30:18,954:INFO:Initializing Least Angle Regression
2025-08-28 16:30:18,954:INFO:Total runtime is 0.16289261976877847 minutes
2025-08-28 16:30:18,955:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:18,955:INFO:Initializing create_model()
2025-08-28 16:30:18,955:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:18,955:INFO:Checking exceptions
2025-08-28 16:30:18,955:INFO:Importing libraries
2025-08-28 16:30:18,955:INFO:Copying training dataset
2025-08-28 16:30:18,959:INFO:Defining folds
2025-08-28 16:30:18,959:INFO:Declaring metric variables
2025-08-28 16:30:18,959:INFO:Importing untrained model
2025-08-28 16:30:18,959:INFO:Least Angle Regression Imported successfully
2025-08-28 16:30:18,959:INFO:Starting cross validation
2025-08-28 16:30:18,961:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:19,184:INFO:Calculating mean and std
2025-08-28 16:30:19,185:INFO:Creating metrics dataframe
2025-08-28 16:30:19,186:INFO:Uploading results into container
2025-08-28 16:30:19,187:INFO:Uploading model into container now
2025-08-28 16:30:19,187:INFO:_master_model_container: 5
2025-08-28 16:30:19,187:INFO:_display_container: 2
2025-08-28 16:30:19,187:INFO:Lars(random_state=123)
2025-08-28 16:30:19,187:INFO:create_model() successfully completed......................................
2025-08-28 16:30:19,293:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:19,294:INFO:Creating metrics dataframe
2025-08-28 16:30:19,295:INFO:Initializing Lasso Least Angle Regression
2025-08-28 16:30:19,296:INFO:Total runtime is 0.1685916026433309 minutes
2025-08-28 16:30:19,296:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:19,296:INFO:Initializing create_model()
2025-08-28 16:30:19,296:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:19,296:INFO:Checking exceptions
2025-08-28 16:30:19,296:INFO:Importing libraries
2025-08-28 16:30:19,296:INFO:Copying training dataset
2025-08-28 16:30:19,301:INFO:Defining folds
2025-08-28 16:30:19,301:INFO:Declaring metric variables
2025-08-28 16:30:19,301:INFO:Importing untrained model
2025-08-28 16:30:19,301:INFO:Lasso Least Angle Regression Imported successfully
2025-08-28 16:30:19,301:INFO:Starting cross validation
2025-08-28 16:30:19,302:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:19,517:INFO:Calculating mean and std
2025-08-28 16:30:19,517:INFO:Creating metrics dataframe
2025-08-28 16:30:19,520:INFO:Uploading results into container
2025-08-28 16:30:19,520:INFO:Uploading model into container now
2025-08-28 16:30:19,520:INFO:_master_model_container: 6
2025-08-28 16:30:19,520:INFO:_display_container: 2
2025-08-28 16:30:19,521:INFO:LassoLars(random_state=123)
2025-08-28 16:30:19,521:INFO:create_model() successfully completed......................................
2025-08-28 16:30:19,621:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:19,621:INFO:Creating metrics dataframe
2025-08-28 16:30:19,623:INFO:Initializing Orthogonal Matching Pursuit
2025-08-28 16:30:19,624:INFO:Total runtime is 0.1740534504254659 minutes
2025-08-28 16:30:19,624:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:19,624:INFO:Initializing create_model()
2025-08-28 16:30:19,624:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:19,624:INFO:Checking exceptions
2025-08-28 16:30:19,624:INFO:Importing libraries
2025-08-28 16:30:19,624:INFO:Copying training dataset
2025-08-28 16:30:19,628:INFO:Defining folds
2025-08-28 16:30:19,628:INFO:Declaring metric variables
2025-08-28 16:30:19,628:INFO:Importing untrained model
2025-08-28 16:30:19,628:INFO:Orthogonal Matching Pursuit Imported successfully
2025-08-28 16:30:19,629:INFO:Starting cross validation
2025-08-28 16:30:19,630:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:19,831:INFO:Calculating mean and std
2025-08-28 16:30:19,833:INFO:Creating metrics dataframe
2025-08-28 16:30:19,835:INFO:Uploading results into container
2025-08-28 16:30:19,835:INFO:Uploading model into container now
2025-08-28 16:30:19,835:INFO:_master_model_container: 7
2025-08-28 16:30:19,836:INFO:_display_container: 2
2025-08-28 16:30:19,836:INFO:OrthogonalMatchingPursuit()
2025-08-28 16:30:19,836:INFO:create_model() successfully completed......................................
2025-08-28 16:30:19,936:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:19,936:INFO:Creating metrics dataframe
2025-08-28 16:30:19,939:INFO:Initializing Bayesian Ridge
2025-08-28 16:30:19,939:INFO:Total runtime is 0.17930568854014078 minutes
2025-08-28 16:30:19,939:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:19,940:INFO:Initializing create_model()
2025-08-28 16:30:19,940:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:19,940:INFO:Checking exceptions
2025-08-28 16:30:19,940:INFO:Importing libraries
2025-08-28 16:30:19,940:INFO:Copying training dataset
2025-08-28 16:30:19,943:INFO:Defining folds
2025-08-28 16:30:19,943:INFO:Declaring metric variables
2025-08-28 16:30:19,943:INFO:Importing untrained model
2025-08-28 16:30:19,943:INFO:Bayesian Ridge Imported successfully
2025-08-28 16:30:19,944:INFO:Starting cross validation
2025-08-28 16:30:19,945:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:20,169:INFO:Calculating mean and std
2025-08-28 16:30:20,170:INFO:Creating metrics dataframe
2025-08-28 16:30:20,172:INFO:Uploading results into container
2025-08-28 16:30:20,172:INFO:Uploading model into container now
2025-08-28 16:30:20,173:INFO:_master_model_container: 8
2025-08-28 16:30:20,173:INFO:_display_container: 2
2025-08-28 16:30:20,173:INFO:BayesianRidge()
2025-08-28 16:30:20,173:INFO:create_model() successfully completed......................................
2025-08-28 16:30:20,280:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:20,281:INFO:Creating metrics dataframe
2025-08-28 16:30:20,283:INFO:Initializing Passive Aggressive Regressor
2025-08-28 16:30:20,283:INFO:Total runtime is 0.1850380023320516 minutes
2025-08-28 16:30:20,283:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:20,283:INFO:Initializing create_model()
2025-08-28 16:30:20,283:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:20,283:INFO:Checking exceptions
2025-08-28 16:30:20,284:INFO:Importing libraries
2025-08-28 16:30:20,284:INFO:Copying training dataset
2025-08-28 16:30:20,287:INFO:Defining folds
2025-08-28 16:30:20,287:INFO:Declaring metric variables
2025-08-28 16:30:20,287:INFO:Importing untrained model
2025-08-28 16:30:20,288:INFO:Passive Aggressive Regressor Imported successfully
2025-08-28 16:30:20,288:INFO:Starting cross validation
2025-08-28 16:30:20,290:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:20,509:INFO:Calculating mean and std
2025-08-28 16:30:20,510:INFO:Creating metrics dataframe
2025-08-28 16:30:20,512:INFO:Uploading results into container
2025-08-28 16:30:20,513:INFO:Uploading model into container now
2025-08-28 16:30:20,513:INFO:_master_model_container: 9
2025-08-28 16:30:20,513:INFO:_display_container: 2
2025-08-28 16:30:20,514:INFO:PassiveAggressiveRegressor(random_state=123)
2025-08-28 16:30:20,514:INFO:create_model() successfully completed......................................
2025-08-28 16:30:20,611:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:20,611:INFO:Creating metrics dataframe
2025-08-28 16:30:20,614:INFO:Initializing Huber Regressor
2025-08-28 16:30:20,614:INFO:Total runtime is 0.19055283864339193 minutes
2025-08-28 16:30:20,614:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:20,615:INFO:Initializing create_model()
2025-08-28 16:30:20,615:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:20,615:INFO:Checking exceptions
2025-08-28 16:30:20,615:INFO:Importing libraries
2025-08-28 16:30:20,615:INFO:Copying training dataset
2025-08-28 16:30:20,620:INFO:Defining folds
2025-08-28 16:30:20,620:INFO:Declaring metric variables
2025-08-28 16:30:20,620:INFO:Importing untrained model
2025-08-28 16:30:20,620:INFO:Huber Regressor Imported successfully
2025-08-28 16:30:20,620:INFO:Starting cross validation
2025-08-28 16:30:20,622:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:20,778:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,784:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,787:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,795:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,808:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,814:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,814:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,817:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,835:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,855:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:30:20,885:INFO:Calculating mean and std
2025-08-28 16:30:20,886:INFO:Creating metrics dataframe
2025-08-28 16:30:20,888:INFO:Uploading results into container
2025-08-28 16:30:20,888:INFO:Uploading model into container now
2025-08-28 16:30:20,889:INFO:_master_model_container: 10
2025-08-28 16:30:20,889:INFO:_display_container: 2
2025-08-28 16:30:20,889:INFO:HuberRegressor()
2025-08-28 16:30:20,889:INFO:create_model() successfully completed......................................
2025-08-28 16:30:20,985:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:20,985:INFO:Creating metrics dataframe
2025-08-28 16:30:20,987:INFO:Initializing K Neighbors Regressor
2025-08-28 16:30:20,987:INFO:Total runtime is 0.19676915407180787 minutes
2025-08-28 16:30:20,988:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:20,988:INFO:Initializing create_model()
2025-08-28 16:30:20,988:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:20,988:INFO:Checking exceptions
2025-08-28 16:30:20,988:INFO:Importing libraries
2025-08-28 16:30:20,988:INFO:Copying training dataset
2025-08-28 16:30:20,991:INFO:Defining folds
2025-08-28 16:30:20,992:INFO:Declaring metric variables
2025-08-28 16:30:20,992:INFO:Importing untrained model
2025-08-28 16:30:20,992:INFO:K Neighbors Regressor Imported successfully
2025-08-28 16:30:20,993:INFO:Starting cross validation
2025-08-28 16:30:20,994:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:21,272:INFO:Calculating mean and std
2025-08-28 16:30:21,273:INFO:Creating metrics dataframe
2025-08-28 16:30:21,275:INFO:Uploading results into container
2025-08-28 16:30:21,276:INFO:Uploading model into container now
2025-08-28 16:30:21,276:INFO:_master_model_container: 11
2025-08-28 16:30:21,276:INFO:_display_container: 2
2025-08-28 16:30:21,276:INFO:KNeighborsRegressor(n_jobs=-1)
2025-08-28 16:30:21,276:INFO:create_model() successfully completed......................................
2025-08-28 16:30:21,374:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:21,375:INFO:Creating metrics dataframe
2025-08-28 16:30:21,377:INFO:Initializing Decision Tree Regressor
2025-08-28 16:30:21,377:INFO:Total runtime is 0.20327041943868002 minutes
2025-08-28 16:30:21,377:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:21,377:INFO:Initializing create_model()
2025-08-28 16:30:21,377:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:21,377:INFO:Checking exceptions
2025-08-28 16:30:21,378:INFO:Importing libraries
2025-08-28 16:30:21,378:INFO:Copying training dataset
2025-08-28 16:30:21,380:INFO:Defining folds
2025-08-28 16:30:21,382:INFO:Declaring metric variables
2025-08-28 16:30:21,382:INFO:Importing untrained model
2025-08-28 16:30:21,382:INFO:Decision Tree Regressor Imported successfully
2025-08-28 16:30:21,382:INFO:Starting cross validation
2025-08-28 16:30:21,384:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:21,588:INFO:Calculating mean and std
2025-08-28 16:30:21,589:INFO:Creating metrics dataframe
2025-08-28 16:30:21,590:INFO:Uploading results into container
2025-08-28 16:30:21,590:INFO:Uploading model into container now
2025-08-28 16:30:21,591:INFO:_master_model_container: 12
2025-08-28 16:30:21,591:INFO:_display_container: 2
2025-08-28 16:30:21,591:INFO:DecisionTreeRegressor(random_state=123)
2025-08-28 16:30:21,591:INFO:create_model() successfully completed......................................
2025-08-28 16:30:21,694:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:21,694:INFO:Creating metrics dataframe
2025-08-28 16:30:21,697:INFO:Initializing Random Forest Regressor
2025-08-28 16:30:21,697:INFO:Total runtime is 0.2086009383201599 minutes
2025-08-28 16:30:21,697:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:21,697:INFO:Initializing create_model()
2025-08-28 16:30:21,697:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:21,697:INFO:Checking exceptions
2025-08-28 16:30:21,697:INFO:Importing libraries
2025-08-28 16:30:21,697:INFO:Copying training dataset
2025-08-28 16:30:21,701:INFO:Defining folds
2025-08-28 16:30:21,701:INFO:Declaring metric variables
2025-08-28 16:30:21,701:INFO:Importing untrained model
2025-08-28 16:30:21,701:INFO:Random Forest Regressor Imported successfully
2025-08-28 16:30:21,703:INFO:Starting cross validation
2025-08-28 16:30:21,704:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:22,500:INFO:Calculating mean and std
2025-08-28 16:30:22,501:INFO:Creating metrics dataframe
2025-08-28 16:30:22,504:INFO:Uploading results into container
2025-08-28 16:30:22,504:INFO:Uploading model into container now
2025-08-28 16:30:22,504:INFO:_master_model_container: 13
2025-08-28 16:30:22,504:INFO:_display_container: 2
2025-08-28 16:30:22,505:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-08-28 16:30:22,505:INFO:create_model() successfully completed......................................
2025-08-28 16:30:22,610:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:22,610:INFO:Creating metrics dataframe
2025-08-28 16:30:22,615:INFO:Initializing Extra Trees Regressor
2025-08-28 16:30:22,615:INFO:Total runtime is 0.2239022453625997 minutes
2025-08-28 16:30:22,615:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:22,615:INFO:Initializing create_model()
2025-08-28 16:30:22,615:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:22,616:INFO:Checking exceptions
2025-08-28 16:30:22,616:INFO:Importing libraries
2025-08-28 16:30:22,616:INFO:Copying training dataset
2025-08-28 16:30:22,619:INFO:Defining folds
2025-08-28 16:30:22,619:INFO:Declaring metric variables
2025-08-28 16:30:22,620:INFO:Importing untrained model
2025-08-28 16:30:22,621:INFO:Extra Trees Regressor Imported successfully
2025-08-28 16:30:22,622:INFO:Starting cross validation
2025-08-28 16:30:22,624:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:23,314:INFO:Calculating mean and std
2025-08-28 16:30:23,315:INFO:Creating metrics dataframe
2025-08-28 16:30:23,317:INFO:Uploading results into container
2025-08-28 16:30:23,318:INFO:Uploading model into container now
2025-08-28 16:30:23,318:INFO:_master_model_container: 14
2025-08-28 16:30:23,318:INFO:_display_container: 2
2025-08-28 16:30:23,318:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-08-28 16:30:23,318:INFO:create_model() successfully completed......................................
2025-08-28 16:30:23,422:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:23,422:INFO:Creating metrics dataframe
2025-08-28 16:30:23,425:INFO:Initializing AdaBoost Regressor
2025-08-28 16:30:23,425:INFO:Total runtime is 0.23740389347076418 minutes
2025-08-28 16:30:23,425:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:23,425:INFO:Initializing create_model()
2025-08-28 16:30:23,425:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:23,425:INFO:Checking exceptions
2025-08-28 16:30:23,425:INFO:Importing libraries
2025-08-28 16:30:23,426:INFO:Copying training dataset
2025-08-28 16:30:23,429:INFO:Defining folds
2025-08-28 16:30:23,429:INFO:Declaring metric variables
2025-08-28 16:30:23,430:INFO:Importing untrained model
2025-08-28 16:30:23,430:INFO:AdaBoost Regressor Imported successfully
2025-08-28 16:30:23,430:INFO:Starting cross validation
2025-08-28 16:30:23,432:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:23,705:INFO:Calculating mean and std
2025-08-28 16:30:23,706:INFO:Creating metrics dataframe
2025-08-28 16:30:23,707:INFO:Uploading results into container
2025-08-28 16:30:23,709:INFO:Uploading model into container now
2025-08-28 16:30:23,709:INFO:_master_model_container: 15
2025-08-28 16:30:23,709:INFO:_display_container: 2
2025-08-28 16:30:23,709:INFO:AdaBoostRegressor(random_state=123)
2025-08-28 16:30:23,709:INFO:create_model() successfully completed......................................
2025-08-28 16:30:23,824:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:23,824:INFO:Creating metrics dataframe
2025-08-28 16:30:23,826:INFO:Initializing Gradient Boosting Regressor
2025-08-28 16:30:23,826:INFO:Total runtime is 0.24408458073933922 minutes
2025-08-28 16:30:23,826:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:23,826:INFO:Initializing create_model()
2025-08-28 16:30:23,827:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:23,827:INFO:Checking exceptions
2025-08-28 16:30:23,827:INFO:Importing libraries
2025-08-28 16:30:23,827:INFO:Copying training dataset
2025-08-28 16:30:23,831:INFO:Defining folds
2025-08-28 16:30:23,831:INFO:Declaring metric variables
2025-08-28 16:30:23,832:INFO:Importing untrained model
2025-08-28 16:30:23,832:INFO:Gradient Boosting Regressor Imported successfully
2025-08-28 16:30:23,832:INFO:Starting cross validation
2025-08-28 16:30:23,835:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:24,255:INFO:Calculating mean and std
2025-08-28 16:30:24,256:INFO:Creating metrics dataframe
2025-08-28 16:30:24,258:INFO:Uploading results into container
2025-08-28 16:30:24,258:INFO:Uploading model into container now
2025-08-28 16:30:24,258:INFO:_master_model_container: 16
2025-08-28 16:30:24,259:INFO:_display_container: 2
2025-08-28 16:30:24,259:INFO:GradientBoostingRegressor(random_state=123)
2025-08-28 16:30:24,259:INFO:create_model() successfully completed......................................
2025-08-28 16:30:24,372:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:24,372:INFO:Creating metrics dataframe
2025-08-28 16:30:24,374:INFO:Initializing Light Gradient Boosting Machine
2025-08-28 16:30:24,374:INFO:Total runtime is 0.2532220164934794 minutes
2025-08-28 16:30:24,375:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:24,375:INFO:Initializing create_model()
2025-08-28 16:30:24,375:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:24,375:INFO:Checking exceptions
2025-08-28 16:30:24,375:INFO:Importing libraries
2025-08-28 16:30:24,375:INFO:Copying training dataset
2025-08-28 16:30:24,379:INFO:Defining folds
2025-08-28 16:30:24,379:INFO:Declaring metric variables
2025-08-28 16:30:24,380:INFO:Importing untrained model
2025-08-28 16:30:24,381:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-28 16:30:24,381:INFO:Starting cross validation
2025-08-28 16:30:24,382:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:26,292:INFO:Calculating mean and std
2025-08-28 16:30:26,293:INFO:Creating metrics dataframe
2025-08-28 16:30:26,295:INFO:Uploading results into container
2025-08-28 16:30:26,296:INFO:Uploading model into container now
2025-08-28 16:30:26,296:INFO:_master_model_container: 17
2025-08-28 16:30:26,296:INFO:_display_container: 2
2025-08-28 16:30:26,297:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-08-28 16:30:26,297:INFO:create_model() successfully completed......................................
2025-08-28 16:30:26,417:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:26,417:INFO:Creating metrics dataframe
2025-08-28 16:30:26,419:INFO:Initializing Dummy Regressor
2025-08-28 16:30:26,419:INFO:Total runtime is 0.2873146971066793 minutes
2025-08-28 16:30:26,419:INFO:SubProcess create_model() called ==================================
2025-08-28 16:30:26,419:INFO:Initializing create_model()
2025-08-28 16:30:26,419:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001BB2EF33DD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:26,419:INFO:Checking exceptions
2025-08-28 16:30:26,419:INFO:Importing libraries
2025-08-28 16:30:26,419:INFO:Copying training dataset
2025-08-28 16:30:26,423:INFO:Defining folds
2025-08-28 16:30:26,423:INFO:Declaring metric variables
2025-08-28 16:30:26,423:INFO:Importing untrained model
2025-08-28 16:30:26,423:INFO:Dummy Regressor Imported successfully
2025-08-28 16:30:26,423:INFO:Starting cross validation
2025-08-28 16:30:26,425:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:30:26,644:INFO:Calculating mean and std
2025-08-28 16:30:26,644:INFO:Creating metrics dataframe
2025-08-28 16:30:26,647:INFO:Uploading results into container
2025-08-28 16:30:26,648:INFO:Uploading model into container now
2025-08-28 16:30:26,648:INFO:_master_model_container: 18
2025-08-28 16:30:26,648:INFO:_display_container: 2
2025-08-28 16:30:26,648:INFO:DummyRegressor()
2025-08-28 16:30:26,648:INFO:create_model() successfully completed......................................
2025-08-28 16:30:26,761:INFO:SubProcess create_model() end ==================================
2025-08-28 16:30:26,761:INFO:Creating metrics dataframe
2025-08-28 16:30:26,764:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-08-28 16:30:26,766:INFO:Initializing create_model()
2025-08-28 16:30:26,766:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001BB757BA350>, estimator=GradientBoostingRegressor(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:30:26,767:INFO:Checking exceptions
2025-08-28 16:30:26,767:INFO:Importing libraries
2025-08-28 16:30:26,768:INFO:Copying training dataset
2025-08-28 16:30:26,773:INFO:Defining folds
2025-08-28 16:30:26,774:INFO:Declaring metric variables
2025-08-28 16:30:26,774:INFO:Importing untrained model
2025-08-28 16:30:26,774:INFO:Declaring custom model
2025-08-28 16:30:26,775:INFO:Gradient Boosting Regressor Imported successfully
2025-08-28 16:30:26,776:INFO:Cross validation set to False
2025-08-28 16:30:26,776:INFO:Fitting Model
2025-08-28 16:30:26,937:INFO:GradientBoostingRegressor(random_state=123)
2025-08-28 16:30:26,937:INFO:create_model() successfully completed......................................
2025-08-28 16:30:27,058:INFO:_master_model_container: 18
2025-08-28 16:30:27,058:INFO:_display_container: 2
2025-08-28 16:30:27,058:INFO:GradientBoostingRegressor(random_state=123)
2025-08-28 16:30:27,058:INFO:compare_models() successfully completed......................................
2025-08-28 16:30:27,101:INFO:Initializing save_model()
2025-08-28 16:30:27,101:INFO:save_model(model=GradientBoostingRegressor(random_state=123), model_name=best_insurance_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-08-28 16:30:27,101:INFO:Adding model into prep_pipe
2025-08-28 16:30:27,113:INFO:best_insurance_model.pkl saved in current working directory
2025-08-28 16:30:27,157:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker'],
                                    transfor...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('trained_model', GradientBoostingRegressor(random_state=123))])
2025-08-28 16:30:27,157:INFO:save_model() successfully completed......................................
2025-08-28 16:34:00,959:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:34:00,959:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:34:00,959:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:34:00,959:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:34:01,116:INFO:PyCaret RegressionExperiment
2025-08-28 16:34:01,116:INFO:Logging name: insurance_cost_prediction
2025-08-28 16:34:01,116:INFO:ML Usecase: MLUsecase.REGRESSION
2025-08-28 16:34:01,116:INFO:version 3.3.2
2025-08-28 16:34:01,116:INFO:Initializing setup()
2025-08-28 16:34:01,116:INFO:self.USI: 2334
2025-08-28 16:34:01,116:INFO:self._variable_keys: {'y', 'log_plots_param', 'fold_groups_param', 'y_train', 'X', 'memory', 'pipeline', '_ml_usecase', 'y_test', 'transform_target_param', 'logging_param', '_available_plots', 'X_test', 'fold_generator', 'data', 'exp_name_log', 'USI', 'seed', 'exp_id', 'target_param', 'n_jobs_param', 'fold_shuffle_param', 'gpu_n_jobs_param', 'X_train', 'idx', 'html_param', 'gpu_param'}
2025-08-28 16:34:01,116:INFO:Checking environment
2025-08-28 16:34:01,116:INFO:python_version: 3.11.13
2025-08-28 16:34:01,116:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-28 16:34:01,116:INFO:machine: AMD64
2025-08-28 16:34:01,116:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-28 16:34:01,120:INFO:Memory: svmem(total=34293444608, available=9606889472, percent=72.0, used=24686555136, free=9606889472)
2025-08-28 16:34:01,120:INFO:Physical Core: 6
2025-08-28 16:34:01,120:INFO:Logical Core: 12
2025-08-28 16:34:01,120:INFO:Checking libraries
2025-08-28 16:34:01,120:INFO:System:
2025-08-28 16:34:01,120:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-28 16:34:01,120:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-28 16:34:01,121:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-28 16:34:01,121:INFO:PyCaret required dependencies:
2025-08-28 16:34:01,195:INFO:                 pip: 25.1
2025-08-28 16:34:01,195:INFO:          setuptools: 72.1.0
2025-08-28 16:34:01,195:INFO:             pycaret: 3.3.2
2025-08-28 16:34:01,195:INFO:             IPython: 9.4.0
2025-08-28 16:34:01,195:INFO:          ipywidgets: 8.1.7
2025-08-28 16:34:01,195:INFO:                tqdm: 4.67.1
2025-08-28 16:34:01,195:INFO:               numpy: 1.26.4
2025-08-28 16:34:01,195:INFO:              pandas: 2.1.4
2025-08-28 16:34:01,195:INFO:              jinja2: 3.1.6
2025-08-28 16:34:01,195:INFO:               scipy: 1.11.4
2025-08-28 16:34:01,196:INFO:              joblib: 1.3.2
2025-08-28 16:34:01,196:INFO:             sklearn: 1.4.2
2025-08-28 16:34:01,196:INFO:                pyod: 2.0.5
2025-08-28 16:34:01,196:INFO:            imblearn: 0.14.0
2025-08-28 16:34:01,196:INFO:   category_encoders: 2.7.0
2025-08-28 16:34:01,196:INFO:            lightgbm: 4.6.0
2025-08-28 16:34:01,196:INFO:               numba: 0.61.2
2025-08-28 16:34:01,196:INFO:            requests: 2.32.4
2025-08-28 16:34:01,196:INFO:          matplotlib: 3.7.5
2025-08-28 16:34:01,196:INFO:          scikitplot: 0.3.7
2025-08-28 16:34:01,196:INFO:         yellowbrick: 1.5
2025-08-28 16:34:01,196:INFO:              plotly: 5.24.1
2025-08-28 16:34:01,197:INFO:    plotly-resampler: Not installed
2025-08-28 16:34:01,197:INFO:             kaleido: 1.0.0
2025-08-28 16:34:01,197:INFO:           schemdraw: 0.15
2025-08-28 16:34:01,197:INFO:         statsmodels: 0.14.5
2025-08-28 16:34:01,197:INFO:              sktime: 0.26.0
2025-08-28 16:34:01,197:INFO:               tbats: 1.1.3
2025-08-28 16:34:01,197:INFO:            pmdarima: 2.0.4
2025-08-28 16:34:01,197:INFO:              psutil: 7.0.0
2025-08-28 16:34:01,197:INFO:          markupsafe: 3.0.2
2025-08-28 16:34:01,197:INFO:             pickle5: Not installed
2025-08-28 16:34:01,197:INFO:         cloudpickle: 3.1.1
2025-08-28 16:34:01,197:INFO:         deprecation: 2.1.0
2025-08-28 16:34:01,197:INFO:              xxhash: 3.5.0
2025-08-28 16:34:01,197:INFO:           wurlitzer: Not installed
2025-08-28 16:34:01,197:INFO:PyCaret optional dependencies:
2025-08-28 16:34:01,505:INFO:                shap: Not installed
2025-08-28 16:34:01,505:INFO:           interpret: Not installed
2025-08-28 16:34:01,505:INFO:                umap: Not installed
2025-08-28 16:34:01,505:INFO:     ydata_profiling: Not installed
2025-08-28 16:34:01,505:INFO:  explainerdashboard: Not installed
2025-08-28 16:34:01,505:INFO:             autoviz: Not installed
2025-08-28 16:34:01,505:INFO:           fairlearn: Not installed
2025-08-28 16:34:01,505:INFO:          deepchecks: Not installed
2025-08-28 16:34:01,505:INFO:             xgboost: Not installed
2025-08-28 16:34:01,505:INFO:            catboost: Not installed
2025-08-28 16:34:01,505:INFO:              kmodes: Not installed
2025-08-28 16:34:01,505:INFO:             mlxtend: Not installed
2025-08-28 16:34:01,505:INFO:       statsforecast: Not installed
2025-08-28 16:34:01,505:INFO:        tune_sklearn: Not installed
2025-08-28 16:34:01,505:INFO:                 ray: Not installed
2025-08-28 16:34:01,505:INFO:            hyperopt: Not installed
2025-08-28 16:34:01,505:INFO:              optuna: Not installed
2025-08-28 16:34:01,506:INFO:               skopt: Not installed
2025-08-28 16:34:01,506:INFO:              mlflow: 3.3.2
2025-08-28 16:34:01,506:INFO:              gradio: Not installed
2025-08-28 16:34:01,506:INFO:             fastapi: 0.116.1
2025-08-28 16:34:01,506:INFO:             uvicorn: 0.35.0
2025-08-28 16:34:01,506:INFO:              m2cgen: Not installed
2025-08-28 16:34:01,506:INFO:           evidently: Not installed
2025-08-28 16:34:01,506:INFO:               fugue: Not installed
2025-08-28 16:34:01,506:INFO:           streamlit: 1.49.0
2025-08-28 16:34:01,506:INFO:             prophet: Not installed
2025-08-28 16:34:01,506:INFO:None
2025-08-28 16:34:01,506:INFO:Set up data.
2025-08-28 16:34:01,513:INFO:Set up folding strategy.
2025-08-28 16:34:01,513:INFO:Set up train/test split.
2025-08-28 16:34:01,520:INFO:Set up index.
2025-08-28 16:34:01,521:INFO:Assigning column types.
2025-08-28 16:34:01,524:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-28 16:34:01,524:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,527:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,532:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,607:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,676:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,677:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:01,677:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:01,677:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,684:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,690:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,766:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,831:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,831:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:01,831:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:01,832:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-08-28 16:34:01,836:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,841:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,899:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,949:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,950:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:01,951:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:01,955:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:34:01,962:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,022:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,075:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,076:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,076:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,076:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-08-28 16:34:02,093:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,161:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,205:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,206:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,207:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,215:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,271:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,315:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,316:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,316:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,317:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-08-28 16:34:02,384:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,431:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,431:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,498:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,542:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,543:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,543:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,543:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-28 16:34:02,611:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,656:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,657:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,721:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:34:02,767:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,767:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,767:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-08-28 16:34:02,880:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,880:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,990:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,990:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:02,992:INFO:Preparing preprocessing pipeline...
2025-08-28 16:34:02,992:INFO:Set up simple imputation.
2025-08-28 16:34:02,995:INFO:Set up encoding of ordinal features.
2025-08-28 16:34:02,997:INFO:Set up encoding of categorical features.
2025-08-28 16:34:03,100:INFO:Finished creating preprocessing pipeline.
2025-08-28 16:34:03,139:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))])
2025-08-28 16:34:03,139:INFO:Creating final display dataframe.
2025-08-28 16:34:03,346:INFO:Setup _display_container:                     Description                      Value
0                    Session id                        123
1                        Target                    charges
2                   Target type                 Regression
3           Original data shape                  (1338, 7)
4        Transformed data shape                 (1338, 10)
5   Transformed train set shape                  (936, 10)
6    Transformed test set shape                  (402, 10)
7              Numeric features                          3
8          Categorical features                          3
9                    Preprocess                       True
10              Imputation type                     simple
11           Numeric imputation                       mean
12       Categorical imputation                       mode
13     Maximum one-hot encoding                         25
14              Encoding method                       None
15               Fold Generator                      KFold
16                  Fold Number                         10
17                     CPU Jobs                         -1
18                      Use GPU                      False
19               Log Experiment               MlflowLogger
20              Experiment Name  insurance_cost_prediction
21                          USI                       2334
2025-08-28 16:34:03,455:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:03,455:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:03,565:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:03,565:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:34:03,566:INFO:Logging experiment in loggers
2025-08-28 16:35:48,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:35:48,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:35:48,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:35:48,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 16:35:48,737:INFO:PyCaret RegressionExperiment
2025-08-28 16:35:48,737:INFO:Logging name: insurance_cost_prediction
2025-08-28 16:35:48,737:INFO:ML Usecase: MLUsecase.REGRESSION
2025-08-28 16:35:48,737:INFO:version 3.3.2
2025-08-28 16:35:48,737:INFO:Initializing setup()
2025-08-28 16:35:48,737:INFO:self.USI: 3209
2025-08-28 16:35:48,737:INFO:self._variable_keys: {'X_train', 'memory', 'pipeline', 'X', 'target_param', 'fold_groups_param', 'gpu_param', 'html_param', 'log_plots_param', 'fold_shuffle_param', '_available_plots', 'gpu_n_jobs_param', 'exp_name_log', 'y_test', '_ml_usecase', 'data', 'idx', 'n_jobs_param', 'exp_id', 'USI', 'y', 'y_train', 'X_test', 'logging_param', 'fold_generator', 'transform_target_param', 'seed'}
2025-08-28 16:35:48,738:INFO:Checking environment
2025-08-28 16:35:48,738:INFO:python_version: 3.11.13
2025-08-28 16:35:48,738:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-28 16:35:48,738:INFO:machine: AMD64
2025-08-28 16:35:48,802:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-28 16:35:48,805:INFO:Memory: svmem(total=34293444608, available=9524002816, percent=72.2, used=24769441792, free=9524002816)
2025-08-28 16:35:48,805:INFO:Physical Core: 6
2025-08-28 16:35:48,805:INFO:Logical Core: 12
2025-08-28 16:35:48,805:INFO:Checking libraries
2025-08-28 16:35:48,805:INFO:System:
2025-08-28 16:35:48,805:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-28 16:35:48,805:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-28 16:35:48,806:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-28 16:35:48,806:INFO:PyCaret required dependencies:
2025-08-28 16:35:48,900:INFO:                 pip: 25.1
2025-08-28 16:35:48,901:INFO:          setuptools: 72.1.0
2025-08-28 16:35:48,901:INFO:             pycaret: 3.3.2
2025-08-28 16:35:48,901:INFO:             IPython: 9.4.0
2025-08-28 16:35:48,901:INFO:          ipywidgets: 8.1.7
2025-08-28 16:35:48,901:INFO:                tqdm: 4.67.1
2025-08-28 16:35:48,901:INFO:               numpy: 1.26.4
2025-08-28 16:35:48,901:INFO:              pandas: 2.1.4
2025-08-28 16:35:48,901:INFO:              jinja2: 3.1.6
2025-08-28 16:35:48,901:INFO:               scipy: 1.11.4
2025-08-28 16:35:48,901:INFO:              joblib: 1.3.2
2025-08-28 16:35:48,901:INFO:             sklearn: 1.4.2
2025-08-28 16:35:48,901:INFO:                pyod: 2.0.5
2025-08-28 16:35:48,901:INFO:            imblearn: 0.14.0
2025-08-28 16:35:48,901:INFO:   category_encoders: 2.7.0
2025-08-28 16:35:48,901:INFO:            lightgbm: 4.6.0
2025-08-28 16:35:48,901:INFO:               numba: 0.61.2
2025-08-28 16:35:48,901:INFO:            requests: 2.32.4
2025-08-28 16:35:48,903:INFO:          matplotlib: 3.7.5
2025-08-28 16:35:48,903:INFO:          scikitplot: 0.3.7
2025-08-28 16:35:48,903:INFO:         yellowbrick: 1.5
2025-08-28 16:35:48,903:INFO:              plotly: 5.24.1
2025-08-28 16:35:48,903:INFO:    plotly-resampler: Not installed
2025-08-28 16:35:48,903:INFO:             kaleido: 1.0.0
2025-08-28 16:35:48,903:INFO:           schemdraw: 0.15
2025-08-28 16:35:48,903:INFO:         statsmodels: 0.14.5
2025-08-28 16:35:48,903:INFO:              sktime: 0.26.0
2025-08-28 16:35:48,903:INFO:               tbats: 1.1.3
2025-08-28 16:35:48,903:INFO:            pmdarima: 2.0.4
2025-08-28 16:35:48,903:INFO:              psutil: 7.0.0
2025-08-28 16:35:48,903:INFO:          markupsafe: 3.0.2
2025-08-28 16:35:48,904:INFO:             pickle5: Not installed
2025-08-28 16:35:48,904:INFO:         cloudpickle: 3.1.1
2025-08-28 16:35:48,904:INFO:         deprecation: 2.1.0
2025-08-28 16:35:48,904:INFO:              xxhash: 3.5.0
2025-08-28 16:35:48,904:INFO:           wurlitzer: Not installed
2025-08-28 16:35:48,904:INFO:PyCaret optional dependencies:
2025-08-28 16:35:49,196:INFO:                shap: Not installed
2025-08-28 16:35:49,196:INFO:           interpret: Not installed
2025-08-28 16:35:49,196:INFO:                umap: Not installed
2025-08-28 16:35:49,196:INFO:     ydata_profiling: Not installed
2025-08-28 16:35:49,196:INFO:  explainerdashboard: Not installed
2025-08-28 16:35:49,196:INFO:             autoviz: Not installed
2025-08-28 16:35:49,196:INFO:           fairlearn: Not installed
2025-08-28 16:35:49,196:INFO:          deepchecks: Not installed
2025-08-28 16:35:49,196:INFO:             xgboost: Not installed
2025-08-28 16:35:49,196:INFO:            catboost: Not installed
2025-08-28 16:35:49,196:INFO:              kmodes: Not installed
2025-08-28 16:35:49,196:INFO:             mlxtend: Not installed
2025-08-28 16:35:49,196:INFO:       statsforecast: Not installed
2025-08-28 16:35:49,196:INFO:        tune_sklearn: Not installed
2025-08-28 16:35:49,196:INFO:                 ray: Not installed
2025-08-28 16:35:49,197:INFO:            hyperopt: Not installed
2025-08-28 16:35:49,197:INFO:              optuna: Not installed
2025-08-28 16:35:49,197:INFO:               skopt: Not installed
2025-08-28 16:35:49,197:INFO:              mlflow: 3.3.2
2025-08-28 16:35:49,197:INFO:              gradio: Not installed
2025-08-28 16:35:49,197:INFO:             fastapi: 0.116.1
2025-08-28 16:35:49,197:INFO:             uvicorn: 0.35.0
2025-08-28 16:35:49,197:INFO:              m2cgen: Not installed
2025-08-28 16:35:49,197:INFO:           evidently: Not installed
2025-08-28 16:35:49,197:INFO:               fugue: Not installed
2025-08-28 16:35:49,197:INFO:           streamlit: 1.49.0
2025-08-28 16:35:49,197:INFO:             prophet: Not installed
2025-08-28 16:35:49,197:INFO:None
2025-08-28 16:35:49,197:INFO:Set up data.
2025-08-28 16:35:49,204:INFO:Set up folding strategy.
2025-08-28 16:35:49,204:INFO:Set up train/test split.
2025-08-28 16:35:49,210:INFO:Set up index.
2025-08-28 16:35:49,210:INFO:Assigning column types.
2025-08-28 16:35:49,214:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-28 16:35:49,215:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,221:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,226:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,285:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,327:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,329:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,329:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,330:INFO:Engine for model 'lasso' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,334:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,337:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,396:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,440:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,441:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,441:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,441:INFO:Engine successfully changes for model 'lasso' to 'sklearn'.
2025-08-28 16:35:49,445:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,449:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,515:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,565:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,565:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,566:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,572:INFO:Engine for model 'ridge' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,583:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,657:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,705:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,705:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,705:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,706:INFO:Engine successfully changes for model 'ridge' to 'sklearn'.
2025-08-28 16:35:49,714:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,773:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,815:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,816:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,816:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,825:INFO:Engine for model 'en' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,881:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,929:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:49,930:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,930:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:49,931:INFO:Engine successfully changes for model 'en' to 'sklearn'.
2025-08-28 16:35:50,008:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:50,062:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:50,062:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,063:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,129:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:50,172:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 16:35:50,173:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,173:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,174:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-28 16:35:50,241:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:50,289:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,290:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,361:INFO:Engine for model 'svm' has not been set explicitly, hence returning None.
2025-08-28 16:35:50,408:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,408:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,409:INFO:Engine successfully changes for model 'svm' to 'sklearn'.
2025-08-28 16:35:50,529:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,529:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,656:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,657:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:50,659:INFO:Preparing preprocessing pipeline...
2025-08-28 16:35:50,659:INFO:Set up simple imputation.
2025-08-28 16:35:50,662:INFO:Set up encoding of ordinal features.
2025-08-28 16:35:50,665:INFO:Set up encoding of categorical features.
2025-08-28 16:35:50,746:INFO:Finished creating preprocessing pipeline.
2025-08-28 16:35:50,783:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))])
2025-08-28 16:35:50,783:INFO:Creating final display dataframe.
2025-08-28 16:35:51,000:INFO:Setup _display_container:                     Description                      Value
0                    Session id                        123
1                        Target                    charges
2                   Target type                 Regression
3           Original data shape                  (1338, 7)
4        Transformed data shape                 (1338, 10)
5   Transformed train set shape                  (936, 10)
6    Transformed test set shape                  (402, 10)
7              Numeric features                          3
8          Categorical features                          3
9                    Preprocess                       True
10              Imputation type                     simple
11           Numeric imputation                       mean
12       Categorical imputation                       mode
13     Maximum one-hot encoding                         25
14              Encoding method                       None
15               Fold Generator                      KFold
16                  Fold Number                         10
17                     CPU Jobs                         -1
18                      Use GPU                      False
19               Log Experiment               MlflowLogger
20              Experiment Name  insurance_cost_prediction
21                          USI                       3209
2025-08-28 16:35:51,110:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:51,110:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:51,215:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:51,215:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 16:35:51,217:INFO:Logging experiment in loggers
2025-08-28 16:35:52,004:INFO:SubProcess save_model() called ==================================
2025-08-28 16:35:52,096:INFO:Initializing save_model()
2025-08-28 16:35:52,096:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))]), model_name=C:\Users\fabri\AppData\Local\Temp\tmpczh2dljq\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))]), verbose=False, use_case=MLUsecase.REGRESSION, kwargs={})
2025-08-28 16:35:52,096:INFO:Adding model into prep_pipe
2025-08-28 16:35:52,096:WARNING:Only Model saved as it was a pipeline.
2025-08-28 16:35:52,103:INFO:C:\Users\fabri\AppData\Local\Temp\tmpczh2dljq\Transformation Pipeline.pkl saved in current working directory
2025-08-28 16:35:52,143:INFO:Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))])
2025-08-28 16:35:52,143:INFO:save_model() successfully completed......................................
2025-08-28 16:35:52,281:INFO:SubProcess save_model() end ==================================
2025-08-28 16:35:52,297:INFO:setup() successfully completed in 2.48s...............
2025-08-28 16:35:52,297:INFO:Initializing compare_models()
2025-08-28 16:35:52,297:INFO:compare_models(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=R2, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'R2', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.regression.oop.RegressionExperiment'>})
2025-08-28 16:35:52,297:INFO:Checking exceptions
2025-08-28 16:35:52,300:INFO:Preparing display monitor
2025-08-28 16:35:52,303:INFO:Initializing Linear Regression
2025-08-28 16:35:52,303:INFO:Total runtime is 0.0 minutes
2025-08-28 16:35:52,303:INFO:SubProcess create_model() called ==================================
2025-08-28 16:35:52,303:INFO:Initializing create_model()
2025-08-28 16:35:52,303:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=lr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:35:52,304:INFO:Checking exceptions
2025-08-28 16:35:52,304:INFO:Importing libraries
2025-08-28 16:35:52,304:INFO:Copying training dataset
2025-08-28 16:35:52,307:INFO:Defining folds
2025-08-28 16:35:52,307:INFO:Declaring metric variables
2025-08-28 16:35:52,307:INFO:Importing untrained model
2025-08-28 16:35:52,307:INFO:Linear Regression Imported successfully
2025-08-28 16:35:52,307:INFO:Starting cross validation
2025-08-28 16:35:52,315:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:35:58,606:INFO:Calculating mean and std
2025-08-28 16:35:58,607:INFO:Creating metrics dataframe
2025-08-28 16:35:58,611:INFO:Uploading results into container
2025-08-28 16:35:58,612:INFO:Uploading model into container now
2025-08-28 16:35:58,613:INFO:_master_model_container: 1
2025-08-28 16:35:58,613:INFO:_display_container: 2
2025-08-28 16:35:58,613:INFO:LinearRegression(n_jobs=-1)
2025-08-28 16:35:58,614:INFO:create_model() successfully completed......................................
2025-08-28 16:35:58,743:INFO:SubProcess create_model() end ==================================
2025-08-28 16:35:58,743:INFO:Creating metrics dataframe
2025-08-28 16:35:58,745:INFO:Initializing Lasso Regression
2025-08-28 16:35:58,745:INFO:Total runtime is 0.10737831592559814 minutes
2025-08-28 16:35:58,745:INFO:SubProcess create_model() called ==================================
2025-08-28 16:35:58,745:INFO:Initializing create_model()
2025-08-28 16:35:58,745:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=lasso, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:35:58,747:INFO:Checking exceptions
2025-08-28 16:35:58,747:INFO:Importing libraries
2025-08-28 16:35:58,747:INFO:Copying training dataset
2025-08-28 16:35:58,750:INFO:Defining folds
2025-08-28 16:35:58,750:INFO:Declaring metric variables
2025-08-28 16:35:58,750:INFO:Importing untrained model
2025-08-28 16:35:58,751:INFO:Lasso Regression Imported successfully
2025-08-28 16:35:58,751:INFO:Starting cross validation
2025-08-28 16:35:58,752:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:01,649:INFO:Calculating mean and std
2025-08-28 16:36:01,649:INFO:Creating metrics dataframe
2025-08-28 16:36:01,653:INFO:Uploading results into container
2025-08-28 16:36:01,653:INFO:Uploading model into container now
2025-08-28 16:36:01,654:INFO:_master_model_container: 2
2025-08-28 16:36:01,654:INFO:_display_container: 2
2025-08-28 16:36:01,654:INFO:Lasso(random_state=123)
2025-08-28 16:36:01,654:INFO:create_model() successfully completed......................................
2025-08-28 16:36:01,805:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:01,805:INFO:Creating metrics dataframe
2025-08-28 16:36:01,807:INFO:Initializing Ridge Regression
2025-08-28 16:36:01,807:INFO:Total runtime is 0.15841134786605834 minutes
2025-08-28 16:36:01,808:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:01,808:INFO:Initializing create_model()
2025-08-28 16:36:01,808:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=ridge, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:01,809:INFO:Checking exceptions
2025-08-28 16:36:01,809:INFO:Importing libraries
2025-08-28 16:36:01,809:INFO:Copying training dataset
2025-08-28 16:36:01,812:INFO:Defining folds
2025-08-28 16:36:01,812:INFO:Declaring metric variables
2025-08-28 16:36:01,812:INFO:Importing untrained model
2025-08-28 16:36:01,813:INFO:Ridge Regression Imported successfully
2025-08-28 16:36:01,813:INFO:Starting cross validation
2025-08-28 16:36:01,814:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:02,014:INFO:Calculating mean and std
2025-08-28 16:36:02,015:INFO:Creating metrics dataframe
2025-08-28 16:36:02,017:INFO:Uploading results into container
2025-08-28 16:36:02,018:INFO:Uploading model into container now
2025-08-28 16:36:02,019:INFO:_master_model_container: 3
2025-08-28 16:36:02,019:INFO:_display_container: 2
2025-08-28 16:36:02,019:INFO:Ridge(random_state=123)
2025-08-28 16:36:02,019:INFO:create_model() successfully completed......................................
2025-08-28 16:36:02,157:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:02,158:INFO:Creating metrics dataframe
2025-08-28 16:36:02,160:INFO:Initializing Elastic Net
2025-08-28 16:36:02,160:INFO:Total runtime is 0.16429148117701212 minutes
2025-08-28 16:36:02,160:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:02,161:INFO:Initializing create_model()
2025-08-28 16:36:02,161:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=en, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:02,161:INFO:Checking exceptions
2025-08-28 16:36:02,161:INFO:Importing libraries
2025-08-28 16:36:02,161:INFO:Copying training dataset
2025-08-28 16:36:02,165:INFO:Defining folds
2025-08-28 16:36:02,165:INFO:Declaring metric variables
2025-08-28 16:36:02,165:INFO:Importing untrained model
2025-08-28 16:36:02,166:INFO:Elastic Net Imported successfully
2025-08-28 16:36:02,166:INFO:Starting cross validation
2025-08-28 16:36:02,167:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:02,363:INFO:Calculating mean and std
2025-08-28 16:36:02,364:INFO:Creating metrics dataframe
2025-08-28 16:36:02,365:INFO:Uploading results into container
2025-08-28 16:36:02,366:INFO:Uploading model into container now
2025-08-28 16:36:02,366:INFO:_master_model_container: 4
2025-08-28 16:36:02,366:INFO:_display_container: 2
2025-08-28 16:36:02,366:INFO:ElasticNet(random_state=123)
2025-08-28 16:36:02,367:INFO:create_model() successfully completed......................................
2025-08-28 16:36:02,501:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:02,501:INFO:Creating metrics dataframe
2025-08-28 16:36:02,504:INFO:Initializing Least Angle Regression
2025-08-28 16:36:02,505:INFO:Total runtime is 0.1700192372004191 minutes
2025-08-28 16:36:02,505:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:02,505:INFO:Initializing create_model()
2025-08-28 16:36:02,505:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=lar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:02,505:INFO:Checking exceptions
2025-08-28 16:36:02,505:INFO:Importing libraries
2025-08-28 16:36:02,505:INFO:Copying training dataset
2025-08-28 16:36:02,509:INFO:Defining folds
2025-08-28 16:36:02,509:INFO:Declaring metric variables
2025-08-28 16:36:02,510:INFO:Importing untrained model
2025-08-28 16:36:02,510:INFO:Least Angle Regression Imported successfully
2025-08-28 16:36:02,511:INFO:Starting cross validation
2025-08-28 16:36:02,512:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:02,720:INFO:Calculating mean and std
2025-08-28 16:36:02,721:INFO:Creating metrics dataframe
2025-08-28 16:36:02,723:INFO:Uploading results into container
2025-08-28 16:36:02,723:INFO:Uploading model into container now
2025-08-28 16:36:02,724:INFO:_master_model_container: 5
2025-08-28 16:36:02,724:INFO:_display_container: 2
2025-08-28 16:36:02,724:INFO:Lars(random_state=123)
2025-08-28 16:36:02,724:INFO:create_model() successfully completed......................................
2025-08-28 16:36:02,851:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:02,851:INFO:Creating metrics dataframe
2025-08-28 16:36:02,854:INFO:Initializing Lasso Least Angle Regression
2025-08-28 16:36:02,854:INFO:Total runtime is 0.1758453607559204 minutes
2025-08-28 16:36:02,854:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:02,854:INFO:Initializing create_model()
2025-08-28 16:36:02,854:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=llar, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:02,854:INFO:Checking exceptions
2025-08-28 16:36:02,855:INFO:Importing libraries
2025-08-28 16:36:02,855:INFO:Copying training dataset
2025-08-28 16:36:02,858:INFO:Defining folds
2025-08-28 16:36:02,858:INFO:Declaring metric variables
2025-08-28 16:36:02,858:INFO:Importing untrained model
2025-08-28 16:36:02,858:INFO:Lasso Least Angle Regression Imported successfully
2025-08-28 16:36:02,859:INFO:Starting cross validation
2025-08-28 16:36:02,859:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:03,058:INFO:Calculating mean and std
2025-08-28 16:36:03,058:INFO:Creating metrics dataframe
2025-08-28 16:36:03,061:INFO:Uploading results into container
2025-08-28 16:36:03,061:INFO:Uploading model into container now
2025-08-28 16:36:03,062:INFO:_master_model_container: 6
2025-08-28 16:36:03,062:INFO:_display_container: 2
2025-08-28 16:36:03,062:INFO:LassoLars(random_state=123)
2025-08-28 16:36:03,062:INFO:create_model() successfully completed......................................
2025-08-28 16:36:03,189:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:03,189:INFO:Creating metrics dataframe
2025-08-28 16:36:03,191:INFO:Initializing Orthogonal Matching Pursuit
2025-08-28 16:36:03,191:INFO:Total runtime is 0.1814717650413513 minutes
2025-08-28 16:36:03,192:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:03,192:INFO:Initializing create_model()
2025-08-28 16:36:03,192:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=omp, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:03,192:INFO:Checking exceptions
2025-08-28 16:36:03,192:INFO:Importing libraries
2025-08-28 16:36:03,192:INFO:Copying training dataset
2025-08-28 16:36:03,195:INFO:Defining folds
2025-08-28 16:36:03,196:INFO:Declaring metric variables
2025-08-28 16:36:03,196:INFO:Importing untrained model
2025-08-28 16:36:03,197:INFO:Orthogonal Matching Pursuit Imported successfully
2025-08-28 16:36:03,197:INFO:Starting cross validation
2025-08-28 16:36:03,198:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:03,423:INFO:Calculating mean and std
2025-08-28 16:36:03,424:INFO:Creating metrics dataframe
2025-08-28 16:36:03,425:INFO:Uploading results into container
2025-08-28 16:36:03,426:INFO:Uploading model into container now
2025-08-28 16:36:03,426:INFO:_master_model_container: 7
2025-08-28 16:36:03,426:INFO:_display_container: 2
2025-08-28 16:36:03,427:INFO:OrthogonalMatchingPursuit()
2025-08-28 16:36:03,427:INFO:create_model() successfully completed......................................
2025-08-28 16:36:03,560:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:03,561:INFO:Creating metrics dataframe
2025-08-28 16:36:03,563:INFO:Initializing Bayesian Ridge
2025-08-28 16:36:03,564:INFO:Total runtime is 0.18767894109090166 minutes
2025-08-28 16:36:03,564:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:03,564:INFO:Initializing create_model()
2025-08-28 16:36:03,564:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=br, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:03,564:INFO:Checking exceptions
2025-08-28 16:36:03,564:INFO:Importing libraries
2025-08-28 16:36:03,564:INFO:Copying training dataset
2025-08-28 16:36:03,569:INFO:Defining folds
2025-08-28 16:36:03,569:INFO:Declaring metric variables
2025-08-28 16:36:03,569:INFO:Importing untrained model
2025-08-28 16:36:03,569:INFO:Bayesian Ridge Imported successfully
2025-08-28 16:36:03,569:INFO:Starting cross validation
2025-08-28 16:36:03,572:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:03,815:INFO:Calculating mean and std
2025-08-28 16:36:03,816:INFO:Creating metrics dataframe
2025-08-28 16:36:03,818:INFO:Uploading results into container
2025-08-28 16:36:03,819:INFO:Uploading model into container now
2025-08-28 16:36:03,819:INFO:_master_model_container: 8
2025-08-28 16:36:03,820:INFO:_display_container: 2
2025-08-28 16:36:03,820:INFO:BayesianRidge()
2025-08-28 16:36:03,820:INFO:create_model() successfully completed......................................
2025-08-28 16:36:03,964:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:03,964:INFO:Creating metrics dataframe
2025-08-28 16:36:03,968:INFO:Initializing Passive Aggressive Regressor
2025-08-28 16:36:03,968:INFO:Total runtime is 0.19441458384195962 minutes
2025-08-28 16:36:03,968:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:03,969:INFO:Initializing create_model()
2025-08-28 16:36:03,969:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=par, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:03,969:INFO:Checking exceptions
2025-08-28 16:36:03,969:INFO:Importing libraries
2025-08-28 16:36:03,969:INFO:Copying training dataset
2025-08-28 16:36:03,973:INFO:Defining folds
2025-08-28 16:36:03,973:INFO:Declaring metric variables
2025-08-28 16:36:03,973:INFO:Importing untrained model
2025-08-28 16:36:03,973:INFO:Passive Aggressive Regressor Imported successfully
2025-08-28 16:36:03,973:INFO:Starting cross validation
2025-08-28 16:36:03,974:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:04,191:INFO:Calculating mean and std
2025-08-28 16:36:04,193:INFO:Creating metrics dataframe
2025-08-28 16:36:04,195:INFO:Uploading results into container
2025-08-28 16:36:04,195:INFO:Uploading model into container now
2025-08-28 16:36:04,195:INFO:_master_model_container: 9
2025-08-28 16:36:04,195:INFO:_display_container: 2
2025-08-28 16:36:04,196:INFO:PassiveAggressiveRegressor(random_state=123)
2025-08-28 16:36:04,196:INFO:create_model() successfully completed......................................
2025-08-28 16:36:04,379:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:04,379:INFO:Creating metrics dataframe
2025-08-28 16:36:04,383:INFO:Initializing Huber Regressor
2025-08-28 16:36:04,383:INFO:Total runtime is 0.20133562088012694 minutes
2025-08-28 16:36:04,383:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:04,383:INFO:Initializing create_model()
2025-08-28 16:36:04,384:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=huber, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:04,384:INFO:Checking exceptions
2025-08-28 16:36:04,384:INFO:Importing libraries
2025-08-28 16:36:04,384:INFO:Copying training dataset
2025-08-28 16:36:04,389:INFO:Defining folds
2025-08-28 16:36:04,389:INFO:Declaring metric variables
2025-08-28 16:36:04,389:INFO:Importing untrained model
2025-08-28 16:36:04,389:INFO:Huber Regressor Imported successfully
2025-08-28 16:36:04,389:INFO:Starting cross validation
2025-08-28 16:36:04,391:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:04,555:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,559:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,564:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,585:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,592:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,597:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,603:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,606:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,621:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,622:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\linear_model\_huber.py:342: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
  self.n_iter_ = _check_optimize_result("lbfgs", opt_res, self.max_iter)

2025-08-28 16:36:04,662:INFO:Calculating mean and std
2025-08-28 16:36:04,663:INFO:Creating metrics dataframe
2025-08-28 16:36:04,665:INFO:Uploading results into container
2025-08-28 16:36:04,666:INFO:Uploading model into container now
2025-08-28 16:36:04,666:INFO:_master_model_container: 10
2025-08-28 16:36:04,666:INFO:_display_container: 2
2025-08-28 16:36:04,667:INFO:HuberRegressor()
2025-08-28 16:36:04,667:INFO:create_model() successfully completed......................................
2025-08-28 16:36:04,813:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:04,813:INFO:Creating metrics dataframe
2025-08-28 16:36:04,817:INFO:Initializing K Neighbors Regressor
2025-08-28 16:36:04,818:INFO:Total runtime is 0.2085866610209147 minutes
2025-08-28 16:36:04,818:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:04,818:INFO:Initializing create_model()
2025-08-28 16:36:04,818:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=knn, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:04,818:INFO:Checking exceptions
2025-08-28 16:36:04,819:INFO:Importing libraries
2025-08-28 16:36:04,819:INFO:Copying training dataset
2025-08-28 16:36:04,824:INFO:Defining folds
2025-08-28 16:36:04,824:INFO:Declaring metric variables
2025-08-28 16:36:04,824:INFO:Importing untrained model
2025-08-28 16:36:04,824:INFO:K Neighbors Regressor Imported successfully
2025-08-28 16:36:04,824:INFO:Starting cross validation
2025-08-28 16:36:04,826:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:05,088:INFO:Calculating mean and std
2025-08-28 16:36:05,090:INFO:Creating metrics dataframe
2025-08-28 16:36:05,092:INFO:Uploading results into container
2025-08-28 16:36:05,093:INFO:Uploading model into container now
2025-08-28 16:36:05,093:INFO:_master_model_container: 11
2025-08-28 16:36:05,093:INFO:_display_container: 2
2025-08-28 16:36:05,093:INFO:KNeighborsRegressor(n_jobs=-1)
2025-08-28 16:36:05,093:INFO:create_model() successfully completed......................................
2025-08-28 16:36:05,225:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:05,225:INFO:Creating metrics dataframe
2025-08-28 16:36:05,227:INFO:Initializing Decision Tree Regressor
2025-08-28 16:36:05,227:INFO:Total runtime is 0.21541151205698647 minutes
2025-08-28 16:36:05,227:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:05,227:INFO:Initializing create_model()
2025-08-28 16:36:05,227:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=dt, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:05,229:INFO:Checking exceptions
2025-08-28 16:36:05,229:INFO:Importing libraries
2025-08-28 16:36:05,229:INFO:Copying training dataset
2025-08-28 16:36:05,234:INFO:Defining folds
2025-08-28 16:36:05,234:INFO:Declaring metric variables
2025-08-28 16:36:05,234:INFO:Importing untrained model
2025-08-28 16:36:05,234:INFO:Decision Tree Regressor Imported successfully
2025-08-28 16:36:05,235:INFO:Starting cross validation
2025-08-28 16:36:05,236:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:05,443:INFO:Calculating mean and std
2025-08-28 16:36:05,444:INFO:Creating metrics dataframe
2025-08-28 16:36:05,446:INFO:Uploading results into container
2025-08-28 16:36:05,446:INFO:Uploading model into container now
2025-08-28 16:36:05,447:INFO:_master_model_container: 12
2025-08-28 16:36:05,447:INFO:_display_container: 2
2025-08-28 16:36:05,447:INFO:DecisionTreeRegressor(random_state=123)
2025-08-28 16:36:05,447:INFO:create_model() successfully completed......................................
2025-08-28 16:36:05,589:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:05,589:INFO:Creating metrics dataframe
2025-08-28 16:36:05,591:INFO:Initializing Random Forest Regressor
2025-08-28 16:36:05,591:INFO:Total runtime is 0.2214745243390401 minutes
2025-08-28 16:36:05,591:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:05,592:INFO:Initializing create_model()
2025-08-28 16:36:05,592:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=rf, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:05,592:INFO:Checking exceptions
2025-08-28 16:36:05,592:INFO:Importing libraries
2025-08-28 16:36:05,592:INFO:Copying training dataset
2025-08-28 16:36:05,596:INFO:Defining folds
2025-08-28 16:36:05,596:INFO:Declaring metric variables
2025-08-28 16:36:05,596:INFO:Importing untrained model
2025-08-28 16:36:05,596:INFO:Random Forest Regressor Imported successfully
2025-08-28 16:36:05,597:INFO:Starting cross validation
2025-08-28 16:36:05,598:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:06,412:INFO:Calculating mean and std
2025-08-28 16:36:06,413:INFO:Creating metrics dataframe
2025-08-28 16:36:06,416:INFO:Uploading results into container
2025-08-28 16:36:06,417:INFO:Uploading model into container now
2025-08-28 16:36:06,417:INFO:_master_model_container: 13
2025-08-28 16:36:06,417:INFO:_display_container: 2
2025-08-28 16:36:06,418:INFO:RandomForestRegressor(n_jobs=-1, random_state=123)
2025-08-28 16:36:06,418:INFO:create_model() successfully completed......................................
2025-08-28 16:36:06,555:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:06,555:INFO:Creating metrics dataframe
2025-08-28 16:36:06,557:INFO:Initializing Extra Trees Regressor
2025-08-28 16:36:06,559:INFO:Total runtime is 0.237600302696228 minutes
2025-08-28 16:36:06,559:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:06,559:INFO:Initializing create_model()
2025-08-28 16:36:06,559:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=et, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:06,559:INFO:Checking exceptions
2025-08-28 16:36:06,559:INFO:Importing libraries
2025-08-28 16:36:06,559:INFO:Copying training dataset
2025-08-28 16:36:06,563:INFO:Defining folds
2025-08-28 16:36:06,563:INFO:Declaring metric variables
2025-08-28 16:36:06,563:INFO:Importing untrained model
2025-08-28 16:36:06,564:INFO:Extra Trees Regressor Imported successfully
2025-08-28 16:36:06,564:INFO:Starting cross validation
2025-08-28 16:36:06,565:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:07,199:INFO:Calculating mean and std
2025-08-28 16:36:07,200:INFO:Creating metrics dataframe
2025-08-28 16:36:07,203:INFO:Uploading results into container
2025-08-28 16:36:07,203:INFO:Uploading model into container now
2025-08-28 16:36:07,204:INFO:_master_model_container: 14
2025-08-28 16:36:07,204:INFO:_display_container: 2
2025-08-28 16:36:07,204:INFO:ExtraTreesRegressor(n_jobs=-1, random_state=123)
2025-08-28 16:36:07,204:INFO:create_model() successfully completed......................................
2025-08-28 16:36:07,353:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:07,353:INFO:Creating metrics dataframe
2025-08-28 16:36:07,356:INFO:Initializing AdaBoost Regressor
2025-08-28 16:36:07,356:INFO:Total runtime is 0.25087859630584713 minutes
2025-08-28 16:36:07,356:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:07,356:INFO:Initializing create_model()
2025-08-28 16:36:07,356:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=ada, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:07,356:INFO:Checking exceptions
2025-08-28 16:36:07,356:INFO:Importing libraries
2025-08-28 16:36:07,356:INFO:Copying training dataset
2025-08-28 16:36:07,361:INFO:Defining folds
2025-08-28 16:36:07,361:INFO:Declaring metric variables
2025-08-28 16:36:07,361:INFO:Importing untrained model
2025-08-28 16:36:07,362:INFO:AdaBoost Regressor Imported successfully
2025-08-28 16:36:07,362:INFO:Starting cross validation
2025-08-28 16:36:07,363:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:07,637:INFO:Calculating mean and std
2025-08-28 16:36:07,638:INFO:Creating metrics dataframe
2025-08-28 16:36:07,640:INFO:Uploading results into container
2025-08-28 16:36:07,641:INFO:Uploading model into container now
2025-08-28 16:36:07,641:INFO:_master_model_container: 15
2025-08-28 16:36:07,641:INFO:_display_container: 2
2025-08-28 16:36:07,642:INFO:AdaBoostRegressor(random_state=123)
2025-08-28 16:36:07,642:INFO:create_model() successfully completed......................................
2025-08-28 16:36:07,789:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:07,789:INFO:Creating metrics dataframe
2025-08-28 16:36:07,793:INFO:Initializing Gradient Boosting Regressor
2025-08-28 16:36:07,793:INFO:Total runtime is 0.2581622322400411 minutes
2025-08-28 16:36:07,793:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:07,793:INFO:Initializing create_model()
2025-08-28 16:36:07,793:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=gbr, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:07,793:INFO:Checking exceptions
2025-08-28 16:36:07,793:INFO:Importing libraries
2025-08-28 16:36:07,794:INFO:Copying training dataset
2025-08-28 16:36:07,797:INFO:Defining folds
2025-08-28 16:36:07,797:INFO:Declaring metric variables
2025-08-28 16:36:07,798:INFO:Importing untrained model
2025-08-28 16:36:07,798:INFO:Gradient Boosting Regressor Imported successfully
2025-08-28 16:36:07,798:INFO:Starting cross validation
2025-08-28 16:36:07,799:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:08,194:INFO:Calculating mean and std
2025-08-28 16:36:08,195:INFO:Creating metrics dataframe
2025-08-28 16:36:08,197:INFO:Uploading results into container
2025-08-28 16:36:08,197:INFO:Uploading model into container now
2025-08-28 16:36:08,197:INFO:_master_model_container: 16
2025-08-28 16:36:08,197:INFO:_display_container: 2
2025-08-28 16:36:08,199:INFO:GradientBoostingRegressor(random_state=123)
2025-08-28 16:36:08,199:INFO:create_model() successfully completed......................................
2025-08-28 16:36:08,341:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:08,341:INFO:Creating metrics dataframe
2025-08-28 16:36:08,344:INFO:Initializing Light Gradient Boosting Machine
2025-08-28 16:36:08,345:INFO:Total runtime is 0.2673641840616862 minutes
2025-08-28 16:36:08,345:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:08,345:INFO:Initializing create_model()
2025-08-28 16:36:08,345:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=lightgbm, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:08,345:INFO:Checking exceptions
2025-08-28 16:36:08,345:INFO:Importing libraries
2025-08-28 16:36:08,345:INFO:Copying training dataset
2025-08-28 16:36:08,350:INFO:Defining folds
2025-08-28 16:36:08,350:INFO:Declaring metric variables
2025-08-28 16:36:08,351:INFO:Importing untrained model
2025-08-28 16:36:08,352:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-28 16:36:08,352:INFO:Starting cross validation
2025-08-28 16:36:08,353:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:09,544:INFO:Calculating mean and std
2025-08-28 16:36:09,545:INFO:Creating metrics dataframe
2025-08-28 16:36:09,547:INFO:Uploading results into container
2025-08-28 16:36:09,548:INFO:Uploading model into container now
2025-08-28 16:36:09,548:INFO:_master_model_container: 17
2025-08-28 16:36:09,549:INFO:_display_container: 2
2025-08-28 16:36:09,549:INFO:LGBMRegressor(n_jobs=-1, random_state=123)
2025-08-28 16:36:09,549:INFO:create_model() successfully completed......................................
2025-08-28 16:36:09,695:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:09,696:INFO:Creating metrics dataframe
2025-08-28 16:36:09,698:INFO:Initializing Dummy Regressor
2025-08-28 16:36:09,698:INFO:Total runtime is 0.2899190425872803 minutes
2025-08-28 16:36:09,699:INFO:SubProcess create_model() called ==================================
2025-08-28 16:36:09,699:INFO:Initializing create_model()
2025-08-28 16:36:09,699:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=dummy, fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001CED48AFAD0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:09,699:INFO:Checking exceptions
2025-08-28 16:36:09,699:INFO:Importing libraries
2025-08-28 16:36:09,699:INFO:Copying training dataset
2025-08-28 16:36:09,702:INFO:Defining folds
2025-08-28 16:36:09,702:INFO:Declaring metric variables
2025-08-28 16:36:09,702:INFO:Importing untrained model
2025-08-28 16:36:09,703:INFO:Dummy Regressor Imported successfully
2025-08-28 16:36:09,703:INFO:Starting cross validation
2025-08-28 16:36:09,705:INFO:Cross validating with KFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 16:36:09,890:INFO:Calculating mean and std
2025-08-28 16:36:09,891:INFO:Creating metrics dataframe
2025-08-28 16:36:09,893:INFO:Uploading results into container
2025-08-28 16:36:09,893:INFO:Uploading model into container now
2025-08-28 16:36:09,894:INFO:_master_model_container: 18
2025-08-28 16:36:09,894:INFO:_display_container: 2
2025-08-28 16:36:09,894:INFO:DummyRegressor()
2025-08-28 16:36:09,894:INFO:create_model() successfully completed......................................
2025-08-28 16:36:10,022:INFO:SubProcess create_model() end ==================================
2025-08-28 16:36:10,022:INFO:Creating metrics dataframe
2025-08-28 16:36:10,025:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-08-28 16:36:10,027:INFO:Initializing create_model()
2025-08-28 16:36:10,027:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=GradientBoostingRegressor(random_state=123), fold=KFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:10,027:INFO:Checking exceptions
2025-08-28 16:36:10,029:INFO:Importing libraries
2025-08-28 16:36:10,029:INFO:Copying training dataset
2025-08-28 16:36:10,032:INFO:Defining folds
2025-08-28 16:36:10,032:INFO:Declaring metric variables
2025-08-28 16:36:10,033:INFO:Importing untrained model
2025-08-28 16:36:10,033:INFO:Declaring custom model
2025-08-28 16:36:10,033:INFO:Gradient Boosting Regressor Imported successfully
2025-08-28 16:36:10,034:INFO:Cross validation set to False
2025-08-28 16:36:10,035:INFO:Fitting Model
2025-08-28 16:36:10,190:INFO:GradientBoostingRegressor(random_state=123)
2025-08-28 16:36:10,190:INFO:create_model() successfully completed......................................
2025-08-28 16:36:10,313:INFO:Creating Dashboard logs
2025-08-28 16:36:10,313:INFO:Model: Gradient Boosting Regressor
2025-08-28 16:36:10,353:INFO:Logged params: {'alpha': 0.9, 'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'squared_error', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 123, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-08-28 16:36:10,477:INFO:Initializing predict_model()
2025-08-28 16:36:10,477:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=GradientBoostingRegressor(random_state=123), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001CED4DFCA40>)
2025-08-28 16:36:10,477:INFO:Checking exceptions
2025-08-28 16:36:10,477:INFO:Preloading libraries
2025-08-28 16:36:10,608:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_regression.py:483: FutureWarning: 'squared' is deprecated in version 1.4 and will be removed in 1.6. To calculate the root mean squared error, use the function'root_mean_squared_error'.
  warnings.warn(

2025-08-28 16:36:10,775:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\_distutils_hack\__init__.py:32: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-28 16:36:13,766:INFO:Creating Dashboard logs
2025-08-28 16:36:13,767:INFO:Model: Random Forest Regressor
2025-08-28 16:36:13,808:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-28 16:36:14,066:INFO:Creating Dashboard logs
2025-08-28 16:36:14,067:INFO:Model: Light Gradient Boosting Machine
2025-08-28 16:36:14,110:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 123, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-08-28 16:36:14,377:INFO:Creating Dashboard logs
2025-08-28 16:36:14,377:INFO:Model: Extra Trees Regressor
2025-08-28 16:36:14,423:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': 1.0, 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-28 16:36:14,719:INFO:Creating Dashboard logs
2025-08-28 16:36:14,720:INFO:Model: AdaBoost Regressor
2025-08-28 16:36:14,757:INFO:Logged params: {'estimator': None, 'learning_rate': 1.0, 'loss': 'linear', 'n_estimators': 50, 'random_state': 123}
2025-08-28 16:36:15,035:INFO:Creating Dashboard logs
2025-08-28 16:36:15,035:INFO:Model: Least Angle Regression
2025-08-28 16:36:15,077:INFO:Logged params: {'copy_X': True, 'eps': 2.220446049250313e-16, 'fit_intercept': True, 'fit_path': True, 'jitter': None, 'n_nonzero_coefs': 500, 'precompute': 'auto', 'random_state': 123, 'verbose': False}
2025-08-28 16:36:15,348:INFO:Creating Dashboard logs
2025-08-28 16:36:15,348:INFO:Model: Lasso Least Angle Regression
2025-08-28 16:36:15,388:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'eps': 2.220446049250313e-16, 'fit_intercept': True, 'fit_path': True, 'jitter': None, 'max_iter': 500, 'positive': False, 'precompute': 'auto', 'random_state': 123, 'verbose': False}
2025-08-28 16:36:15,634:INFO:Creating Dashboard logs
2025-08-28 16:36:15,635:INFO:Model: Bayesian Ridge
2025-08-28 16:36:15,670:INFO:Logged params: {'alpha_1': 1e-06, 'alpha_2': 1e-06, 'alpha_init': None, 'compute_score': False, 'copy_X': True, 'fit_intercept': True, 'lambda_1': 1e-06, 'lambda_2': 1e-06, 'lambda_init': None, 'max_iter': None, 'n_iter': 'deprecated', 'tol': 0.001, 'verbose': False}
2025-08-28 16:36:15,916:INFO:Creating Dashboard logs
2025-08-28 16:36:15,916:INFO:Model: Ridge Regression
2025-08-28 16:36:15,953:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 123, 'solver': 'auto', 'tol': 0.0001}
2025-08-28 16:36:16,187:INFO:Creating Dashboard logs
2025-08-28 16:36:16,187:INFO:Model: Lasso Regression
2025-08-28 16:36:16,225:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'max_iter': 1000, 'positive': False, 'precompute': False, 'random_state': 123, 'selection': 'cyclic', 'tol': 0.0001, 'warm_start': False}
2025-08-28 16:36:16,460:INFO:Creating Dashboard logs
2025-08-28 16:36:16,460:INFO:Model: Linear Regression
2025-08-28 16:36:16,498:INFO:Logged params: {'copy_X': True, 'fit_intercept': True, 'n_jobs': -1, 'positive': False}
2025-08-28 16:36:16,743:INFO:Creating Dashboard logs
2025-08-28 16:36:16,744:INFO:Model: Huber Regressor
2025-08-28 16:36:16,785:INFO:Logged params: {'alpha': 0.0001, 'epsilon': 1.35, 'fit_intercept': True, 'max_iter': 100, 'tol': 1e-05, 'warm_start': False}
2025-08-28 16:36:17,021:INFO:Creating Dashboard logs
2025-08-28 16:36:17,021:INFO:Model: Decision Tree Regressor
2025-08-28 16:36:17,068:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'squared_error', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 123, 'splitter': 'best'}
2025-08-28 16:36:17,315:INFO:Creating Dashboard logs
2025-08-28 16:36:17,316:INFO:Model: Passive Aggressive Regressor
2025-08-28 16:36:17,351:INFO:Logged params: {'C': 1.0, 'average': False, 'early_stopping': False, 'epsilon': 0.1, 'fit_intercept': True, 'loss': 'epsilon_insensitive', 'max_iter': 1000, 'n_iter_no_change': 5, 'random_state': 123, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-08-28 16:36:17,619:INFO:Creating Dashboard logs
2025-08-28 16:36:17,619:INFO:Model: Elastic Net
2025-08-28 16:36:17,659:INFO:Logged params: {'alpha': 1.0, 'copy_X': True, 'fit_intercept': True, 'l1_ratio': 0.5, 'max_iter': 1000, 'positive': False, 'precompute': False, 'random_state': 123, 'selection': 'cyclic', 'tol': 0.0001, 'warm_start': False}
2025-08-28 16:36:17,956:INFO:Creating Dashboard logs
2025-08-28 16:36:17,957:INFO:Model: Orthogonal Matching Pursuit
2025-08-28 16:36:18,011:INFO:Logged params: {'fit_intercept': True, 'n_nonzero_coefs': None, 'precompute': 'auto', 'tol': None}
2025-08-28 16:36:18,261:INFO:Creating Dashboard logs
2025-08-28 16:36:18,262:INFO:Model: K Neighbors Regressor
2025-08-28 16:36:18,299:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2025-08-28 16:36:18,546:INFO:Creating Dashboard logs
2025-08-28 16:36:18,546:INFO:Model: Dummy Regressor
2025-08-28 16:36:18,587:INFO:Logged params: {'constant': None, 'quantile': None, 'strategy': 'mean'}
2025-08-28 16:36:18,855:INFO:_master_model_container: 18
2025-08-28 16:36:18,855:INFO:_display_container: 2
2025-08-28 16:36:18,855:INFO:GradientBoostingRegressor(random_state=123)
2025-08-28 16:36:18,855:INFO:compare_models() successfully completed......................................
2025-08-28 16:36:18,856:INFO:Initializing finalize_model()
2025-08-28 16:36:18,856:INFO:finalize_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=GradientBoostingRegressor(random_state=123), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-08-28 16:36:18,857:INFO:Finalizing GradientBoostingRegressor(random_state=123)
2025-08-28 16:36:18,859:INFO:Initializing create_model()
2025-08-28 16:36:18,859:INFO:create_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001CE99103050>, estimator=GradientBoostingRegressor(random_state=123), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 16:36:18,859:INFO:Checking exceptions
2025-08-28 16:36:18,860:INFO:Importing libraries
2025-08-28 16:36:18,860:INFO:Copying training dataset
2025-08-28 16:36:18,861:INFO:Defining folds
2025-08-28 16:36:18,861:INFO:Declaring metric variables
2025-08-28 16:36:18,861:INFO:Importing untrained model
2025-08-28 16:36:18,861:INFO:Declaring custom model
2025-08-28 16:36:18,862:INFO:Gradient Boosting Regressor Imported successfully
2025-08-28 16:36:18,863:INFO:Cross validation set to False
2025-08-28 16:36:18,863:INFO:Fitting Model
2025-08-28 16:36:19,063:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker'],
                                    transfor...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=123))])
2025-08-28 16:36:19,063:INFO:create_model() successfully completed......................................
2025-08-28 16:36:19,174:INFO:Creating Dashboard logs
2025-08-28 16:36:19,175:INFO:Model: Gradient Boosting Regressor
2025-08-28 16:36:19,215:INFO:Logged params: {'alpha': 0.9, 'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'squared_error', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 123, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-08-28 16:36:19,457:INFO:_master_model_container: 18
2025-08-28 16:36:19,457:INFO:_display_container: 2
2025-08-28 16:36:19,495:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker'],
                                    transfor...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=123))])
2025-08-28 16:36:19,495:INFO:finalize_model() successfully completed......................................
2025-08-28 16:36:19,695:INFO:Initializing save_model()
2025-08-28 16:36:19,695:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker'],
                                    transfor...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=123))]), model_name=best_insurance_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerW...
                                                                     'smoker'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'sex',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True)))]), verbose=True, use_case=MLUsecase.REGRESSION, kwargs={})
2025-08-28 16:36:19,695:INFO:Adding model into prep_pipe
2025-08-28 16:36:19,695:WARNING:Only Model saved as it was a pipeline.
2025-08-28 16:36:19,706:INFO:best_insurance_model.pkl saved in current working directory
2025-08-28 16:36:19,747:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker'],
                                    transfor...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=123))])
2025-08-28 16:36:19,747:INFO:save_model() successfully completed......................................
2025-08-28 17:26:47,590:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 17:26:47,590:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 17:26:47,590:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 17:26:47,590:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 17:26:47,829:INFO:Initializing load_model()
2025-08-28 17:26:47,829:INFO:load_model(model_name=best_insurance_model, platform=None, authentication=None, verbose=True)
2025-08-28 17:27:56,130:INFO:Initializing predict_model()
2025-08-28 17:27:56,130:INFO:predict_model(self=<pycaret.regression.oop.RegressionExperiment object at 0x000001D17855CA90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['age', 'bmi', 'children'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['sex', 'smoker', 'region'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(include=['sex', 'smoker'],
                                    transfor...
                                                                         'data_type': dtype('O'),
                                                                         'mapping': female    0
male      1
NaN      -1
dtype: int64},
                                                                        {'col': 'smoker',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': no     0
yes    1
NaN   -1
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['region'],
                                    transformer=OneHotEncoder(cols=['region'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('actual_estimator',
                 GradientBoostingRegressor(random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D171605580>)
2025-08-28 17:27:56,130:INFO:Checking exceptions
2025-08-28 17:27:56,130:INFO:Preloading libraries
2025-08-28 17:27:56,130:INFO:Set up data.
2025-08-28 17:27:56,133:INFO:Set up index.
2025-08-28 19:58:31,419:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 19:58:31,419:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 19:58:31,419:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 19:58:31,419:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 19:58:33,974:INFO:PyCaret ClassificationExperiment
2025-08-28 19:58:33,974:INFO:Logging name: churn_prediction
2025-08-28 19:58:33,974:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-28 19:58:33,974:INFO:version 3.3.2
2025-08-28 19:58:33,974:INFO:Initializing setup()
2025-08-28 19:58:33,974:INFO:self.USI: 3ea9
2025-08-28 19:58:33,974:INFO:self._variable_keys: {'exp_id', 'USI', 'log_plots_param', 'pipeline', 'logging_param', 'X_train', 'X_test', 'fold_shuffle_param', 'is_multiclass', 'fix_imbalance', '_available_plots', 'y_train', 'memory', 'target_param', 'data', 'exp_name_log', 'seed', 'y_test', 'y', 'X', '_ml_usecase', 'fold_groups_param', 'gpu_n_jobs_param', 'fold_generator', 'html_param', 'idx', 'n_jobs_param', 'gpu_param'}
2025-08-28 19:58:33,974:INFO:Checking environment
2025-08-28 19:58:33,974:INFO:python_version: 3.11.13
2025-08-28 19:58:33,974:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-28 19:58:33,974:INFO:machine: AMD64
2025-08-28 19:58:34,004:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-28 19:58:34,006:INFO:Memory: svmem(total=34293444608, available=10778738688, percent=68.6, used=23514705920, free=10778738688)
2025-08-28 19:58:34,006:INFO:Physical Core: 6
2025-08-28 19:58:34,006:INFO:Logical Core: 12
2025-08-28 19:58:34,006:INFO:Checking libraries
2025-08-28 19:58:34,006:INFO:System:
2025-08-28 19:58:34,006:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-28 19:58:34,006:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-28 19:58:34,006:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-28 19:58:34,006:INFO:PyCaret required dependencies:
2025-08-28 19:58:34,076:INFO:                 pip: 25.1
2025-08-28 19:58:34,076:INFO:          setuptools: 72.1.0
2025-08-28 19:58:34,076:INFO:             pycaret: 3.3.2
2025-08-28 19:58:34,076:INFO:             IPython: 9.4.0
2025-08-28 19:58:34,076:INFO:          ipywidgets: 8.1.7
2025-08-28 19:58:34,076:INFO:                tqdm: 4.67.1
2025-08-28 19:58:34,076:INFO:               numpy: 1.26.4
2025-08-28 19:58:34,076:INFO:              pandas: 2.1.4
2025-08-28 19:58:34,076:INFO:              jinja2: 3.1.6
2025-08-28 19:58:34,076:INFO:               scipy: 1.11.4
2025-08-28 19:58:34,076:INFO:              joblib: 1.3.2
2025-08-28 19:58:34,077:INFO:             sklearn: 1.4.2
2025-08-28 19:58:34,077:INFO:                pyod: 2.0.5
2025-08-28 19:58:34,077:INFO:            imblearn: 0.14.0
2025-08-28 19:58:34,077:INFO:   category_encoders: 2.7.0
2025-08-28 19:58:34,077:INFO:            lightgbm: 4.6.0
2025-08-28 19:58:34,077:INFO:               numba: 0.61.2
2025-08-28 19:58:34,077:INFO:            requests: 2.32.4
2025-08-28 19:58:34,077:INFO:          matplotlib: 3.7.5
2025-08-28 19:58:34,077:INFO:          scikitplot: 0.3.7
2025-08-28 19:58:34,077:INFO:         yellowbrick: 1.5
2025-08-28 19:58:34,077:INFO:              plotly: 5.24.1
2025-08-28 19:58:34,077:INFO:    plotly-resampler: Not installed
2025-08-28 19:58:34,077:INFO:             kaleido: 1.0.0
2025-08-28 19:58:34,077:INFO:           schemdraw: 0.15
2025-08-28 19:58:34,077:INFO:         statsmodels: 0.14.5
2025-08-28 19:58:34,077:INFO:              sktime: 0.26.0
2025-08-28 19:58:34,077:INFO:               tbats: 1.1.3
2025-08-28 19:58:34,077:INFO:            pmdarima: 2.0.4
2025-08-28 19:58:34,077:INFO:              psutil: 7.0.0
2025-08-28 19:58:34,077:INFO:          markupsafe: 3.0.2
2025-08-28 19:58:34,077:INFO:             pickle5: Not installed
2025-08-28 19:58:34,077:INFO:         cloudpickle: 3.1.1
2025-08-28 19:58:34,077:INFO:         deprecation: 2.1.0
2025-08-28 19:58:34,078:INFO:              xxhash: 3.5.0
2025-08-28 19:58:34,078:INFO:           wurlitzer: Not installed
2025-08-28 19:58:34,078:INFO:PyCaret optional dependencies:
2025-08-28 19:58:36,758:INFO:                shap: Not installed
2025-08-28 19:58:36,758:INFO:           interpret: Not installed
2025-08-28 19:58:36,758:INFO:                umap: Not installed
2025-08-28 19:58:36,758:INFO:     ydata_profiling: Not installed
2025-08-28 19:58:36,758:INFO:  explainerdashboard: Not installed
2025-08-28 19:58:36,758:INFO:             autoviz: Not installed
2025-08-28 19:58:36,758:INFO:           fairlearn: Not installed
2025-08-28 19:58:36,758:INFO:          deepchecks: Not installed
2025-08-28 19:58:36,758:INFO:             xgboost: Not installed
2025-08-28 19:58:36,758:INFO:            catboost: Not installed
2025-08-28 19:58:36,758:INFO:              kmodes: Not installed
2025-08-28 19:58:36,758:INFO:             mlxtend: Not installed
2025-08-28 19:58:36,758:INFO:       statsforecast: Not installed
2025-08-28 19:58:36,758:INFO:        tune_sklearn: Not installed
2025-08-28 19:58:36,758:INFO:                 ray: Not installed
2025-08-28 19:58:36,758:INFO:            hyperopt: Not installed
2025-08-28 19:58:36,758:INFO:              optuna: Not installed
2025-08-28 19:58:36,758:INFO:               skopt: Not installed
2025-08-28 19:58:36,759:INFO:              mlflow: 3.3.2
2025-08-28 19:58:36,759:INFO:              gradio: 5.44.0
2025-08-28 19:58:36,759:INFO:             fastapi: 0.116.1
2025-08-28 19:58:36,759:INFO:             uvicorn: 0.35.0
2025-08-28 19:58:36,759:INFO:              m2cgen: Not installed
2025-08-28 19:58:36,759:INFO:           evidently: Not installed
2025-08-28 19:58:36,759:INFO:               fugue: Not installed
2025-08-28 19:58:36,759:INFO:           streamlit: 1.49.0
2025-08-28 19:58:36,759:INFO:             prophet: Not installed
2025-08-28 19:58:36,759:INFO:None
2025-08-28 19:58:36,759:INFO:Set up data.
2025-08-28 19:58:36,786:INFO:Set up folding strategy.
2025-08-28 19:58:36,786:INFO:Set up train/test split.
2025-08-28 19:58:36,813:INFO:Set up index.
2025-08-28 19:58:36,815:INFO:Assigning column types.
2025-08-28 19:58:36,824:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-28 19:58:36,863:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 19:58:36,872:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 19:58:36,910:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:36,910:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:36,948:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 19:58:36,949:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 19:58:36,975:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:36,975:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:36,975:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-28 19:58:37,016:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 19:58:37,040:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,041:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,081:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 19:58:37,104:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,104:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,105:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-28 19:58:37,168:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,168:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,232:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,232:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,238:INFO:Preparing preprocessing pipeline...
2025-08-28 19:58:37,242:INFO:Set up simple imputation.
2025-08-28 19:58:37,250:INFO:Set up encoding of ordinal features.
2025-08-28 19:58:37,254:INFO:Set up encoding of categorical features.
2025-08-28 19:58:37,255:INFO:Set up column name cleaning.
2025-08-28 19:58:37,486:INFO:Finished creating preprocessing pipeline.
2025-08-28 19:58:37,506:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-08-28 19:58:37,506:INFO:Creating final display dataframe.
2025-08-28 19:58:37,923:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3           Original data shape       (64374, 11)
4        Transformed data shape       (64374, 15)
5   Transformed train set shape       (45061, 15)
6    Transformed test set shape       (19313, 15)
7              Numeric features                 7
8          Categorical features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment      MlflowLogger
20              Experiment Name  churn_prediction
21                          USI              3ea9
2025-08-28 19:58:37,986:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:37,986:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:38,052:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:38,052:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 19:58:38,053:INFO:Logging experiment in loggers
2025-08-28 19:58:38,562:INFO:SubProcess save_model() called ==================================
2025-08-28 19:58:38,594:INFO:Initializing save_model()
2025-08-28 19:58:38,594:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\fabri\AppData\Local\Temp\tmpgfgo_4vm\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-28 19:58:38,594:INFO:Adding model into prep_pipe
2025-08-28 19:58:38,594:WARNING:Only Model saved as it was a pipeline.
2025-08-28 19:58:38,604:INFO:C:\Users\fabri\AppData\Local\Temp\tmpgfgo_4vm\Transformation Pipeline.pkl saved in current working directory
2025-08-28 19:58:38,619:INFO:Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-08-28 19:58:38,619:INFO:save_model() successfully completed......................................
2025-08-28 19:58:38,718:INFO:SubProcess save_model() end ==================================
2025-08-28 19:58:38,732:INFO:setup() successfully completed in 4.08s...............
2025-08-28 19:58:38,732:INFO:Initializing compare_models()
2025-08-28 19:58:38,732:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-08-28 19:58:38,733:INFO:Checking exceptions
2025-08-28 19:58:38,745:INFO:Preparing display monitor
2025-08-28 19:58:38,748:INFO:Initializing Logistic Regression
2025-08-28 19:58:38,749:INFO:Total runtime is 0.0 minutes
2025-08-28 19:58:38,749:INFO:SubProcess create_model() called ==================================
2025-08-28 19:58:38,749:INFO:Initializing create_model()
2025-08-28 19:58:38,749:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:58:38,749:INFO:Checking exceptions
2025-08-28 19:58:38,749:INFO:Importing libraries
2025-08-28 19:58:38,749:INFO:Copying training dataset
2025-08-28 19:58:38,767:INFO:Defining folds
2025-08-28 19:58:38,767:INFO:Declaring metric variables
2025-08-28 19:58:38,767:INFO:Importing untrained model
2025-08-28 19:58:38,768:INFO:Logistic Regression Imported successfully
2025-08-28 19:58:38,768:INFO:Starting cross validation
2025-08-28 19:58:38,769:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:58:49,654:INFO:Calculating mean and std
2025-08-28 19:58:49,656:INFO:Creating metrics dataframe
2025-08-28 19:58:49,658:INFO:Uploading results into container
2025-08-28 19:58:49,658:INFO:Uploading model into container now
2025-08-28 19:58:49,658:INFO:_master_model_container: 1
2025-08-28 19:58:49,658:INFO:_display_container: 2
2025-08-28 19:58:49,659:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-08-28 19:58:49,659:INFO:create_model() successfully completed......................................
2025-08-28 19:58:49,776:INFO:SubProcess create_model() end ==================================
2025-08-28 19:58:49,776:INFO:Creating metrics dataframe
2025-08-28 19:58:49,778:INFO:Initializing K Neighbors Classifier
2025-08-28 19:58:49,778:INFO:Total runtime is 0.18383357524871827 minutes
2025-08-28 19:58:49,778:INFO:SubProcess create_model() called ==================================
2025-08-28 19:58:49,779:INFO:Initializing create_model()
2025-08-28 19:58:49,779:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:58:49,779:INFO:Checking exceptions
2025-08-28 19:58:49,779:INFO:Importing libraries
2025-08-28 19:58:49,779:INFO:Copying training dataset
2025-08-28 19:58:49,796:INFO:Defining folds
2025-08-28 19:58:49,796:INFO:Declaring metric variables
2025-08-28 19:58:49,796:INFO:Importing untrained model
2025-08-28 19:58:49,796:INFO:K Neighbors Classifier Imported successfully
2025-08-28 19:58:49,796:INFO:Starting cross validation
2025-08-28 19:58:49,797:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:58:53,649:INFO:Calculating mean and std
2025-08-28 19:58:53,650:INFO:Creating metrics dataframe
2025-08-28 19:58:53,651:INFO:Uploading results into container
2025-08-28 19:58:53,652:INFO:Uploading model into container now
2025-08-28 19:58:53,652:INFO:_master_model_container: 2
2025-08-28 19:58:53,652:INFO:_display_container: 2
2025-08-28 19:58:53,652:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-08-28 19:58:53,652:INFO:create_model() successfully completed......................................
2025-08-28 19:58:53,764:INFO:SubProcess create_model() end ==================================
2025-08-28 19:58:53,764:INFO:Creating metrics dataframe
2025-08-28 19:58:53,766:INFO:Initializing Naive Bayes
2025-08-28 19:58:53,768:INFO:Total runtime is 0.25033104022343955 minutes
2025-08-28 19:58:53,768:INFO:SubProcess create_model() called ==================================
2025-08-28 19:58:53,768:INFO:Initializing create_model()
2025-08-28 19:58:53,768:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:58:53,768:INFO:Checking exceptions
2025-08-28 19:58:53,768:INFO:Importing libraries
2025-08-28 19:58:53,768:INFO:Copying training dataset
2025-08-28 19:58:53,784:INFO:Defining folds
2025-08-28 19:58:53,784:INFO:Declaring metric variables
2025-08-28 19:58:53,785:INFO:Importing untrained model
2025-08-28 19:58:53,785:INFO:Naive Bayes Imported successfully
2025-08-28 19:58:53,785:INFO:Starting cross validation
2025-08-28 19:58:53,786:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:58:54,350:INFO:Calculating mean and std
2025-08-28 19:58:54,351:INFO:Creating metrics dataframe
2025-08-28 19:58:54,352:INFO:Uploading results into container
2025-08-28 19:58:54,353:INFO:Uploading model into container now
2025-08-28 19:58:54,353:INFO:_master_model_container: 3
2025-08-28 19:58:54,353:INFO:_display_container: 2
2025-08-28 19:58:54,353:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-08-28 19:58:54,353:INFO:create_model() successfully completed......................................
2025-08-28 19:58:54,463:INFO:SubProcess create_model() end ==================================
2025-08-28 19:58:54,463:INFO:Creating metrics dataframe
2025-08-28 19:58:54,466:INFO:Initializing Decision Tree Classifier
2025-08-28 19:58:54,466:INFO:Total runtime is 0.26195906003316244 minutes
2025-08-28 19:58:54,467:INFO:SubProcess create_model() called ==================================
2025-08-28 19:58:54,467:INFO:Initializing create_model()
2025-08-28 19:58:54,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:58:54,467:INFO:Checking exceptions
2025-08-28 19:58:54,467:INFO:Importing libraries
2025-08-28 19:58:54,467:INFO:Copying training dataset
2025-08-28 19:58:54,482:INFO:Defining folds
2025-08-28 19:58:54,482:INFO:Declaring metric variables
2025-08-28 19:58:54,482:INFO:Importing untrained model
2025-08-28 19:58:54,482:INFO:Decision Tree Classifier Imported successfully
2025-08-28 19:58:54,482:INFO:Starting cross validation
2025-08-28 19:58:54,484:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:58:55,043:INFO:Calculating mean and std
2025-08-28 19:58:55,043:INFO:Creating metrics dataframe
2025-08-28 19:58:55,044:INFO:Uploading results into container
2025-08-28 19:58:55,046:INFO:Uploading model into container now
2025-08-28 19:58:55,046:INFO:_master_model_container: 4
2025-08-28 19:58:55,046:INFO:_display_container: 2
2025-08-28 19:58:55,047:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-08-28 19:58:55,047:INFO:create_model() successfully completed......................................
2025-08-28 19:58:55,142:INFO:SubProcess create_model() end ==================================
2025-08-28 19:58:55,142:INFO:Creating metrics dataframe
2025-08-28 19:58:55,144:INFO:Initializing SVM - Linear Kernel
2025-08-28 19:58:55,144:INFO:Total runtime is 0.2732717792193095 minutes
2025-08-28 19:58:55,144:INFO:SubProcess create_model() called ==================================
2025-08-28 19:58:55,144:INFO:Initializing create_model()
2025-08-28 19:58:55,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:58:55,144:INFO:Checking exceptions
2025-08-28 19:58:55,144:INFO:Importing libraries
2025-08-28 19:58:55,144:INFO:Copying training dataset
2025-08-28 19:58:55,159:INFO:Defining folds
2025-08-28 19:58:55,160:INFO:Declaring metric variables
2025-08-28 19:58:55,160:INFO:Importing untrained model
2025-08-28 19:58:55,160:INFO:SVM - Linear Kernel Imported successfully
2025-08-28 19:58:55,160:INFO:Starting cross validation
2025-08-28 19:58:55,162:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:58:58,019:INFO:Calculating mean and std
2025-08-28 19:58:58,020:INFO:Creating metrics dataframe
2025-08-28 19:58:58,021:INFO:Uploading results into container
2025-08-28 19:58:58,022:INFO:Uploading model into container now
2025-08-28 19:58:58,022:INFO:_master_model_container: 5
2025-08-28 19:58:58,022:INFO:_display_container: 2
2025-08-28 19:58:58,022:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-08-28 19:58:58,022:INFO:create_model() successfully completed......................................
2025-08-28 19:58:58,118:INFO:SubProcess create_model() end ==================================
2025-08-28 19:58:58,118:INFO:Creating metrics dataframe
2025-08-28 19:58:58,120:INFO:Initializing Ridge Classifier
2025-08-28 19:58:58,120:INFO:Total runtime is 0.3228617668151856 minutes
2025-08-28 19:58:58,120:INFO:SubProcess create_model() called ==================================
2025-08-28 19:58:58,120:INFO:Initializing create_model()
2025-08-28 19:58:58,120:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:58:58,120:INFO:Checking exceptions
2025-08-28 19:58:58,120:INFO:Importing libraries
2025-08-28 19:58:58,120:INFO:Copying training dataset
2025-08-28 19:58:58,135:INFO:Defining folds
2025-08-28 19:58:58,135:INFO:Declaring metric variables
2025-08-28 19:58:58,135:INFO:Importing untrained model
2025-08-28 19:58:58,135:INFO:Ridge Classifier Imported successfully
2025-08-28 19:58:58,135:INFO:Starting cross validation
2025-08-28 19:58:58,137:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:58:58,666:INFO:Calculating mean and std
2025-08-28 19:58:58,666:INFO:Creating metrics dataframe
2025-08-28 19:58:58,668:INFO:Uploading results into container
2025-08-28 19:58:58,668:INFO:Uploading model into container now
2025-08-28 19:58:58,668:INFO:_master_model_container: 6
2025-08-28 19:58:58,669:INFO:_display_container: 2
2025-08-28 19:58:58,669:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-08-28 19:58:58,669:INFO:create_model() successfully completed......................................
2025-08-28 19:58:58,776:INFO:SubProcess create_model() end ==================================
2025-08-28 19:58:58,776:INFO:Creating metrics dataframe
2025-08-28 19:58:58,779:INFO:Initializing Random Forest Classifier
2025-08-28 19:58:58,779:INFO:Total runtime is 0.33385389248530073 minutes
2025-08-28 19:58:58,779:INFO:SubProcess create_model() called ==================================
2025-08-28 19:58:58,779:INFO:Initializing create_model()
2025-08-28 19:58:58,779:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:58:58,779:INFO:Checking exceptions
2025-08-28 19:58:58,779:INFO:Importing libraries
2025-08-28 19:58:58,779:INFO:Copying training dataset
2025-08-28 19:58:58,797:INFO:Defining folds
2025-08-28 19:58:58,797:INFO:Declaring metric variables
2025-08-28 19:58:58,798:INFO:Importing untrained model
2025-08-28 19:58:58,798:INFO:Random Forest Classifier Imported successfully
2025-08-28 19:58:58,798:INFO:Starting cross validation
2025-08-28 19:58:58,799:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:03,444:INFO:Calculating mean and std
2025-08-28 19:59:03,445:INFO:Creating metrics dataframe
2025-08-28 19:59:03,446:INFO:Uploading results into container
2025-08-28 19:59:03,446:INFO:Uploading model into container now
2025-08-28 19:59:03,446:INFO:_master_model_container: 7
2025-08-28 19:59:03,446:INFO:_display_container: 2
2025-08-28 19:59:03,447:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-08-28 19:59:03,447:INFO:create_model() successfully completed......................................
2025-08-28 19:59:03,549:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:03,549:INFO:Creating metrics dataframe
2025-08-28 19:59:03,551:INFO:Initializing Quadratic Discriminant Analysis
2025-08-28 19:59:03,551:INFO:Total runtime is 0.413379697004954 minutes
2025-08-28 19:59:03,551:INFO:SubProcess create_model() called ==================================
2025-08-28 19:59:03,551:INFO:Initializing create_model()
2025-08-28 19:59:03,551:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:03,551:INFO:Checking exceptions
2025-08-28 19:59:03,551:INFO:Importing libraries
2025-08-28 19:59:03,552:INFO:Copying training dataset
2025-08-28 19:59:03,567:INFO:Defining folds
2025-08-28 19:59:03,567:INFO:Declaring metric variables
2025-08-28 19:59:03,568:INFO:Importing untrained model
2025-08-28 19:59:03,568:INFO:Quadratic Discriminant Analysis Imported successfully
2025-08-28 19:59:03,568:INFO:Starting cross validation
2025-08-28 19:59:03,569:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:03,999:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,006:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,011:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,025:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,034:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,048:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,072:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,096:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,119:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,122:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-08-28 19:59:04,216:INFO:Calculating mean and std
2025-08-28 19:59:04,217:INFO:Creating metrics dataframe
2025-08-28 19:59:04,219:INFO:Uploading results into container
2025-08-28 19:59:04,220:INFO:Uploading model into container now
2025-08-28 19:59:04,220:INFO:_master_model_container: 8
2025-08-28 19:59:04,220:INFO:_display_container: 2
2025-08-28 19:59:04,221:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-08-28 19:59:04,221:INFO:create_model() successfully completed......................................
2025-08-28 19:59:04,339:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:04,340:INFO:Creating metrics dataframe
2025-08-28 19:59:04,342:INFO:Initializing Ada Boost Classifier
2025-08-28 19:59:04,343:INFO:Total runtime is 0.4265755454699198 minutes
2025-08-28 19:59:04,343:INFO:SubProcess create_model() called ==================================
2025-08-28 19:59:04,343:INFO:Initializing create_model()
2025-08-28 19:59:04,343:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:04,343:INFO:Checking exceptions
2025-08-28 19:59:04,343:INFO:Importing libraries
2025-08-28 19:59:04,343:INFO:Copying training dataset
2025-08-28 19:59:04,359:INFO:Defining folds
2025-08-28 19:59:04,359:INFO:Declaring metric variables
2025-08-28 19:59:04,359:INFO:Importing untrained model
2025-08-28 19:59:04,360:INFO:Ada Boost Classifier Imported successfully
2025-08-28 19:59:04,360:INFO:Starting cross validation
2025-08-28 19:59:04,361:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:04,713:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,735:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,737:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,757:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,758:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,770:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,796:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,800:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,804:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:04,810:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-08-28 19:59:06,997:INFO:Calculating mean and std
2025-08-28 19:59:06,997:INFO:Creating metrics dataframe
2025-08-28 19:59:06,999:INFO:Uploading results into container
2025-08-28 19:59:06,999:INFO:Uploading model into container now
2025-08-28 19:59:07,000:INFO:_master_model_container: 9
2025-08-28 19:59:07,000:INFO:_display_container: 2
2025-08-28 19:59:07,000:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-08-28 19:59:07,000:INFO:create_model() successfully completed......................................
2025-08-28 19:59:07,097:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:07,097:INFO:Creating metrics dataframe
2025-08-28 19:59:07,099:INFO:Initializing Gradient Boosting Classifier
2025-08-28 19:59:07,099:INFO:Total runtime is 0.4725147128105163 minutes
2025-08-28 19:59:07,099:INFO:SubProcess create_model() called ==================================
2025-08-28 19:59:07,099:INFO:Initializing create_model()
2025-08-28 19:59:07,099:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:07,099:INFO:Checking exceptions
2025-08-28 19:59:07,099:INFO:Importing libraries
2025-08-28 19:59:07,099:INFO:Copying training dataset
2025-08-28 19:59:07,114:INFO:Defining folds
2025-08-28 19:59:07,114:INFO:Declaring metric variables
2025-08-28 19:59:07,115:INFO:Importing untrained model
2025-08-28 19:59:07,115:INFO:Gradient Boosting Classifier Imported successfully
2025-08-28 19:59:07,115:INFO:Starting cross validation
2025-08-28 19:59:07,117:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:13,846:INFO:Calculating mean and std
2025-08-28 19:59:13,847:INFO:Creating metrics dataframe
2025-08-28 19:59:13,849:INFO:Uploading results into container
2025-08-28 19:59:13,849:INFO:Uploading model into container now
2025-08-28 19:59:13,849:INFO:_master_model_container: 10
2025-08-28 19:59:13,849:INFO:_display_container: 2
2025-08-28 19:59:13,850:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-08-28 19:59:13,850:INFO:create_model() successfully completed......................................
2025-08-28 19:59:13,948:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:13,948:INFO:Creating metrics dataframe
2025-08-28 19:59:13,950:INFO:Initializing Linear Discriminant Analysis
2025-08-28 19:59:13,950:INFO:Total runtime is 0.586691677570343 minutes
2025-08-28 19:59:13,950:INFO:SubProcess create_model() called ==================================
2025-08-28 19:59:13,951:INFO:Initializing create_model()
2025-08-28 19:59:13,951:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:13,951:INFO:Checking exceptions
2025-08-28 19:59:13,951:INFO:Importing libraries
2025-08-28 19:59:13,951:INFO:Copying training dataset
2025-08-28 19:59:13,965:INFO:Defining folds
2025-08-28 19:59:13,965:INFO:Declaring metric variables
2025-08-28 19:59:13,965:INFO:Importing untrained model
2025-08-28 19:59:13,965:INFO:Linear Discriminant Analysis Imported successfully
2025-08-28 19:59:13,966:INFO:Starting cross validation
2025-08-28 19:59:13,967:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:14,589:INFO:Calculating mean and std
2025-08-28 19:59:14,590:INFO:Creating metrics dataframe
2025-08-28 19:59:14,592:INFO:Uploading results into container
2025-08-28 19:59:14,593:INFO:Uploading model into container now
2025-08-28 19:59:14,593:INFO:_master_model_container: 11
2025-08-28 19:59:14,593:INFO:_display_container: 2
2025-08-28 19:59:14,593:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-08-28 19:59:14,593:INFO:create_model() successfully completed......................................
2025-08-28 19:59:14,694:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:14,694:INFO:Creating metrics dataframe
2025-08-28 19:59:14,695:INFO:Initializing Extra Trees Classifier
2025-08-28 19:59:14,695:INFO:Total runtime is 0.599117108186086 minutes
2025-08-28 19:59:14,695:INFO:SubProcess create_model() called ==================================
2025-08-28 19:59:14,696:INFO:Initializing create_model()
2025-08-28 19:59:14,696:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:14,696:INFO:Checking exceptions
2025-08-28 19:59:14,696:INFO:Importing libraries
2025-08-28 19:59:14,696:INFO:Copying training dataset
2025-08-28 19:59:14,710:INFO:Defining folds
2025-08-28 19:59:14,711:INFO:Declaring metric variables
2025-08-28 19:59:14,711:INFO:Importing untrained model
2025-08-28 19:59:14,711:INFO:Extra Trees Classifier Imported successfully
2025-08-28 19:59:14,711:INFO:Starting cross validation
2025-08-28 19:59:14,713:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:20,374:INFO:Calculating mean and std
2025-08-28 19:59:20,375:INFO:Creating metrics dataframe
2025-08-28 19:59:20,377:INFO:Uploading results into container
2025-08-28 19:59:20,377:INFO:Uploading model into container now
2025-08-28 19:59:20,377:INFO:_master_model_container: 12
2025-08-28 19:59:20,377:INFO:_display_container: 2
2025-08-28 19:59:20,378:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-28 19:59:20,378:INFO:create_model() successfully completed......................................
2025-08-28 19:59:20,489:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:20,489:INFO:Creating metrics dataframe
2025-08-28 19:59:20,492:INFO:Initializing Light Gradient Boosting Machine
2025-08-28 19:59:20,492:INFO:Total runtime is 0.6957337538401286 minutes
2025-08-28 19:59:20,492:INFO:SubProcess create_model() called ==================================
2025-08-28 19:59:20,492:INFO:Initializing create_model()
2025-08-28 19:59:20,492:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:20,492:INFO:Checking exceptions
2025-08-28 19:59:20,492:INFO:Importing libraries
2025-08-28 19:59:20,492:INFO:Copying training dataset
2025-08-28 19:59:20,508:INFO:Defining folds
2025-08-28 19:59:20,508:INFO:Declaring metric variables
2025-08-28 19:59:20,509:INFO:Importing untrained model
2025-08-28 19:59:20,509:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-28 19:59:20,509:INFO:Starting cross validation
2025-08-28 19:59:20,510:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:22,752:INFO:Calculating mean and std
2025-08-28 19:59:22,752:INFO:Creating metrics dataframe
2025-08-28 19:59:22,754:INFO:Uploading results into container
2025-08-28 19:59:22,755:INFO:Uploading model into container now
2025-08-28 19:59:22,755:INFO:_master_model_container: 13
2025-08-28 19:59:22,755:INFO:_display_container: 2
2025-08-28 19:59:22,756:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-28 19:59:22,756:INFO:create_model() successfully completed......................................
2025-08-28 19:59:22,873:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:22,874:INFO:Creating metrics dataframe
2025-08-28 19:59:22,876:INFO:Initializing Dummy Classifier
2025-08-28 19:59:22,876:INFO:Total runtime is 0.7354695280392964 minutes
2025-08-28 19:59:22,876:INFO:SubProcess create_model() called ==================================
2025-08-28 19:59:22,876:INFO:Initializing create_model()
2025-08-28 19:59:22,876:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002963CC93650>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:22,876:INFO:Checking exceptions
2025-08-28 19:59:22,876:INFO:Importing libraries
2025-08-28 19:59:22,877:INFO:Copying training dataset
2025-08-28 19:59:22,891:INFO:Defining folds
2025-08-28 19:59:22,892:INFO:Declaring metric variables
2025-08-28 19:59:22,892:INFO:Importing untrained model
2025-08-28 19:59:22,892:INFO:Dummy Classifier Imported successfully
2025-08-28 19:59:22,892:INFO:Starting cross validation
2025-08-28 19:59:22,893:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 19:59:23,329:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,343:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,343:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,347:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,362:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,362:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,366:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,385:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,386:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,390:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-08-28 19:59:23,402:INFO:Calculating mean and std
2025-08-28 19:59:23,403:INFO:Creating metrics dataframe
2025-08-28 19:59:23,404:INFO:Uploading results into container
2025-08-28 19:59:23,404:INFO:Uploading model into container now
2025-08-28 19:59:23,405:INFO:_master_model_container: 14
2025-08-28 19:59:23,405:INFO:_display_container: 2
2025-08-28 19:59:23,405:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-08-28 19:59:23,405:INFO:create_model() successfully completed......................................
2025-08-28 19:59:23,516:INFO:SubProcess create_model() end ==================================
2025-08-28 19:59:23,516:INFO:Creating metrics dataframe
2025-08-28 19:59:23,520:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-08-28 19:59:23,522:INFO:Initializing create_model()
2025-08-28 19:59:23,522:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:23,522:INFO:Checking exceptions
2025-08-28 19:59:23,523:INFO:Importing libraries
2025-08-28 19:59:23,523:INFO:Copying training dataset
2025-08-28 19:59:23,537:INFO:Defining folds
2025-08-28 19:59:23,537:INFO:Declaring metric variables
2025-08-28 19:59:23,537:INFO:Importing untrained model
2025-08-28 19:59:23,537:INFO:Declaring custom model
2025-08-28 19:59:23,538:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-28 19:59:23,540:INFO:Cross validation set to False
2025-08-28 19:59:23,540:INFO:Fitting Model
2025-08-28 19:59:23,714:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-08-28 19:59:23,715:INFO:[LightGBM] [Info] Number of positive: 21345, number of negative: 23716
2025-08-28 19:59:23,716:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000562 seconds.
2025-08-28 19:59:23,716:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-08-28 19:59:23,716:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-08-28 19:59:23,716:INFO:[LightGBM] [Info] Total Bins 483
2025-08-28 19:59:23,716:INFO:[LightGBM] [Info] Number of data points in the train set: 45061, number of used features: 14
2025-08-28 19:59:23,717:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473691 -> initscore=-0.105332
2025-08-28 19:59:23,717:INFO:[LightGBM] [Info] Start training from score -0.105332
2025-08-28 19:59:23,896:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-28 19:59:23,896:INFO:create_model() successfully completed......................................
2025-08-28 19:59:24,013:INFO:Creating Dashboard logs
2025-08-28 19:59:24,015:INFO:Model: Light Gradient Boosting Machine
2025-08-28 19:59:24,053:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 123, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-08-28 19:59:24,154:INFO:Initializing predict_model()
2025-08-28 19:59:24,154:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002963DA536A0>)
2025-08-28 19:59:24,154:INFO:Checking exceptions
2025-08-28 19:59:24,155:INFO:Preloading libraries
2025-08-28 19:59:24,531:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\_distutils_hack\__init__.py:32: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-28 19:59:27,569:INFO:Creating Dashboard logs
2025-08-28 19:59:27,569:INFO:Model: Random Forest Classifier
2025-08-28 19:59:27,607:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-28 19:59:27,828:INFO:Creating Dashboard logs
2025-08-28 19:59:27,829:INFO:Model: Decision Tree Classifier
2025-08-28 19:59:27,867:INFO:Logged params: {'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'random_state': 123, 'splitter': 'best'}
2025-08-28 19:59:28,080:INFO:Creating Dashboard logs
2025-08-28 19:59:28,082:INFO:Model: Gradient Boosting Classifier
2025-08-28 19:59:28,120:INFO:Logged params: {'ccp_alpha': 0.0, 'criterion': 'friedman_mse', 'init': None, 'learning_rate': 0.1, 'loss': 'log_loss', 'max_depth': 3, 'max_features': None, 'max_leaf_nodes': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'n_estimators': 100, 'n_iter_no_change': None, 'random_state': 123, 'subsample': 1.0, 'tol': 0.0001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-08-28 19:59:28,348:INFO:Creating Dashboard logs
2025-08-28 19:59:28,348:INFO:Model: Extra Trees Classifier
2025-08-28 19:59:28,386:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-28 19:59:28,614:INFO:Creating Dashboard logs
2025-08-28 19:59:28,615:INFO:Model: Ada Boost Classifier
2025-08-28 19:59:28,653:INFO:Logged params: {'algorithm': 'SAMME.R', 'estimator': None, 'learning_rate': 1.0, 'n_estimators': 50, 'random_state': 123}
2025-08-28 19:59:28,867:INFO:Creating Dashboard logs
2025-08-28 19:59:28,867:INFO:Model: Naive Bayes
2025-08-28 19:59:28,905:INFO:Logged params: {'priors': None, 'var_smoothing': 1e-09}
2025-08-28 19:59:29,104:INFO:Creating Dashboard logs
2025-08-28 19:59:29,104:INFO:Model: Logistic Regression
2025-08-28 19:59:29,142:INFO:Logged params: {'C': 1.0, 'class_weight': None, 'dual': False, 'fit_intercept': True, 'intercept_scaling': 1, 'l1_ratio': None, 'max_iter': 1000, 'multi_class': 'auto', 'n_jobs': None, 'penalty': 'l2', 'random_state': 123, 'solver': 'lbfgs', 'tol': 0.0001, 'verbose': 0, 'warm_start': False}
2025-08-28 19:59:29,355:INFO:Creating Dashboard logs
2025-08-28 19:59:29,355:INFO:Model: Ridge Classifier
2025-08-28 19:59:29,393:INFO:Logged params: {'alpha': 1.0, 'class_weight': None, 'copy_X': True, 'fit_intercept': True, 'max_iter': None, 'positive': False, 'random_state': 123, 'solver': 'auto', 'tol': 0.0001}
2025-08-28 19:59:29,610:INFO:Creating Dashboard logs
2025-08-28 19:59:29,610:INFO:Model: Linear Discriminant Analysis
2025-08-28 19:59:29,649:INFO:Logged params: {'covariance_estimator': None, 'n_components': None, 'priors': None, 'shrinkage': None, 'solver': 'svd', 'store_covariance': False, 'tol': 0.0001}
2025-08-28 19:59:29,863:INFO:Creating Dashboard logs
2025-08-28 19:59:29,863:INFO:Model: K Neighbors Classifier
2025-08-28 19:59:29,901:INFO:Logged params: {'algorithm': 'auto', 'leaf_size': 30, 'metric': 'minkowski', 'metric_params': None, 'n_jobs': -1, 'n_neighbors': 5, 'p': 2, 'weights': 'uniform'}
2025-08-28 19:59:30,104:INFO:Creating Dashboard logs
2025-08-28 19:59:30,104:INFO:Model: SVM - Linear Kernel
2025-08-28 19:59:30,142:INFO:Logged params: {'alpha': 0.0001, 'average': False, 'class_weight': None, 'early_stopping': False, 'epsilon': 0.1, 'eta0': 0.001, 'fit_intercept': True, 'l1_ratio': 0.15, 'learning_rate': 'optimal', 'loss': 'hinge', 'max_iter': 1000, 'n_iter_no_change': 5, 'n_jobs': -1, 'penalty': 'l2', 'power_t': 0.5, 'random_state': 123, 'shuffle': True, 'tol': 0.001, 'validation_fraction': 0.1, 'verbose': 0, 'warm_start': False}
2025-08-28 19:59:30,368:INFO:Creating Dashboard logs
2025-08-28 19:59:30,368:INFO:Model: Quadratic Discriminant Analysis
2025-08-28 19:59:30,405:INFO:Logged params: {'priors': None, 'reg_param': 0.0, 'store_covariance': False, 'tol': 0.0001}
2025-08-28 19:59:30,606:INFO:Creating Dashboard logs
2025-08-28 19:59:30,607:INFO:Model: Dummy Classifier
2025-08-28 19:59:30,645:INFO:Logged params: {'constant': None, 'random_state': 123, 'strategy': 'prior'}
2025-08-28 19:59:30,848:INFO:_master_model_container: 14
2025-08-28 19:59:30,848:INFO:_display_container: 2
2025-08-28 19:59:30,849:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-28 19:59:30,849:INFO:compare_models() successfully completed......................................
2025-08-28 19:59:30,850:INFO:Initializing finalize_model()
2025-08-28 19:59:30,850:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-08-28 19:59:30,851:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-28 19:59:30,858:INFO:Initializing create_model()
2025-08-28 19:59:30,858:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002963B16E2D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 19:59:30,858:INFO:Checking exceptions
2025-08-28 19:59:30,859:INFO:Importing libraries
2025-08-28 19:59:30,859:INFO:Copying training dataset
2025-08-28 19:59:30,860:INFO:Defining folds
2025-08-28 19:59:30,860:INFO:Declaring metric variables
2025-08-28 19:59:30,860:INFO:Importing untrained model
2025-08-28 19:59:30,860:INFO:Declaring custom model
2025-08-28 19:59:30,861:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-28 19:59:30,862:INFO:Cross validation set to False
2025-08-28 19:59:30,863:INFO:Fitting Model
2025-08-28 19:59:31,093:INFO:[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines
2025-08-28 19:59:31,094:INFO:[LightGBM] [Info] Number of positive: 30493, number of negative: 33881
2025-08-28 19:59:31,096:INFO:[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.000754 seconds.
2025-08-28 19:59:31,097:INFO:You can set `force_row_wise=true` to remove the overhead.
2025-08-28 19:59:31,097:INFO:And if memory is not enough, you can set `force_col_wise=true`.
2025-08-28 19:59:31,097:INFO:[LightGBM] [Info] Total Bins 483
2025-08-28 19:59:31,097:INFO:[LightGBM] [Info] Number of data points in the train set: 64374, number of used features: 14
2025-08-28 19:59:31,097:INFO:[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.473685 -> initscore=-0.105357
2025-08-28 19:59:31,097:INFO:[LightGBM] [Info] Start training from score -0.105357
2025-08-28 19:59:31,355:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-08-28 19:59:31,355:INFO:create_model() successfully completed......................................
2025-08-28 19:59:31,476:INFO:Creating Dashboard logs
2025-08-28 19:59:31,477:INFO:Model: Light Gradient Boosting Machine
2025-08-28 19:59:31,522:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 123, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0}
2025-08-28 19:59:31,786:INFO:_master_model_container: 14
2025-08-28 19:59:31,786:INFO:_display_container: 2
2025-08-28 19:59:31,807:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-08-28 19:59:31,807:INFO:finalize_model() successfully completed......................................
2025-08-28 19:59:31,947:INFO:Initializing save_model()
2025-08-28 19:59:31,948:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=churn_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-28 19:59:31,948:INFO:Adding model into prep_pipe
2025-08-28 19:59:31,948:WARNING:Only Model saved as it was a pipeline.
2025-08-28 19:59:31,958:INFO:churn_model.pkl saved in current working directory
2025-08-28 19:59:31,982:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, importance_type='split',
                                learning_rate=0.1, max_depth=-1,
                                min_child_samples=20, min_child_weight=0.001,
                                min_split_gain=0.0, n_estimators=100, n_jobs=-1,
                                num_leaves=31, objective=None, random_state=123,
                                reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-08-28 19:59:31,982:INFO:save_model() successfully completed......................................
2025-08-28 20:03:46,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:03:46,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:03:46,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:03:46,716:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:03:48,010:INFO:Initializing load_model()
2025-08-28 20:03:48,010:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 20:04:36,437:INFO:Initializing predict_model()
2025-08-28 20:04:36,437:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000292536AA150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000029234893560>)
2025-08-28 20:04:36,438:INFO:Checking exceptions
2025-08-28 20:04:36,438:INFO:Preloading libraries
2025-08-28 20:04:36,438:INFO:Set up data.
2025-08-28 20:04:36,441:INFO:Set up index.
2025-08-28 20:18:49,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:18:49,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:18:49,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:18:49,926:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:18:52,379:INFO:PyCaret ClassificationExperiment
2025-08-28 20:18:52,379:INFO:Logging name: churn_prediction
2025-08-28 20:18:52,379:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-28 20:18:52,379:INFO:version 3.3.2
2025-08-28 20:18:52,379:INFO:Initializing setup()
2025-08-28 20:18:52,380:INFO:self.USI: 8e6f
2025-08-28 20:18:52,380:INFO:self._variable_keys: {'pipeline', 'exp_id', 'log_plots_param', 'USI', 'html_param', 'data', 'y_test', 'X', 'logging_param', 'memory', 'is_multiclass', '_ml_usecase', 'X_train', 'fold_generator', 'fold_shuffle_param', 'X_test', 'idx', 'exp_name_log', 'gpu_param', '_available_plots', 'fold_groups_param', 'fix_imbalance', 'target_param', 'y_train', 'y', 'gpu_n_jobs_param', 'n_jobs_param', 'seed'}
2025-08-28 20:18:52,380:INFO:Checking environment
2025-08-28 20:18:52,380:INFO:python_version: 3.11.13
2025-08-28 20:18:52,380:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-28 20:18:52,380:INFO:machine: AMD64
2025-08-28 20:18:52,408:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-28 20:18:52,411:INFO:Memory: svmem(total=34293444608, available=14379872256, percent=58.1, used=19913572352, free=14379872256)
2025-08-28 20:18:52,411:INFO:Physical Core: 6
2025-08-28 20:18:52,411:INFO:Logical Core: 12
2025-08-28 20:18:52,411:INFO:Checking libraries
2025-08-28 20:18:52,411:INFO:System:
2025-08-28 20:18:52,411:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-28 20:18:52,411:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-28 20:18:52,411:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-28 20:18:52,411:INFO:PyCaret required dependencies:
2025-08-28 20:18:52,478:INFO:                 pip: 25.1
2025-08-28 20:18:52,478:INFO:          setuptools: 72.1.0
2025-08-28 20:18:52,478:INFO:             pycaret: 3.3.2
2025-08-28 20:18:52,478:INFO:             IPython: 9.4.0
2025-08-28 20:18:52,478:INFO:          ipywidgets: 8.1.7
2025-08-28 20:18:52,478:INFO:                tqdm: 4.67.1
2025-08-28 20:18:52,478:INFO:               numpy: 1.26.4
2025-08-28 20:18:52,478:INFO:              pandas: 2.1.4
2025-08-28 20:18:52,478:INFO:              jinja2: 3.1.6
2025-08-28 20:18:52,478:INFO:               scipy: 1.11.4
2025-08-28 20:18:52,478:INFO:              joblib: 1.3.2
2025-08-28 20:18:52,478:INFO:             sklearn: 1.4.2
2025-08-28 20:18:52,478:INFO:                pyod: 2.0.5
2025-08-28 20:18:52,478:INFO:            imblearn: 0.14.0
2025-08-28 20:18:52,478:INFO:   category_encoders: 2.7.0
2025-08-28 20:18:52,478:INFO:            lightgbm: 4.6.0
2025-08-28 20:18:52,478:INFO:               numba: 0.61.2
2025-08-28 20:18:52,478:INFO:            requests: 2.32.4
2025-08-28 20:18:52,478:INFO:          matplotlib: 3.7.5
2025-08-28 20:18:52,479:INFO:          scikitplot: 0.3.7
2025-08-28 20:18:52,479:INFO:         yellowbrick: 1.5
2025-08-28 20:18:52,479:INFO:              plotly: 5.24.1
2025-08-28 20:18:52,479:INFO:    plotly-resampler: Not installed
2025-08-28 20:18:52,479:INFO:             kaleido: 1.0.0
2025-08-28 20:18:52,479:INFO:           schemdraw: 0.15
2025-08-28 20:18:52,479:INFO:         statsmodels: 0.14.5
2025-08-28 20:18:52,479:INFO:              sktime: 0.26.0
2025-08-28 20:18:52,479:INFO:               tbats: 1.1.3
2025-08-28 20:18:52,479:INFO:            pmdarima: 2.0.4
2025-08-28 20:18:52,479:INFO:              psutil: 7.0.0
2025-08-28 20:18:52,479:INFO:          markupsafe: 3.0.2
2025-08-28 20:18:52,479:INFO:             pickle5: Not installed
2025-08-28 20:18:52,479:INFO:         cloudpickle: 3.1.1
2025-08-28 20:18:52,479:INFO:         deprecation: 2.1.0
2025-08-28 20:18:52,479:INFO:              xxhash: 3.5.0
2025-08-28 20:18:52,479:INFO:           wurlitzer: Not installed
2025-08-28 20:18:52,479:INFO:PyCaret optional dependencies:
2025-08-28 20:18:54,996:INFO:                shap: 0.48.0
2025-08-28 20:18:54,996:INFO:           interpret: Not installed
2025-08-28 20:18:54,996:INFO:                umap: Not installed
2025-08-28 20:18:54,996:INFO:     ydata_profiling: Not installed
2025-08-28 20:18:54,996:INFO:  explainerdashboard: Not installed
2025-08-28 20:18:54,997:INFO:             autoviz: Not installed
2025-08-28 20:18:54,997:INFO:           fairlearn: Not installed
2025-08-28 20:18:54,997:INFO:          deepchecks: Not installed
2025-08-28 20:18:54,997:INFO:             xgboost: Not installed
2025-08-28 20:18:54,997:INFO:            catboost: Not installed
2025-08-28 20:18:54,997:INFO:              kmodes: Not installed
2025-08-28 20:18:54,997:INFO:             mlxtend: Not installed
2025-08-28 20:18:54,997:INFO:       statsforecast: Not installed
2025-08-28 20:18:54,997:INFO:        tune_sklearn: Not installed
2025-08-28 20:18:54,997:INFO:                 ray: Not installed
2025-08-28 20:18:54,997:INFO:            hyperopt: Not installed
2025-08-28 20:18:54,997:INFO:              optuna: Not installed
2025-08-28 20:18:54,997:INFO:               skopt: Not installed
2025-08-28 20:18:54,997:INFO:              mlflow: 3.3.2
2025-08-28 20:18:54,997:INFO:              gradio: 5.44.0
2025-08-28 20:18:54,997:INFO:             fastapi: 0.116.1
2025-08-28 20:18:54,997:INFO:             uvicorn: 0.35.0
2025-08-28 20:18:54,997:INFO:              m2cgen: Not installed
2025-08-28 20:18:54,997:INFO:           evidently: Not installed
2025-08-28 20:18:54,997:INFO:               fugue: Not installed
2025-08-28 20:18:54,997:INFO:           streamlit: 1.49.0
2025-08-28 20:18:54,997:INFO:             prophet: Not installed
2025-08-28 20:18:54,997:INFO:None
2025-08-28 20:18:54,997:INFO:Set up data.
2025-08-28 20:18:55,023:INFO:Set up folding strategy.
2025-08-28 20:18:55,023:INFO:Set up train/test split.
2025-08-28 20:18:55,051:INFO:Set up index.
2025-08-28 20:18:55,053:INFO:Assigning column types.
2025-08-28 20:18:55,061:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-28 20:18:55,101:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 20:18:55,104:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 20:18:55,135:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,135:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,174:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-28 20:18:55,174:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 20:18:55,198:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,198:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,198:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-28 20:18:55,240:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 20:18:55,263:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,263:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,303:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-28 20:18:55,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,327:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,328:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-28 20:18:55,392:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,392:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,457:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,458:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,460:INFO:Preparing preprocessing pipeline...
2025-08-28 20:18:55,462:INFO:Set up simple imputation.
2025-08-28 20:18:55,471:INFO:Set up encoding of ordinal features.
2025-08-28 20:18:55,474:INFO:Set up encoding of categorical features.
2025-08-28 20:18:55,476:INFO:Set up column name cleaning.
2025-08-28 20:18:55,687:INFO:Finished creating preprocessing pipeline.
2025-08-28 20:18:55,708:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-08-28 20:18:55,708:INFO:Creating final display dataframe.
2025-08-28 20:18:55,931:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3           Original data shape       (64374, 11)
4        Transformed data shape       (64374, 15)
5   Transformed train set shape       (45061, 15)
6    Transformed test set shape       (19313, 15)
7              Numeric features                 7
8          Categorical features                 3
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment      MlflowLogger
20              Experiment Name  churn_prediction
21                          USI              8e6f
2025-08-28 20:18:55,997:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:55,998:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:56,064:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:56,064:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-28 20:18:56,065:INFO:Logging experiment in loggers
2025-08-28 20:18:56,724:INFO:SubProcess save_model() called ==================================
2025-08-28 20:18:56,762:INFO:Initializing save_model()
2025-08-28 20:18:56,762:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), model_name=C:\Users\fabri\AppData\Local\Temp\tmpm9ipdutg\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-28 20:18:56,762:INFO:Adding model into prep_pipe
2025-08-28 20:18:56,762:WARNING:Only Model saved as it was a pipeline.
2025-08-28 20:18:56,767:INFO:C:\Users\fabri\AppData\Local\Temp\tmpm9ipdutg\Transformation Pipeline.pkl saved in current working directory
2025-08-28 20:18:56,785:INFO:Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_val...
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-08-28 20:18:56,786:INFO:save_model() successfully completed......................................
2025-08-28 20:18:56,878:INFO:SubProcess save_model() end ==================================
2025-08-28 20:18:56,891:INFO:setup() successfully completed in 3.69s...............
2025-08-28 20:18:56,891:INFO:Initializing compare_models()
2025-08-28 20:18:56,892:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0EA48B250>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001E0EA48B250>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-08-28 20:18:56,892:INFO:Checking exceptions
2025-08-28 20:18:56,902:INFO:Preparing display monitor
2025-08-28 20:18:56,906:INFO:Initializing Logistic Regression
2025-08-28 20:18:56,906:INFO:Total runtime is 0.0 minutes
2025-08-28 20:18:56,906:INFO:SubProcess create_model() called ==================================
2025-08-28 20:18:56,906:INFO:Initializing create_model()
2025-08-28 20:18:56,906:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E0EA48B250>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001E0EBB9BB10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-28 20:18:56,906:INFO:Checking exceptions
2025-08-28 20:18:56,906:INFO:Importing libraries
2025-08-28 20:18:56,906:INFO:Copying training dataset
2025-08-28 20:18:56,921:INFO:Defining folds
2025-08-28 20:18:56,921:INFO:Declaring metric variables
2025-08-28 20:18:56,922:INFO:Importing untrained model
2025-08-28 20:18:56,922:INFO:Logistic Regression Imported successfully
2025-08-28 20:18:56,922:INFO:Starting cross validation
2025-08-28 20:18:56,923:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-28 20:19:15,739:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:19:15,739:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:19:15,739:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:19:15,739:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:19:18,451:INFO:Initializing load_model()
2025-08-28 20:19:18,451:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 20:21:13,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:21:13,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:21:13,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:21:13,064:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 20:21:14,716:INFO:Initializing load_model()
2025-08-28 20:21:14,717:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 21:28:31,546:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:28:31,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:28:31,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:28:31,547:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:28:33,714:INFO:Initializing load_model()
2025-08-28 21:28:33,715:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 21:29:14,334:INFO:Initializing predict_model()
2025-08-28 21:29:14,334:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B081290>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A73B323600>)
2025-08-28 21:29:14,335:INFO:Checking exceptions
2025-08-28 21:29:14,335:INFO:Preloading libraries
2025-08-28 21:29:14,335:INFO:Set up data.
2025-08-28 21:29:14,339:INFO:Set up index.
2025-08-28 21:29:14,572:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:29:56,359:INFO:Initializing predict_model()
2025-08-28 21:29:56,359:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF205D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AD8BF60>)
2025-08-28 21:29:56,359:INFO:Checking exceptions
2025-08-28 21:29:56,359:INFO:Preloading libraries
2025-08-28 21:29:56,360:INFO:Set up data.
2025-08-28 21:29:56,364:INFO:Set up index.
2025-08-28 21:29:56,607:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:29:57,883:INFO:Initializing predict_model()
2025-08-28 21:29:57,884:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B28C210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AD8DA80>)
2025-08-28 21:29:57,884:INFO:Checking exceptions
2025-08-28 21:29:57,884:INFO:Preloading libraries
2025-08-28 21:29:57,884:INFO:Set up data.
2025-08-28 21:29:57,888:INFO:Set up index.
2025-08-28 21:29:58,105:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:29:59,692:INFO:Initializing predict_model()
2025-08-28 21:29:59,692:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AD133D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B07A480>)
2025-08-28 21:29:59,693:INFO:Checking exceptions
2025-08-28 21:29:59,693:INFO:Preloading libraries
2025-08-28 21:29:59,694:INFO:Set up data.
2025-08-28 21:29:59,698:INFO:Set up index.
2025-08-28 21:29:59,921:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:16,223:INFO:Initializing predict_model()
2025-08-28 21:30:16,223:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B28DD10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B07A700>)
2025-08-28 21:30:16,223:INFO:Checking exceptions
2025-08-28 21:30:16,223:INFO:Preloading libraries
2025-08-28 21:30:16,223:INFO:Set up data.
2025-08-28 21:30:16,226:INFO:Set up index.
2025-08-28 21:30:16,460:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:18,017:INFO:Initializing predict_model()
2025-08-28 21:30:18,017:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B25E110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B07B420>)
2025-08-28 21:30:18,018:INFO:Checking exceptions
2025-08-28 21:30:18,018:INFO:Preloading libraries
2025-08-28 21:30:18,018:INFO:Set up data.
2025-08-28 21:30:18,023:INFO:Set up index.
2025-08-28 21:30:18,267:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:19,526:INFO:Initializing predict_model()
2025-08-28 21:30:19,526:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75ACA28D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B07B380>)
2025-08-28 21:30:19,526:INFO:Checking exceptions
2025-08-28 21:30:19,526:INFO:Preloading libraries
2025-08-28 21:30:19,526:INFO:Set up data.
2025-08-28 21:30:19,529:INFO:Set up index.
2025-08-28 21:30:19,764:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:21,748:INFO:Initializing predict_model()
2025-08-28 21:30:21,748:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B2730D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B07B2E0>)
2025-08-28 21:30:21,748:INFO:Checking exceptions
2025-08-28 21:30:21,748:INFO:Preloading libraries
2025-08-28 21:30:21,748:INFO:Set up data.
2025-08-28 21:30:21,753:INFO:Set up index.
2025-08-28 21:30:22,018:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:25,363:INFO:Initializing predict_model()
2025-08-28 21:30:25,363:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF38E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B07BBA0>)
2025-08-28 21:30:25,363:INFO:Checking exceptions
2025-08-28 21:30:25,363:INFO:Preloading libraries
2025-08-28 21:30:25,363:INFO:Set up data.
2025-08-28 21:30:25,368:INFO:Set up index.
2025-08-28 21:30:25,576:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:28,210:INFO:Initializing predict_model()
2025-08-28 21:30:28,211:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF39250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B07B880>)
2025-08-28 21:30:28,211:INFO:Checking exceptions
2025-08-28 21:30:28,211:INFO:Preloading libraries
2025-08-28 21:30:28,212:INFO:Set up data.
2025-08-28 21:30:28,216:INFO:Set up index.
2025-08-28 21:30:28,441:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:36,976:INFO:Initializing predict_model()
2025-08-28 21:30:36,977:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF490D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF240E0>)
2025-08-28 21:30:36,977:INFO:Checking exceptions
2025-08-28 21:30:36,977:INFO:Preloading libraries
2025-08-28 21:30:36,977:INFO:Set up data.
2025-08-28 21:30:36,980:INFO:Set up index.
2025-08-28 21:30:37,199:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:39,555:INFO:Initializing predict_model()
2025-08-28 21:30:39,555:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF4A950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF24540>)
2025-08-28 21:30:39,555:INFO:Checking exceptions
2025-08-28 21:30:39,555:INFO:Preloading libraries
2025-08-28 21:30:39,556:INFO:Set up data.
2025-08-28 21:30:39,559:INFO:Set up index.
2025-08-28 21:30:39,785:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:41,126:INFO:Initializing predict_model()
2025-08-28 21:30:41,126:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF63390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF24720>)
2025-08-28 21:30:41,126:INFO:Checking exceptions
2025-08-28 21:30:41,126:INFO:Preloading libraries
2025-08-28 21:30:41,126:INFO:Set up data.
2025-08-28 21:30:41,129:INFO:Set up index.
2025-08-28 21:30:41,370:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:44,460:INFO:Initializing predict_model()
2025-08-28 21:30:44,460:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF49590>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF249A0>)
2025-08-28 21:30:44,460:INFO:Checking exceptions
2025-08-28 21:30:44,461:INFO:Preloading libraries
2025-08-28 21:30:44,461:INFO:Set up data.
2025-08-28 21:30:44,464:INFO:Set up index.
2025-08-28 21:30:44,730:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:46,449:INFO:Initializing predict_model()
2025-08-28 21:30:46,450:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF48E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF24AE0>)
2025-08-28 21:30:46,450:INFO:Checking exceptions
2025-08-28 21:30:46,450:INFO:Preloading libraries
2025-08-28 21:30:46,450:INFO:Set up data.
2025-08-28 21:30:46,454:INFO:Set up index.
2025-08-28 21:30:46,704:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:49,021:INFO:Initializing predict_model()
2025-08-28 21:30:49,021:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B245990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF24F40>)
2025-08-28 21:30:49,021:INFO:Checking exceptions
2025-08-28 21:30:49,021:INFO:Preloading libraries
2025-08-28 21:30:49,022:INFO:Set up data.
2025-08-28 21:30:49,026:INFO:Set up index.
2025-08-28 21:30:49,300:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:51,782:INFO:Initializing predict_model()
2025-08-28 21:30:51,782:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF4B490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF24220>)
2025-08-28 21:30:51,782:INFO:Checking exceptions
2025-08-28 21:30:51,782:INFO:Preloading libraries
2025-08-28 21:30:51,782:INFO:Set up data.
2025-08-28 21:30:51,786:INFO:Set up index.
2025-08-28 21:30:52,089:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:53,521:INFO:Initializing predict_model()
2025-08-28 21:30:53,521:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B284190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF25300>)
2025-08-28 21:30:53,521:INFO:Checking exceptions
2025-08-28 21:30:53,521:INFO:Preloading libraries
2025-08-28 21:30:53,522:INFO:Set up data.
2025-08-28 21:30:53,526:INFO:Set up index.
2025-08-28 21:30:53,896:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:30:56,038:INFO:Initializing predict_model()
2025-08-28 21:30:56,039:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF56810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF25620>)
2025-08-28 21:30:56,039:INFO:Checking exceptions
2025-08-28 21:30:56,039:INFO:Preloading libraries
2025-08-28 21:30:56,039:INFO:Set up data.
2025-08-28 21:30:56,043:INFO:Set up index.
2025-08-28 21:30:56,311:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:00,123:INFO:Initializing predict_model()
2025-08-28 21:31:00,123:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B284B90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF24D60>)
2025-08-28 21:31:00,123:INFO:Checking exceptions
2025-08-28 21:31:00,123:INFO:Preloading libraries
2025-08-28 21:31:00,124:INFO:Set up data.
2025-08-28 21:31:00,128:INFO:Set up index.
2025-08-28 21:31:00,389:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:04,927:INFO:Initializing predict_model()
2025-08-28 21:31:04,927:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF3DAD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF254E0>)
2025-08-28 21:31:04,927:INFO:Checking exceptions
2025-08-28 21:31:04,928:INFO:Preloading libraries
2025-08-28 21:31:04,928:INFO:Set up data.
2025-08-28 21:31:04,931:INFO:Set up index.
2025-08-28 21:31:05,187:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:06,996:INFO:Initializing predict_model()
2025-08-28 21:31:06,997:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF3CA10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF25EE0>)
2025-08-28 21:31:06,997:INFO:Checking exceptions
2025-08-28 21:31:06,997:INFO:Preloading libraries
2025-08-28 21:31:06,997:INFO:Set up data.
2025-08-28 21:31:07,000:INFO:Set up index.
2025-08-28 21:31:07,242:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:09,368:INFO:Initializing predict_model()
2025-08-28 21:31:09,368:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF3C7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF240E0>)
2025-08-28 21:31:09,368:INFO:Checking exceptions
2025-08-28 21:31:09,368:INFO:Preloading libraries
2025-08-28 21:31:09,368:INFO:Set up data.
2025-08-28 21:31:09,371:INFO:Set up index.
2025-08-28 21:31:09,604:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:12,853:INFO:Initializing predict_model()
2025-08-28 21:31:12,853:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF8D150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF26480>)
2025-08-28 21:31:12,853:INFO:Checking exceptions
2025-08-28 21:31:12,854:INFO:Preloading libraries
2025-08-28 21:31:12,854:INFO:Set up data.
2025-08-28 21:31:12,858:INFO:Set up index.
2025-08-28 21:31:13,109:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:15,113:INFO:Initializing predict_model()
2025-08-28 21:31:15,113:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF9C490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF260C0>)
2025-08-28 21:31:15,113:INFO:Checking exceptions
2025-08-28 21:31:15,113:INFO:Preloading libraries
2025-08-28 21:31:15,113:INFO:Set up data.
2025-08-28 21:31:15,117:INFO:Set up index.
2025-08-28 21:31:15,363:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:17,485:INFO:Initializing predict_model()
2025-08-28 21:31:17,485:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF9F450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF25B20>)
2025-08-28 21:31:17,485:INFO:Checking exceptions
2025-08-28 21:31:17,486:INFO:Preloading libraries
2025-08-28 21:31:17,486:INFO:Set up data.
2025-08-28 21:31:17,491:INFO:Set up index.
2025-08-28 21:31:17,751:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:19,576:INFO:Initializing predict_model()
2025-08-28 21:31:19,576:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AFAABD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF26AC0>)
2025-08-28 21:31:19,576:INFO:Checking exceptions
2025-08-28 21:31:19,576:INFO:Preloading libraries
2025-08-28 21:31:19,577:INFO:Set up data.
2025-08-28 21:31:19,581:INFO:Set up index.
2025-08-28 21:31:19,825:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:22,648:INFO:Initializing predict_model()
2025-08-28 21:31:22,648:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF9DC10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF26160>)
2025-08-28 21:31:22,648:INFO:Checking exceptions
2025-08-28 21:31:22,649:INFO:Preloading libraries
2025-08-28 21:31:22,649:INFO:Set up data.
2025-08-28 21:31:22,653:INFO:Set up index.
2025-08-28 21:31:22,896:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:29,753:INFO:Initializing predict_model()
2025-08-28 21:31:29,754:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AFA8390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF26FC0>)
2025-08-28 21:31:29,754:INFO:Checking exceptions
2025-08-28 21:31:29,754:INFO:Preloading libraries
2025-08-28 21:31:29,756:INFO:Set up data.
2025-08-28 21:31:29,760:INFO:Set up index.
2025-08-28 21:31:30,018:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:32,783:INFO:Initializing predict_model()
2025-08-28 21:31:32,783:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF84D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF240E0>)
2025-08-28 21:31:32,783:INFO:Checking exceptions
2025-08-28 21:31:32,783:INFO:Preloading libraries
2025-08-28 21:31:32,783:INFO:Set up data.
2025-08-28 21:31:32,786:INFO:Set up index.
2025-08-28 21:31:33,078:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:34,729:INFO:Initializing predict_model()
2025-08-28 21:31:34,729:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF9D390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75AF27100>)
2025-08-28 21:31:34,729:INFO:Checking exceptions
2025-08-28 21:31:34,729:INFO:Preloading libraries
2025-08-28 21:31:34,729:INFO:Set up data.
2025-08-28 21:31:34,733:INFO:Set up index.
2025-08-28 21:31:34,994:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:31:36,330:INFO:Initializing predict_model()
2025-08-28 21:31:36,330:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF6FE90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75ABD3C40>)
2025-08-28 21:31:36,330:INFO:Checking exceptions
2025-08-28 21:31:36,330:INFO:Preloading libraries
2025-08-28 21:31:36,331:INFO:Set up data.
2025-08-28 21:31:36,335:INFO:Set up index.
2025-08-28 21:31:36,578:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:15,510:INFO:Initializing predict_model()
2025-08-28 21:32:15,510:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF6C890>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E40E0>)
2025-08-28 21:32:15,511:INFO:Checking exceptions
2025-08-28 21:32:15,511:INFO:Preloading libraries
2025-08-28 21:32:15,512:INFO:Set up data.
2025-08-28 21:32:15,516:INFO:Set up index.
2025-08-28 21:32:15,775:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:17,146:INFO:Initializing predict_model()
2025-08-28 21:32:17,146:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF6E6D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0180>)
2025-08-28 21:32:17,146:INFO:Checking exceptions
2025-08-28 21:32:17,146:INFO:Preloading libraries
2025-08-28 21:32:17,148:INFO:Set up data.
2025-08-28 21:32:17,151:INFO:Set up index.
2025-08-28 21:32:17,378:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:17,953:INFO:Initializing predict_model()
2025-08-28 21:32:17,953:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF65110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0360>)
2025-08-28 21:32:17,954:INFO:Checking exceptions
2025-08-28 21:32:17,954:INFO:Preloading libraries
2025-08-28 21:32:17,954:INFO:Set up data.
2025-08-28 21:32:17,959:INFO:Set up index.
2025-08-28 21:32:18,197:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:19,316:INFO:Initializing predict_model()
2025-08-28 21:32:19,316:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF6E7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0360>)
2025-08-28 21:32:19,316:INFO:Checking exceptions
2025-08-28 21:32:19,316:INFO:Preloading libraries
2025-08-28 21:32:19,316:INFO:Set up data.
2025-08-28 21:32:19,319:INFO:Set up index.
2025-08-28 21:32:19,556:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:20,781:INFO:Initializing predict_model()
2025-08-28 21:32:20,781:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF7B990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0180>)
2025-08-28 21:32:20,781:INFO:Checking exceptions
2025-08-28 21:32:20,781:INFO:Preloading libraries
2025-08-28 21:32:20,781:INFO:Set up data.
2025-08-28 21:32:20,787:INFO:Set up index.
2025-08-28 21:32:21,045:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:54,958:INFO:Initializing predict_model()
2025-08-28 21:32:54,958:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AFAC810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0360>)
2025-08-28 21:32:54,959:INFO:Checking exceptions
2025-08-28 21:32:54,959:INFO:Preloading libraries
2025-08-28 21:32:54,959:INFO:Set up data.
2025-08-28 21:32:54,962:INFO:Set up index.
2025-08-28 21:32:55,208:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:56,209:INFO:Initializing predict_model()
2025-08-28 21:32:56,209:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AFAE210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0C20>)
2025-08-28 21:32:56,209:INFO:Checking exceptions
2025-08-28 21:32:56,209:INFO:Preloading libraries
2025-08-28 21:32:56,210:INFO:Set up data.
2025-08-28 21:32:56,213:INFO:Set up index.
2025-08-28 21:32:56,451:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:57,598:INFO:Initializing predict_model()
2025-08-28 21:32:57,600:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B238C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0AE0>)
2025-08-28 21:32:57,600:INFO:Checking exceptions
2025-08-28 21:32:57,600:INFO:Preloading libraries
2025-08-28 21:32:57,600:INFO:Set up data.
2025-08-28 21:32:57,604:INFO:Set up index.
2025-08-28 21:32:57,852:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:32:58,908:INFO:Initializing predict_model()
2025-08-28 21:32:58,908:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF86010>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E05E0>)
2025-08-28 21:32:58,909:INFO:Checking exceptions
2025-08-28 21:32:58,909:INFO:Preloading libraries
2025-08-28 21:32:58,909:INFO:Set up data.
2025-08-28 21:32:58,913:INFO:Set up index.
2025-08-28 21:32:59,163:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:33:00,360:INFO:Initializing predict_model()
2025-08-28 21:33:00,361:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AC25A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B1F6840>)
2025-08-28 21:33:00,361:INFO:Checking exceptions
2025-08-28 21:33:00,361:INFO:Preloading libraries
2025-08-28 21:33:00,362:INFO:Set up data.
2025-08-28 21:33:00,366:INFO:Set up index.
2025-08-28 21:33:00,618:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:33:27,029:INFO:Initializing predict_model()
2025-08-28 21:33:27,029:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75AF6ECD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0C20>)
2025-08-28 21:33:27,030:INFO:Checking exceptions
2025-08-28 21:33:27,030:INFO:Preloading libraries
2025-08-28 21:33:27,030:INFO:Set up data.
2025-08-28 21:33:27,033:INFO:Set up index.
2025-08-28 21:33:27,267:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:34:40,596:INFO:Initializing predict_model()
2025-08-28 21:34:40,596:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B0823D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0A40>)
2025-08-28 21:34:40,596:INFO:Checking exceptions
2025-08-28 21:34:40,596:INFO:Preloading libraries
2025-08-28 21:34:40,596:INFO:Set up data.
2025-08-28 21:34:40,605:INFO:Set up index.
2025-08-28 21:34:41,001:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:34:45,438:INFO:Initializing predict_model()
2025-08-28 21:34:45,438:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A75B1C6690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A75B0E0540>)
2025-08-28 21:34:45,438:INFO:Checking exceptions
2025-08-28 21:34:45,438:INFO:Preloading libraries
2025-08-28 21:34:45,438:INFO:Set up data.
2025-08-28 21:34:45,444:INFO:Set up index.
2025-08-28 21:34:45,747:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:35:02,956:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:35:02,957:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:35:02,957:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:35:02,957:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:35:05,515:INFO:Initializing load_model()
2025-08-28 21:35:05,515:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 21:42:26,993:INFO:Initializing predict_model()
2025-08-28 21:42:26,993:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D874250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E63DA03600>)
2025-08-28 21:42:26,993:INFO:Checking exceptions
2025-08-28 21:42:26,994:INFO:Preloading libraries
2025-08-28 21:42:26,994:INFO:Set up data.
2025-08-28 21:42:26,999:INFO:Set up index.
2025-08-28 21:42:27,253:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:42:31,904:INFO:Initializing predict_model()
2025-08-28 21:42:31,905:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D309510>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E65D747B00>)
2025-08-28 21:42:31,905:INFO:Checking exceptions
2025-08-28 21:42:31,905:INFO:Preloading libraries
2025-08-28 21:42:31,905:INFO:Set up data.
2025-08-28 21:42:31,909:INFO:Set up index.
2025-08-28 21:42:32,153:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:42:37,485:INFO:Initializing predict_model()
2025-08-28 21:42:37,485:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D308E10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E65D7FB380>)
2025-08-28 21:42:37,485:INFO:Checking exceptions
2025-08-28 21:42:37,485:INFO:Preloading libraries
2025-08-28 21:42:37,485:INFO:Set up data.
2025-08-28 21:42:37,489:INFO:Set up index.
2025-08-28 21:42:37,733:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:42:40,889:INFO:Initializing predict_model()
2025-08-28 21:42:40,890:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D73F990>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E661A70CC0>)
2025-08-28 21:42:40,890:INFO:Checking exceptions
2025-08-28 21:42:40,890:INFO:Preloading libraries
2025-08-28 21:42:40,890:INFO:Set up data.
2025-08-28 21:42:40,893:INFO:Set up index.
2025-08-28 21:42:41,132:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:42:45,733:INFO:Initializing predict_model()
2025-08-28 21:42:45,733:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D932150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E661AA1260>)
2025-08-28 21:42:45,733:INFO:Checking exceptions
2025-08-28 21:42:45,733:INFO:Preloading libraries
2025-08-28 21:42:45,733:INFO:Set up data.
2025-08-28 21:42:45,738:INFO:Set up index.
2025-08-28 21:42:45,990:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:44:06,214:INFO:Initializing predict_model()
2025-08-28 21:44:06,214:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D91D7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E65D5E4A40>)
2025-08-28 21:44:06,215:INFO:Checking exceptions
2025-08-28 21:44:06,215:INFO:Preloading libraries
2025-08-28 21:44:06,215:INFO:Set up data.
2025-08-28 21:44:06,221:INFO:Set up index.
2025-08-28 21:44:06,525:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:44:13,741:INFO:Initializing predict_model()
2025-08-28 21:44:13,741:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E661A1B110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E661AC1E40>)
2025-08-28 21:44:13,742:INFO:Checking exceptions
2025-08-28 21:44:13,742:INFO:Preloading libraries
2025-08-28 21:44:13,742:INFO:Set up data.
2025-08-28 21:44:13,746:INFO:Set up index.
2025-08-28 21:44:14,022:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:44:54,247:INFO:Initializing predict_model()
2025-08-28 21:44:54,247:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D74CB50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E661B740E0>)
2025-08-28 21:44:54,248:INFO:Checking exceptions
2025-08-28 21:44:54,248:INFO:Preloading libraries
2025-08-28 21:44:54,248:INFO:Set up data.
2025-08-28 21:44:54,252:INFO:Set up index.
2025-08-28 21:44:54,531:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:44:58,722:INFO:Initializing predict_model()
2025-08-28 21:44:58,722:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E65D611710>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E65D7D2020>)
2025-08-28 21:44:58,723:INFO:Checking exceptions
2025-08-28 21:44:58,723:INFO:Preloading libraries
2025-08-28 21:44:58,723:INFO:Set up data.
2025-08-28 21:44:58,728:INFO:Set up index.
2025-08-28 21:44:58,995:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:45:01,947:INFO:Initializing predict_model()
2025-08-28 21:45:01,947:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001E661A521D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001E65B05BBA0>)
2025-08-28 21:45:01,947:INFO:Checking exceptions
2025-08-28 21:45:01,947:INFO:Preloading libraries
2025-08-28 21:45:01,949:INFO:Set up data.
2025-08-28 21:45:01,953:INFO:Set up index.
2025-08-28 21:45:02,220:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:45:16,522:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:45:16,522:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:45:16,522:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:45:16,522:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:45:18,814:INFO:Initializing load_model()
2025-08-28 21:45:18,815:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 21:45:39,789:INFO:Initializing predict_model()
2025-08-28 21:45:39,789:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FBE0310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A04FEA7600>)
2025-08-28 21:45:39,790:INFO:Checking exceptions
2025-08-28 21:45:39,790:INFO:Preloading libraries
2025-08-28 21:45:39,790:INFO:Set up data.
2025-08-28 21:45:39,794:INFO:Set up index.
2025-08-28 21:45:40,039:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:45:44,846:INFO:Initializing predict_model()
2025-08-28 21:45:44,846:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FBFF210>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F0DF80>)
2025-08-28 21:45:44,846:INFO:Checking exceptions
2025-08-28 21:45:44,846:INFO:Preloading libraries
2025-08-28 21:45:44,846:INFO:Set up data.
2025-08-28 21:45:44,850:INFO:Set up index.
2025-08-28 21:45:45,109:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:45:47,779:INFO:Initializing predict_model()
2025-08-28 21:45:47,780:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06F78B650>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FAB2FC0>)
2025-08-28 21:45:47,780:INFO:Checking exceptions
2025-08-28 21:45:47,780:INFO:Preloading libraries
2025-08-28 21:45:47,780:INFO:Set up data.
2025-08-28 21:45:47,784:INFO:Set up index.
2025-08-28 21:45:48,045:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:45:54,321:INFO:Initializing predict_model()
2025-08-28 21:45:54,321:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FDCA690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FCAA660>)
2025-08-28 21:45:54,321:INFO:Checking exceptions
2025-08-28 21:45:54,321:INFO:Preloading libraries
2025-08-28 21:45:54,321:INFO:Set up data.
2025-08-28 21:45:54,326:INFO:Set up index.
2025-08-28 21:45:54,613:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:45:57,355:INFO:Initializing predict_model()
2025-08-28 21:45:57,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FD5E110>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F356C0>)
2025-08-28 21:45:57,355:INFO:Checking exceptions
2025-08-28 21:45:57,355:INFO:Preloading libraries
2025-08-28 21:45:57,355:INFO:Set up data.
2025-08-28 21:45:57,358:INFO:Set up index.
2025-08-28 21:45:57,632:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:45:59,928:INFO:Initializing predict_model()
2025-08-28 21:45:59,928:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FC07310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FAAFF60>)
2025-08-28 21:45:59,928:INFO:Checking exceptions
2025-08-28 21:45:59,929:INFO:Preloading libraries
2025-08-28 21:45:59,929:INFO:Set up data.
2025-08-28 21:45:59,933:INFO:Set up index.
2025-08-28 21:46:00,204:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:01,925:INFO:Initializing predict_model()
2025-08-28 21:46:01,926:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073F79C90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC75260>)
2025-08-28 21:46:01,926:INFO:Checking exceptions
2025-08-28 21:46:01,926:INFO:Preloading libraries
2025-08-28 21:46:01,926:INFO:Set up data.
2025-08-28 21:46:01,929:INFO:Set up index.
2025-08-28 21:46:02,204:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:07,669:INFO:Initializing predict_model()
2025-08-28 21:46:07,670:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073FBE190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F349A0>)
2025-08-28 21:46:07,670:INFO:Checking exceptions
2025-08-28 21:46:07,670:INFO:Preloading libraries
2025-08-28 21:46:07,671:INFO:Set up data.
2025-08-28 21:46:07,675:INFO:Set up index.
2025-08-28 21:46:07,919:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:09,850:INFO:Initializing predict_model()
2025-08-28 21:46:09,850:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FACF310>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F3CE00>)
2025-08-28 21:46:09,850:INFO:Checking exceptions
2025-08-28 21:46:09,850:INFO:Preloading libraries
2025-08-28 21:46:09,850:INFO:Set up data.
2025-08-28 21:46:09,854:INFO:Set up index.
2025-08-28 21:46:10,118:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:12,963:INFO:Initializing predict_model()
2025-08-28 21:46:12,963:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FA85390>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F29940>)
2025-08-28 21:46:12,963:INFO:Checking exceptions
2025-08-28 21:46:12,963:INFO:Preloading libraries
2025-08-28 21:46:12,963:INFO:Set up data.
2025-08-28 21:46:12,967:INFO:Set up index.
2025-08-28 21:46:13,232:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:20,139:INFO:Initializing predict_model()
2025-08-28 21:46:20,140:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073F78A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FAAEE80>)
2025-08-28 21:46:20,140:INFO:Checking exceptions
2025-08-28 21:46:20,140:INFO:Preloading libraries
2025-08-28 21:46:20,140:INFO:Set up data.
2025-08-28 21:46:20,144:INFO:Set up index.
2025-08-28 21:46:20,405:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:24,804:INFO:Initializing predict_model()
2025-08-28 21:46:24,804:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073FD6E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06F7CBD80>)
2025-08-28 21:46:24,804:INFO:Checking exceptions
2025-08-28 21:46:24,804:INFO:Preloading libraries
2025-08-28 21:46:24,805:INFO:Set up data.
2025-08-28 21:46:24,811:INFO:Set up index.
2025-08-28 21:46:25,052:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:34,468:INFO:Initializing predict_model()
2025-08-28 21:46:34,468:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A07403EE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC98E00>)
2025-08-28 21:46:34,469:INFO:Checking exceptions
2025-08-28 21:46:34,469:INFO:Preloading libraries
2025-08-28 21:46:34,470:INFO:Set up data.
2025-08-28 21:46:34,476:INFO:Set up index.
2025-08-28 21:46:34,792:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:36,721:INFO:Initializing predict_model()
2025-08-28 21:46:36,721:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073ECE7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC98FE0>)
2025-08-28 21:46:36,721:INFO:Checking exceptions
2025-08-28 21:46:36,721:INFO:Preloading libraries
2025-08-28 21:46:36,721:INFO:Set up data.
2025-08-28 21:46:36,725:INFO:Set up index.
2025-08-28 21:46:36,971:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:39,592:INFO:Initializing predict_model()
2025-08-28 21:46:39,592:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FD2B490>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC9AE80>)
2025-08-28 21:46:39,592:INFO:Checking exceptions
2025-08-28 21:46:39,592:INFO:Preloading libraries
2025-08-28 21:46:39,592:INFO:Set up data.
2025-08-28 21:46:39,595:INFO:Set up index.
2025-08-28 21:46:39,834:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:43,173:INFO:Initializing predict_model()
2025-08-28 21:46:43,174:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A074001C50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC74EA0>)
2025-08-28 21:46:43,174:INFO:Checking exceptions
2025-08-28 21:46:43,174:INFO:Preloading libraries
2025-08-28 21:46:43,174:INFO:Set up data.
2025-08-28 21:46:43,177:INFO:Set up index.
2025-08-28 21:46:43,425:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:46,992:INFO:Initializing predict_model()
2025-08-28 21:46:46,992:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FCB13D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FBD7B00>)
2025-08-28 21:46:46,993:INFO:Checking exceptions
2025-08-28 21:46:46,993:INFO:Preloading libraries
2025-08-28 21:46:46,993:INFO:Set up data.
2025-08-28 21:46:46,996:INFO:Set up index.
2025-08-28 21:46:47,240:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:49,459:INFO:Initializing predict_model()
2025-08-28 21:46:49,460:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A07402F7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC9A840>)
2025-08-28 21:46:49,460:INFO:Checking exceptions
2025-08-28 21:46:49,460:INFO:Preloading libraries
2025-08-28 21:46:49,460:INFO:Set up data.
2025-08-28 21:46:49,464:INFO:Set up index.
2025-08-28 21:46:49,729:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:53,614:INFO:Initializing predict_model()
2025-08-28 21:46:53,614:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FC07BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FBD79C0>)
2025-08-28 21:46:53,614:INFO:Checking exceptions
2025-08-28 21:46:53,614:INFO:Preloading libraries
2025-08-28 21:46:53,614:INFO:Set up data.
2025-08-28 21:46:53,618:INFO:Set up index.
2025-08-28 21:46:53,877:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:46:59,580:INFO:Initializing predict_model()
2025-08-28 21:46:59,581:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073E93A90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A07400BF60>)
2025-08-28 21:46:59,581:INFO:Checking exceptions
2025-08-28 21:46:59,581:INFO:Preloading libraries
2025-08-28 21:46:59,581:INFO:Set up data.
2025-08-28 21:46:59,585:INFO:Set up index.
2025-08-28 21:46:59,831:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:03,743:INFO:Initializing predict_model()
2025-08-28 21:47:03,745:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A075499BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC75EE0>)
2025-08-28 21:47:03,745:INFO:Checking exceptions
2025-08-28 21:47:03,745:INFO:Preloading libraries
2025-08-28 21:47:03,745:INFO:Set up data.
2025-08-28 21:47:03,750:INFO:Set up index.
2025-08-28 21:47:03,991:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:09,366:INFO:Initializing predict_model()
2025-08-28 21:47:09,367:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06F7F7D10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F38040>)
2025-08-28 21:47:09,367:INFO:Checking exceptions
2025-08-28 21:47:09,367:INFO:Preloading libraries
2025-08-28 21:47:09,367:INFO:Set up data.
2025-08-28 21:47:09,371:INFO:Set up index.
2025-08-28 21:47:09,652:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:23,026:INFO:Initializing predict_model()
2025-08-28 21:47:23,026:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073FFBFD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F3C4A0>)
2025-08-28 21:47:23,026:INFO:Checking exceptions
2025-08-28 21:47:23,026:INFO:Preloading libraries
2025-08-28 21:47:23,026:INFO:Set up data.
2025-08-28 21:47:23,029:INFO:Set up index.
2025-08-28 21:47:23,325:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:26,774:INFO:Initializing predict_model()
2025-08-28 21:47:26,774:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073F7E250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A07400AB60>)
2025-08-28 21:47:26,775:INFO:Checking exceptions
2025-08-28 21:47:26,775:INFO:Preloading libraries
2025-08-28 21:47:26,775:INFO:Set up data.
2025-08-28 21:47:26,779:INFO:Set up index.
2025-08-28 21:47:27,016:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:31,552:INFO:Initializing predict_model()
2025-08-28 21:47:31,552:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FA96E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073FB96C0>)
2025-08-28 21:47:31,553:INFO:Checking exceptions
2025-08-28 21:47:31,553:INFO:Preloading libraries
2025-08-28 21:47:31,553:INFO:Set up data.
2025-08-28 21:47:31,557:INFO:Set up index.
2025-08-28 21:47:31,793:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:34,447:INFO:Initializing predict_model()
2025-08-28 21:47:34,447:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FAE6F90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC205E0>)
2025-08-28 21:47:34,447:INFO:Checking exceptions
2025-08-28 21:47:34,447:INFO:Preloading libraries
2025-08-28 21:47:34,448:INFO:Set up data.
2025-08-28 21:47:34,451:INFO:Set up index.
2025-08-28 21:47:34,705:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:36,865:INFO:Initializing predict_model()
2025-08-28 21:47:36,865:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A0754F6E50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A07400B100>)
2025-08-28 21:47:36,866:INFO:Checking exceptions
2025-08-28 21:47:36,866:INFO:Preloading libraries
2025-08-28 21:47:36,866:INFO:Set up data.
2025-08-28 21:47:36,869:INFO:Set up index.
2025-08-28 21:47:37,107:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:41,342:INFO:Initializing predict_model()
2025-08-28 21:47:41,342:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A075494D50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073FBA8E0>)
2025-08-28 21:47:41,343:INFO:Checking exceptions
2025-08-28 21:47:41,343:INFO:Preloading libraries
2025-08-28 21:47:41,343:INFO:Set up data.
2025-08-28 21:47:41,346:INFO:Set up index.
2025-08-28 21:47:41,590:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:44,394:INFO:Initializing predict_model()
2025-08-28 21:47:44,394:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A0754E5950>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FC23BA0>)
2025-08-28 21:47:44,395:INFO:Checking exceptions
2025-08-28 21:47:44,395:INFO:Preloading libraries
2025-08-28 21:47:44,395:INFO:Set up data.
2025-08-28 21:47:44,398:INFO:Set up index.
2025-08-28 21:47:44,656:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:47,635:INFO:Initializing predict_model()
2025-08-28 21:47:47,635:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A075461D90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F4A660>)
2025-08-28 21:47:47,635:INFO:Checking exceptions
2025-08-28 21:47:47,635:INFO:Preloading libraries
2025-08-28 21:47:47,635:INFO:Set up data.
2025-08-28 21:47:47,639:INFO:Set up index.
2025-08-28 21:47:47,882:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:47:50,315:INFO:Initializing predict_model()
2025-08-28 21:47:50,315:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073F64250>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A06FCBC2C0>)
2025-08-28 21:47:50,316:INFO:Checking exceptions
2025-08-28 21:47:50,316:INFO:Preloading libraries
2025-08-28 21:47:50,316:INFO:Set up data.
2025-08-28 21:47:50,321:INFO:Set up index.
2025-08-28 21:47:50,575:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:48:00,389:INFO:Initializing predict_model()
2025-08-28 21:48:00,389:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A0754A2A10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A07407BE20>)
2025-08-28 21:48:00,389:INFO:Checking exceptions
2025-08-28 21:48:00,389:INFO:Preloading libraries
2025-08-28 21:48:00,390:INFO:Set up data.
2025-08-28 21:48:00,393:INFO:Set up index.
2025-08-28 21:48:00,640:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:48:02,729:INFO:Initializing predict_model()
2025-08-28 21:48:02,729:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A06FCB29D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A07407AD40>)
2025-08-28 21:48:02,729:INFO:Checking exceptions
2025-08-28 21:48:02,729:INFO:Preloading libraries
2025-08-28 21:48:02,730:INFO:Set up data.
2025-08-28 21:48:02,735:INFO:Set up index.
2025-08-28 21:48:03,015:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:48:05,355:INFO:Initializing predict_model()
2025-08-28 21:48:05,355:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A073F26610>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A07407AB60>)
2025-08-28 21:48:05,355:INFO:Checking exceptions
2025-08-28 21:48:05,355:INFO:Preloading libraries
2025-08-28 21:48:05,356:INFO:Set up data.
2025-08-28 21:48:05,359:INFO:Set up index.
2025-08-28 21:48:05,598:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:48:08,512:INFO:Initializing predict_model()
2025-08-28 21:48:08,513:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A074058E90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A07407B920>)
2025-08-28 21:48:08,514:INFO:Checking exceptions
2025-08-28 21:48:08,514:INFO:Preloading libraries
2025-08-28 21:48:08,514:INFO:Set up data.
2025-08-28 21:48:08,519:INFO:Set up index.
2025-08-28 21:48:08,769:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:48:11,149:INFO:Initializing predict_model()
2025-08-28 21:48:11,149:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A074019BD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A074078C20>)
2025-08-28 21:48:11,149:INFO:Checking exceptions
2025-08-28 21:48:11,149:INFO:Preloading libraries
2025-08-28 21:48:11,149:INFO:Set up data.
2025-08-28 21:48:11,153:INFO:Set up index.
2025-08-28 21:48:11,400:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:48:13,798:INFO:Initializing predict_model()
2025-08-28 21:48:13,799:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002A075587810>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002A073F0DF80>)
2025-08-28 21:48:13,799:INFO:Checking exceptions
2025-08-28 21:48:13,799:INFO:Preloading libraries
2025-08-28 21:48:13,799:INFO:Set up data.
2025-08-28 21:48:13,803:INFO:Set up index.
2025-08-28 21:48:14,049:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:58:20,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:58:20,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:58:20,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:58:20,673:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 21:58:22,425:INFO:Initializing load_model()
2025-08-28 21:58:22,425:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 21:58:36,386:INFO:Initializing predict_model()
2025-08-28 21:58:36,386:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000236CC95A090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000236AC9B3600>)
2025-08-28 21:58:36,387:INFO:Checking exceptions
2025-08-28 21:58:36,387:INFO:Preloading libraries
2025-08-28 21:58:36,387:INFO:Set up data.
2025-08-28 21:58:36,391:INFO:Set up index.
2025-08-28 21:58:36,596:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 21:58:44,546:INFO:Initializing predict_model()
2025-08-28 21:58:44,546:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000236CC8DCB90>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000236CC3DB380>)
2025-08-28 21:58:44,547:INFO:Checking exceptions
2025-08-28 21:58:44,547:INFO:Preloading libraries
2025-08-28 21:58:44,547:INFO:Set up data.
2025-08-28 21:58:44,550:INFO:Set up index.
2025-08-28 21:58:44,736:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:00:32,662:INFO:Initializing predict_model()
2025-08-28 22:00:32,663:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000236C8219ED0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000236CC3DB600>)
2025-08-28 22:00:32,663:INFO:Checking exceptions
2025-08-28 22:00:32,663:INFO:Preloading libraries
2025-08-28 22:00:32,663:INFO:Set up data.
2025-08-28 22:00:32,666:INFO:Set up index.
2025-08-28 22:00:32,848:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:00:45,378:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:00:45,378:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:00:45,378:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:00:45,378:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:00:47,070:INFO:Initializing load_model()
2025-08-28 22:00:47,071:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 22:00:51,243:INFO:Initializing predict_model()
2025-08-28 22:00:51,244:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000159B330F2D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000159935D3600>)
2025-08-28 22:00:51,244:INFO:Checking exceptions
2025-08-28 22:00:51,244:INFO:Preloading libraries
2025-08-28 22:00:51,244:INFO:Set up data.
2025-08-28 22:00:51,248:INFO:Set up index.
2025-08-28 22:00:51,433:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:00:56,572:INFO:Initializing predict_model()
2025-08-28 22:00:56,572:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000159B32133D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000159B76928E0>)
2025-08-28 22:00:56,572:INFO:Checking exceptions
2025-08-28 22:00:56,572:INFO:Preloading libraries
2025-08-28 22:00:56,572:INFO:Set up data.
2025-08-28 22:00:56,575:INFO:Set up index.
2025-08-28 22:00:56,756:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:01:15,965:INFO:Initializing predict_model()
2025-08-28 22:01:15,965:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000159B3256090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000159B3311120>)
2025-08-28 22:01:15,965:INFO:Checking exceptions
2025-08-28 22:01:15,965:INFO:Preloading libraries
2025-08-28 22:01:15,966:INFO:Set up data.
2025-08-28 22:01:15,969:INFO:Set up index.
2025-08-28 22:01:16,147:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:01:26,450:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:01:26,450:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:01:26,450:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:01:26,450:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:01:28,074:INFO:Initializing load_model()
2025-08-28 22:01:28,074:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 22:01:35,104:INFO:Initializing predict_model()
2025-08-28 22:01:35,104:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026AA8AFEE50>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026A88BE3600>)
2025-08-28 22:01:35,104:INFO:Checking exceptions
2025-08-28 22:01:35,104:INFO:Preloading libraries
2025-08-28 22:01:35,104:INFO:Set up data.
2025-08-28 22:01:35,108:INFO:Set up index.
2025-08-28 22:01:35,294:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:01:40,887:INFO:Initializing predict_model()
2025-08-28 22:01:40,887:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026AA8CD1C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000026AACE66CA0>)
2025-08-28 22:01:40,887:INFO:Checking exceptions
2025-08-28 22:01:40,887:INFO:Preloading libraries
2025-08-28 22:01:40,888:INFO:Set up data.
2025-08-28 22:01:40,891:INFO:Set up index.
2025-08-28 22:01:41,071:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:02:04,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:02:04,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:02:04,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:02:04,268:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-28 22:02:05,882:INFO:Initializing load_model()
2025-08-28 22:02:05,883:INFO:load_model(model_name=churn_model, platform=None, authentication=None, verbose=True)
2025-08-28 22:02:09,122:INFO:Initializing predict_model()
2025-08-28 22:02:09,122:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254834930D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254E3723600>)
2025-08-28 22:02:09,122:INFO:Checking exceptions
2025-08-28 22:02:09,122:INFO:Preloading libraries
2025-08-28 22:02:09,122:INFO:Set up data.
2025-08-28 22:02:09,126:INFO:Set up index.
2025-08-28 22:02:09,324:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:02:13,554:INFO:Initializing predict_model()
2025-08-28 22:02:13,554:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025483689C10>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254877596C0>)
2025-08-28 22:02:13,554:INFO:Checking exceptions
2025-08-28 22:02:13,554:INFO:Preloading libraries
2025-08-28 22:02:13,554:INFO:Set up data.
2025-08-28 22:02:13,558:INFO:Set up index.
2025-08-28 22:02:13,737:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:02:17,879:INFO:Initializing predict_model()
2025-08-28 22:02:17,879:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254835900D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002548337A480>)
2025-08-28 22:02:17,879:INFO:Checking exceptions
2025-08-28 22:02:17,879:INFO:Preloading libraries
2025-08-28 22:02:17,879:INFO:Set up data.
2025-08-28 22:02:17,884:INFO:Set up index.
2025-08-28 22:02:18,062:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:02:32,981:INFO:Initializing predict_model()
2025-08-28 22:02:32,981:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002548333E090>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025487759580>)
2025-08-28 22:02:32,981:INFO:Checking exceptions
2025-08-28 22:02:32,981:INFO:Preloading libraries
2025-08-28 22:02:32,981:INFO:Set up data.
2025-08-28 22:02:32,984:INFO:Set up index.
2025-08-28 22:02:33,176:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:02:35,998:INFO:Initializing predict_model()
2025-08-28 22:02:35,998:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025483680190>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025487809940>)
2025-08-28 22:02:35,998:INFO:Checking exceptions
2025-08-28 22:02:35,999:INFO:Preloading libraries
2025-08-28 22:02:35,999:INFO:Set up data.
2025-08-28 22:02:36,003:INFO:Set up index.
2025-08-28 22:02:36,181:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:02:39,612:INFO:Initializing predict_model()
2025-08-28 22:02:39,612:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025483578790>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000254877F49A0>)
2025-08-28 22:02:39,612:INFO:Checking exceptions
2025-08-28 22:02:39,612:INFO:Preloading libraries
2025-08-28 22:02:39,612:INFO:Set up data.
2025-08-28 22:02:39,615:INFO:Set up index.
2025-08-28 22:02:39,797:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

2025-08-28 22:02:44,916:INFO:Initializing predict_model()
2025-08-28 22:02:44,916:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000254833C0450>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(include=['Age', 'Tenure', 'Usage Frequency',
                                             'Support Calls', 'Payment Delay',
                                             'Total Spend',
                                             'Last Interaction'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['Gender', 'Subscription Type',
                                             'Contract Length'],
                                    transformer=SimpleImputer(strategy=...
dtype: int64}]))),
                ('onehot_encoding',
                 TransformerWrapper(include=['Subscription Type',
                                             'Contract Length'],
                                    transformer=OneHotEncoder(cols=['Subscription '
                                                                    'Type',
                                                                    'Contract '
                                                                    'Length'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('clean_column_names',
                 TransformerWrapper(transformer=CleanColumnNames())),
                ('actual_estimator',
                 LGBMClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=True, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000025483537420>)
2025-08-28 22:02:44,916:INFO:Checking exceptions
2025-08-28 22:02:44,916:INFO:Preloading libraries
2025-08-28 22:02:44,917:INFO:Set up data.
2025-08-28 22:02:44,920:INFO:Set up index.
2025-08-28 22:02:45,099:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\shap\explainers\_tree.py:583: UserWarning: LightGBM binary classifier with TreeExplainer shap values output has changed to a list of ndarray
  warnings.warn(

