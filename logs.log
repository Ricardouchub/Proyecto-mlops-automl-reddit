2025-08-29 17:20:53,338:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:20:53,339:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:20:53,339:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:20:53,339:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:20:57,939:INFO:Initializing load_model()
2025-08-29 17:20:57,940:INFO:load_model(model_name=sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 17:22:02,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:22:02,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:22:02,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:22:02,340:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:22:03,635:INFO:Initializing load_model()
2025-08-29 17:22:03,635:INFO:load_model(model_name=sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 17:28:27,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:28:27,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:28:27,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:28:27,003:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 17:28:29,289:INFO:PyCaret ClassificationExperiment
2025-08-29 17:28:29,289:INFO:Logging name: reddit_sentiment_analysis_intel_amd
2025-08-29 17:28:29,289:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-29 17:28:29,289:INFO:version 3.3.2
2025-08-29 17:28:29,289:INFO:Initializing setup()
2025-08-29 17:28:29,290:INFO:self.USI: e679
2025-08-29 17:28:29,290:INFO:self._variable_keys: {'_ml_usecase', 'n_jobs_param', 'X_train', 'idx', 'memory', 'y_train', 'X', 'exp_name_log', 'y_test', 'X_test', 'target_param', '_available_plots', 'fold_shuffle_param', 'gpu_n_jobs_param', 'is_multiclass', 'pipeline', 'gpu_param', 'seed', 'fold_generator', 'exp_id', 'fix_imbalance', 'fold_groups_param', 'y', 'html_param', 'logging_param', 'USI', 'log_plots_param', 'data'}
2025-08-29 17:28:29,290:INFO:Checking environment
2025-08-29 17:28:29,290:INFO:python_version: 3.11.13
2025-08-29 17:28:29,290:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-29 17:28:29,290:INFO:machine: AMD64
2025-08-29 17:28:29,322:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-29 17:28:29,323:INFO:Memory: svmem(total=34293444608, available=9399939072, percent=72.6, used=24893505536, free=9399939072)
2025-08-29 17:28:29,323:INFO:Physical Core: 6
2025-08-29 17:28:29,323:INFO:Logical Core: 12
2025-08-29 17:28:29,323:INFO:Checking libraries
2025-08-29 17:28:29,323:INFO:System:
2025-08-29 17:28:29,323:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-29 17:28:29,323:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-29 17:28:29,323:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-29 17:28:29,323:INFO:PyCaret required dependencies:
2025-08-29 17:28:29,382:INFO:                 pip: 25.1
2025-08-29 17:28:29,382:INFO:          setuptools: 72.1.0
2025-08-29 17:28:29,382:INFO:             pycaret: 3.3.2
2025-08-29 17:28:29,383:INFO:             IPython: 9.4.0
2025-08-29 17:28:29,383:INFO:          ipywidgets: 8.1.7
2025-08-29 17:28:29,383:INFO:                tqdm: 4.67.1
2025-08-29 17:28:29,383:INFO:               numpy: 1.26.4
2025-08-29 17:28:29,383:INFO:              pandas: 2.1.4
2025-08-29 17:28:29,383:INFO:              jinja2: 3.1.6
2025-08-29 17:28:29,383:INFO:               scipy: 1.11.4
2025-08-29 17:28:29,383:INFO:              joblib: 1.3.2
2025-08-29 17:28:29,383:INFO:             sklearn: 1.4.2
2025-08-29 17:28:29,383:INFO:                pyod: 2.0.5
2025-08-29 17:28:29,383:INFO:            imblearn: 0.14.0
2025-08-29 17:28:29,383:INFO:   category_encoders: 2.7.0
2025-08-29 17:28:29,383:INFO:            lightgbm: 4.6.0
2025-08-29 17:28:29,383:INFO:               numba: 0.61.2
2025-08-29 17:28:29,383:INFO:            requests: 2.32.4
2025-08-29 17:28:29,383:INFO:          matplotlib: 3.7.5
2025-08-29 17:28:29,383:INFO:          scikitplot: 0.3.7
2025-08-29 17:28:29,383:INFO:         yellowbrick: 1.5
2025-08-29 17:28:29,383:INFO:              plotly: 5.24.1
2025-08-29 17:28:29,383:INFO:    plotly-resampler: Not installed
2025-08-29 17:28:29,383:INFO:             kaleido: 1.0.0
2025-08-29 17:28:29,383:INFO:           schemdraw: 0.15
2025-08-29 17:28:29,384:INFO:         statsmodels: 0.14.5
2025-08-29 17:28:29,384:INFO:              sktime: 0.26.0
2025-08-29 17:28:29,384:INFO:               tbats: 1.1.3
2025-08-29 17:28:29,384:INFO:            pmdarima: 2.0.4
2025-08-29 17:28:29,384:INFO:              psutil: 7.0.0
2025-08-29 17:28:29,384:INFO:          markupsafe: 3.0.2
2025-08-29 17:28:29,384:INFO:             pickle5: Not installed
2025-08-29 17:28:29,384:INFO:         cloudpickle: 3.1.1
2025-08-29 17:28:29,384:INFO:         deprecation: 2.1.0
2025-08-29 17:28:29,384:INFO:              xxhash: 3.5.0
2025-08-29 17:28:29,384:INFO:           wurlitzer: Not installed
2025-08-29 17:28:29,384:INFO:PyCaret optional dependencies:
2025-08-29 17:28:31,815:INFO:                shap: 0.48.0
2025-08-29 17:28:31,815:INFO:           interpret: Not installed
2025-08-29 17:28:31,815:INFO:                umap: Not installed
2025-08-29 17:28:31,815:INFO:     ydata_profiling: Not installed
2025-08-29 17:28:31,815:INFO:  explainerdashboard: Not installed
2025-08-29 17:28:31,815:INFO:             autoviz: Not installed
2025-08-29 17:28:31,815:INFO:           fairlearn: Not installed
2025-08-29 17:28:31,815:INFO:          deepchecks: Not installed
2025-08-29 17:28:31,815:INFO:             xgboost: Not installed
2025-08-29 17:28:31,815:INFO:            catboost: Not installed
2025-08-29 17:28:31,815:INFO:              kmodes: Not installed
2025-08-29 17:28:31,815:INFO:             mlxtend: Not installed
2025-08-29 17:28:31,815:INFO:       statsforecast: Not installed
2025-08-29 17:28:31,815:INFO:        tune_sklearn: Not installed
2025-08-29 17:28:31,815:INFO:                 ray: Not installed
2025-08-29 17:28:31,815:INFO:            hyperopt: Not installed
2025-08-29 17:28:31,815:INFO:              optuna: Not installed
2025-08-29 17:28:31,815:INFO:               skopt: Not installed
2025-08-29 17:28:31,815:INFO:              mlflow: 3.3.2
2025-08-29 17:28:31,815:INFO:              gradio: 5.44.1
2025-08-29 17:28:31,815:INFO:             fastapi: 0.116.1
2025-08-29 17:28:31,815:INFO:             uvicorn: 0.35.0
2025-08-29 17:28:31,816:INFO:              m2cgen: Not installed
2025-08-29 17:28:31,816:INFO:           evidently: Not installed
2025-08-29 17:28:31,816:INFO:               fugue: Not installed
2025-08-29 17:28:31,816:INFO:           streamlit: 1.49.0
2025-08-29 17:28:31,816:INFO:             prophet: Not installed
2025-08-29 17:28:31,816:INFO:None
2025-08-29 17:28:31,816:INFO:Set up data.
2025-08-29 17:28:31,919:INFO:Set up folding strategy.
2025-08-29 17:28:31,920:INFO:Set up train/test split.
2025-08-29 17:28:31,984:INFO:Set up index.
2025-08-29 17:28:31,985:INFO:Assigning column types.
2025-08-29 17:28:31,989:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-29 17:28:32,027:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-29 17:28:32,040:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 17:28:32,089:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,090:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,128:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-29 17:28:32,129:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 17:28:32,153:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,153:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,153:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-29 17:28:32,193:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 17:28:32,217:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,217:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,257:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 17:28:32,281:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,281:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,281:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-29 17:28:32,345:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,345:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,408:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,408:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:28:32,415:INFO:Preparing preprocessing pipeline...
2025-08-29 17:28:32,417:INFO:Set up label encoding.
2025-08-29 17:28:32,417:INFO:Set up simple imputation.
2025-08-29 17:28:32,417:INFO:Set up text embedding.
2025-08-29 17:28:32,421:INFO:Set up encoding of ordinal features.
2025-08-29 17:28:32,424:INFO:Set up encoding of categorical features.
2025-08-29 17:29:40,401:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py:256: UserWarning: Persisting input arguments took 0.57s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = self._memory_transform(

2025-08-29 17:30:23,909:INFO:Finished creating preprocessing pipeline.
2025-08-29 17:30:23,929:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-08-29 17:30:23,929:INFO:Creating final display dataframe.
2025-08-29 17:31:47,913:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.59s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-08-29 17:33:33,534:INFO:Setup _display_container:                        Description                                 Value
0                       Session id                                   123
1                           Target                             sentiment
2                      Target type                            Multiclass
3                   Target mapping  Negative: 0, Neutral: 1, Positive: 2
4              Original data shape                           (20768, 10)
5           Transformed data shape                        (20768, 22081)
6      Transformed train set shape                        (14537, 22081)
7       Transformed test set shape                         (6231, 22081)
8                 Numeric features                                     1
9                    Text features                                     1
10            Categorical features                                     7
11                      Preprocess                                  True
12                 Imputation type                                simple
13              Numeric imputation                                  mean
14          Categorical imputation                                  mode
15  Text features embedding method                                tf-idf
16        Maximum one-hot encoding                                    25
17                 Encoding method                                  None
18                  Fold Generator                       StratifiedKFold
19                     Fold Number                                    10
20                        CPU Jobs                                    -1
21                         Use GPU                                 False
22                  Log Experiment                          MlflowLogger
23                 Experiment Name   reddit_sentiment_analysis_intel_amd
24                             USI                                  e679
2025-08-29 17:33:33,606:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:33:33,606:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:33:33,673:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:33:33,674:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 17:33:33,675:INFO:Logging experiment in loggers
2025-08-29 17:33:34,878:INFO:SubProcess save_model() called ==================================
2025-08-29 17:33:34,918:INFO:Initializing save_model()
2025-08-29 17:33:34,919:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), model_name=C:\Users\fabri\AppData\Local\Temp\tmpc87mokc7\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-29 17:33:34,919:INFO:Adding model into prep_pipe
2025-08-29 17:33:34,919:WARNING:Only Model saved as it was a pipeline.
2025-08-29 17:33:35,157:INFO:C:\Users\fabri\AppData\Local\Temp\tmpc87mokc7\Transformation Pipeline.pkl saved in current working directory
2025-08-29 17:33:35,178:INFO:Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-08-29 17:33:35,178:INFO:save_model() successfully completed......................................
2025-08-29 17:33:35,310:INFO:SubProcess save_model() end ==================================
2025-08-29 17:33:35,336:INFO:setup() successfully completed in 304.42s...............
2025-08-29 17:33:35,336:INFO:Initializing compare_models()
2025-08-29 17:33:35,336:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, include=['lightgbm', 'rf', 'et'], exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, 'include': ['lightgbm', 'rf', 'et'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-08-29 17:33:35,336:INFO:Checking exceptions
2025-08-29 17:33:35,341:INFO:Preparing display monitor
2025-08-29 17:33:35,345:INFO:Initializing Light Gradient Boosting Machine
2025-08-29 17:33:35,345:INFO:Total runtime is 0.0 minutes
2025-08-29 17:33:35,346:INFO:SubProcess create_model() called ==================================
2025-08-29 17:33:35,346:INFO:Initializing create_model()
2025-08-29 17:33:35,346:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000268962C0910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 17:33:35,346:INFO:Checking exceptions
2025-08-29 17:33:35,346:INFO:Importing libraries
2025-08-29 17:33:35,346:INFO:Copying training dataset
2025-08-29 17:33:35,355:INFO:Defining folds
2025-08-29 17:33:35,355:INFO:Declaring metric variables
2025-08-29 17:33:35,355:INFO:Importing untrained model
2025-08-29 17:33:35,356:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-29 17:33:35,356:INFO:Starting cross validation
2025-08-29 17:33:35,409:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-29 17:36:55,060:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:36:55,075:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:36:55,082:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:01,045:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:01,061:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:01,076:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:02,779:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:02,797:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:02,810:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:03,202:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:03,217:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:03,228:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:03,559:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:03,575:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:03,587:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:37:03,699:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
5 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 366, in transform
    X = pd.concat(
        ^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 393, in concat
    return op.get_result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 680, in get_result
    new_data = concatenate_managers(
               ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 131, in concatenate_managers
    mgrs = _maybe_reindex_columns_na_proxy(axes, mgrs_indexers, needs_copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 230, in _maybe_reindex_columns_na_proxy
    mgr = mgr.copy()
          ^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 576, in copy
    res = self.apply("copy", deep=deep)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 354, in apply
    applied = getattr(b, f)(**kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 645, in copy
    values = values.copy()
             ^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21038, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 176, in _reorder_cols
    new_df = new_df.drop(new_df.filter(regex="__drop__$").columns, axis=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21042, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 366, in transform
    X = pd.concat(
        ^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 393, in concat
    return op.get_result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 680, in get_result
    new_data = concatenate_managers(
               ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 131, in concatenate_managers
    mgrs = _maybe_reindex_columns_na_proxy(axes, mgrs_indexers, needs_copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 230, in _maybe_reindex_columns_na_proxy
    mgr = mgr.copy()
          ^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 576, in copy
    res = self.apply("copy", deep=deep)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 354, in apply
    applied = getattr(b, f)(**kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 645, in copy
    values = values.copy()
             ^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21058, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 169, in _reorder_cols
    new_df = df.merge(
             ^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 10487, in merge
    return merge(
           ^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 183, in merge
    return op.get_result(copy=copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 885, in get_result
    result = self._reindex_and_concat(
             ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 876, in _reindex_and_concat
    result = concat([left, right], axis=1, copy=copy)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 393, in concat
    return op.get_result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 680, in get_result
    new_data = concatenate_managers(
               ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 131, in concatenate_managers
    mgrs = _maybe_reindex_columns_na_proxy(axes, mgrs_indexers, needs_copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 230, in _maybe_reindex_columns_na_proxy
    mgr = mgr.copy()
          ^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 576, in copy
    res = self.apply("copy", deep=deep)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 354, in apply
    applied = getattr(b, f)(**kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 645, in copy
    values = values.copy()
             ^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.04 GiB for an array with shape (20940, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 372, in transform
    X = X.drop(col, axis=1)
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.04 GiB for an array with shape (20946, 13083) and data type float64

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2025-08-29 17:37:03,743:INFO:Calculating mean and std
2025-08-29 17:37:03,765:INFO:Creating metrics dataframe
2025-08-29 17:37:03,833:INFO:Uploading results into container
2025-08-29 17:37:03,837:INFO:Uploading model into container now
2025-08-29 17:37:03,843:INFO:_master_model_container: 1
2025-08-29 17:37:03,844:INFO:_display_container: 2
2025-08-29 17:37:03,853:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-29 17:37:03,853:INFO:create_model() successfully completed......................................
2025-08-29 17:37:04,441:WARNING:create_model() for LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) raised an exception or returned all 0.0, trying without fit_kwargs:
2025-08-29 17:37:04,465:WARNING:Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

2025-08-29 17:37:04,465:INFO:Initializing create_model()
2025-08-29 17:37:04,465:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000268962C0910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 17:37:04,465:INFO:Checking exceptions
2025-08-29 17:37:04,465:INFO:Importing libraries
2025-08-29 17:37:04,466:INFO:Copying training dataset
2025-08-29 17:37:04,478:INFO:Defining folds
2025-08-29 17:37:04,478:INFO:Declaring metric variables
2025-08-29 17:37:04,479:INFO:Importing untrained model
2025-08-29 17:37:04,479:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-29 17:37:04,480:INFO:Starting cross validation
2025-08-29 17:37:04,526:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-29 17:40:22,107:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:22,136:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:22,154:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:30,866:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:30,886:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:30,898:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:33,150:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:33,167:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:33,179:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:34,175:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:34,220:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:34,250:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:34,687:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:34,703:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:34,716:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:35,388:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:35,403:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:35,413:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:40:35,491:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
4 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 233, in transform
    X = to_df(X, index=getattr(y, "index", None))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\utils\generic.py", line 109, in to_df
    data = data.rename(columns=lambda col: str(col))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5518, in rename
    return super()._rename(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 1059, in _rename
    result = self if inplace else self.copy(deep=copy and not using_copy_on_write())
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 6685, in copy
    data = self._mgr.copy(deep=deep)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 587, in copy
    res._consolidate_inplace()
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 1750, in _consolidate_inplace
    self.blocks = _consolidate(self.blocks)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2217, in _consolidate
    merged_blocks, _ = _merge_blocks(
                       ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2242, in _merge_blocks
    new_values = np.vstack([b.values for b in blocks])  # type: ignore[misc]
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\numpy\core\shape_base.py", line 289, in vstack
    return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21039, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 176, in _reorder_cols
    new_df = new_df.drop(new_df.filter(regex="__drop__$").columns, axis=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21022, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 372, in transform
    X = X.drop(col, axis=1)
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21058, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 170, in _reorder_cols
    right=original_df[[col for col in original_df if col in columns]],
          ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 3908, in __getitem__
    data = self._take_with_is_copy(indexer, axis=1)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4088, in _take_with_is_copy
    result = self.take(indices=indices, axis=axis)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4068, in take
    new_data = self._mgr.take(
               ^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 877, in take
    return self.reindex_indexer(
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.04 GiB for an array with shape (20961, 13084) and data type float64

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2025-08-29 17:40:35,530:INFO:Calculating mean and std
2025-08-29 17:40:35,553:INFO:Creating metrics dataframe
2025-08-29 17:40:35,640:INFO:Uploading results into container
2025-08-29 17:40:35,644:INFO:Uploading model into container now
2025-08-29 17:40:35,648:INFO:_master_model_container: 2
2025-08-29 17:40:35,648:INFO:_display_container: 2
2025-08-29 17:40:35,659:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-08-29 17:40:35,660:INFO:create_model() successfully completed......................................
2025-08-29 17:40:36,403:ERROR:create_model() for LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0) raised an exception or returned all 0.0:
2025-08-29 17:40:36,405:ERROR:Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 818, in compare_models
    np.sum(
AssertionError

2025-08-29 17:40:36,405:INFO:Initializing Random Forest Classifier
2025-08-29 17:40:36,405:INFO:Total runtime is 7.0176655650138855 minutes
2025-08-29 17:40:36,405:INFO:SubProcess create_model() called ==================================
2025-08-29 17:40:36,406:INFO:Initializing create_model()
2025-08-29 17:40:36,406:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000268962C0910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 17:40:36,406:INFO:Checking exceptions
2025-08-29 17:40:36,406:INFO:Importing libraries
2025-08-29 17:40:36,407:INFO:Copying training dataset
2025-08-29 17:40:36,424:INFO:Defining folds
2025-08-29 17:40:36,424:INFO:Declaring metric variables
2025-08-29 17:40:36,424:INFO:Importing untrained model
2025-08-29 17:40:36,425:INFO:Random Forest Classifier Imported successfully
2025-08-29 17:40:36,425:INFO:Starting cross validation
2025-08-29 17:40:36,473:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-29 17:44:37,612:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:37,632:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:37,642:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:41,899:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:41,911:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:41,918:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:45,828:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:45,839:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:45,850:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:45,890:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:45,901:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:45,910:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:48,389:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:48,400:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:48,413:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:48,458:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:48,474:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:48,485:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:44:48,574:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
4 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 176, in _reorder_cols
    new_df = new_df.drop(new_df.filter(regex="__drop__$").columns, axis=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21042, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 233, in transform
    X = to_df(X, index=getattr(y, "index", None))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\utils\generic.py", line 109, in to_df
    data = data.rename(columns=lambda col: str(col))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5518, in rename
    return super()._rename(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 1059, in _rename
    result = self if inplace else self.copy(deep=copy and not using_copy_on_write())
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 6685, in copy
    data = self._mgr.copy(deep=deep)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 587, in copy
    res._consolidate_inplace()
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 1750, in _consolidate_inplace
    self.blocks = _consolidate(self.blocks)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2217, in _consolidate
    merged_blocks, _ = _merge_blocks(
                       ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2242, in _merge_blocks
    new_values = np.vstack([b.values for b in blocks])  # type: ignore[misc]
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\numpy\core\shape_base.py", line 289, in vstack
    return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.04 GiB for an array with shape (20940, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 170, in _reorder_cols
    right=original_df[[col for col in original_df if col in columns]],
          ~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 3908, in __getitem__
    data = self._take_with_is_copy(indexer, axis=1)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4088, in _take_with_is_copy
    result = self.take(indices=indices, axis=axis)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4068, in take
    new_data = self._mgr.take(
               ^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 877, in take
    return self.reindex_indexer(
           ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21008, 13084) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 233, in transform
    X = to_df(X, index=getattr(y, "index", None))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\utils\generic.py", line 109, in to_df
    data = data.rename(columns=lambda col: str(col))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5518, in rename
    return super()._rename(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 1059, in _rename
    result = self if inplace else self.copy(deep=copy and not using_copy_on_write())
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 6685, in copy
    data = self._mgr.copy(deep=deep)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 587, in copy
    res._consolidate_inplace()
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 1750, in _consolidate_inplace
    self.blocks = _consolidate(self.blocks)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2217, in _consolidate
    merged_blocks, _ = _merge_blocks(
                       ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2249, in _merge_blocks
    new_values = new_values[argsort]
                 ~~~~~~~~~~^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (20995, 13084) and data type float64

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2025-08-29 17:44:48,634:INFO:Calculating mean and std
2025-08-29 17:44:48,658:INFO:Creating metrics dataframe
2025-08-29 17:44:48,769:INFO:Uploading results into container
2025-08-29 17:44:48,772:INFO:Uploading model into container now
2025-08-29 17:44:48,779:INFO:_master_model_container: 3
2025-08-29 17:44:48,779:INFO:_display_container: 2
2025-08-29 17:44:48,789:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-08-29 17:44:48,789:INFO:create_model() successfully completed......................................
2025-08-29 17:44:49,484:INFO:SubProcess create_model() end ==================================
2025-08-29 17:44:49,484:INFO:Creating metrics dataframe
2025-08-29 17:44:49,488:INFO:Initializing Extra Trees Classifier
2025-08-29 17:44:49,488:INFO:Total runtime is 11.235725132624308 minutes
2025-08-29 17:44:49,488:INFO:SubProcess create_model() called ==================================
2025-08-29 17:44:49,489:INFO:Initializing create_model()
2025-08-29 17:44:49,489:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000268962C0910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 17:44:49,489:INFO:Checking exceptions
2025-08-29 17:44:49,489:INFO:Importing libraries
2025-08-29 17:44:49,490:INFO:Copying training dataset
2025-08-29 17:44:49,502:INFO:Defining folds
2025-08-29 17:44:49,503:INFO:Declaring metric variables
2025-08-29 17:44:49,503:INFO:Importing untrained model
2025-08-29 17:44:49,503:INFO:Extra Trees Classifier Imported successfully
2025-08-29 17:44:49,503:INFO:Starting cross validation
2025-08-29 17:44:49,549:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-29 17:49:12,579:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:12,599:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:12,611:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:13,849:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:13,859:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:13,868:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:15,777:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:15,790:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:15,799:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:17,125:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:17,134:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:17,142:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:18,291:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:18,298:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:18,307:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:49:18,363:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
5 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 372, in transform
    X = X.drop(col, axis=1)
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21038, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 176, in _reorder_cols
    new_df = new_df.drop(new_df.filter(regex="__drop__$").columns, axis=1)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21042, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 372, in transform
    X = X.drop(col, axis=1)
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21058, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 169, in _reorder_cols
    new_df = df.merge(
             ^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 10487, in merge
    return merge(
           ^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 183, in merge
    return op.get_result(copy=copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 885, in get_result
    result = self._reindex_and_concat(
             ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 876, in _reindex_and_concat
    result = concat([left, right], axis=1, copy=copy)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 393, in concat
    return op.get_result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 680, in get_result
    new_data = concatenate_managers(
               ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 131, in concatenate_managers
    mgrs = _maybe_reindex_columns_na_proxy(axes, mgrs_indexers, needs_copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 230, in _maybe_reindex_columns_na_proxy
    mgr = mgr.copy()
          ^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 576, in copy
    res = self.apply("copy", deep=deep)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 354, in apply
    applied = getattr(b, f)(**kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 645, in copy
    values = values.copy()
             ^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.04 GiB for an array with shape (20948, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 263, in transform
    new_X = self._prepare_df(X, output)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 196, in _prepare_df
    return self._reorder_cols(out, X)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 169, in _reorder_cols
    new_df = df.merge(
             ^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 10487, in merge
    return merge(
           ^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 183, in merge
    return op.get_result(copy=copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 885, in get_result
    result = self._reindex_and_concat(
             ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\merge.py", line 876, in _reindex_and_concat
    result = concat([left, right], axis=1, copy=copy)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 393, in concat
    return op.get_result()
           ^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\reshape\concat.py", line 680, in get_result
    new_data = concatenate_managers(
               ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 131, in concatenate_managers
    mgrs = _maybe_reindex_columns_na_proxy(axes, mgrs_indexers, needs_copy)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\concat.py", line 230, in _maybe_reindex_columns_na_proxy
    mgr = mgr.copy()
          ^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 576, in copy
    res = self.apply("copy", deep=deep)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 354, in apply
    applied = getattr(b, f)(**kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 645, in copy
    values = values.copy()
             ^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (20996, 13084) and data type float64

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2025-08-29 17:49:18,385:INFO:Calculating mean and std
2025-08-29 17:49:18,398:INFO:Creating metrics dataframe
2025-08-29 17:49:18,454:INFO:Uploading results into container
2025-08-29 17:49:18,456:INFO:Uploading model into container now
2025-08-29 17:49:18,460:INFO:_master_model_container: 4
2025-08-29 17:49:18,460:INFO:_display_container: 2
2025-08-29 17:49:18,467:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-29 17:49:18,467:INFO:create_model() successfully completed......................................
2025-08-29 17:49:19,040:WARNING:create_model() for ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False) raised an exception or returned all 0.0, trying without fit_kwargs:
2025-08-29 17:49:19,042:WARNING:Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py", line 797, in compare_models
    np.sum(
AssertionError

2025-08-29 17:49:19,043:INFO:Initializing create_model()
2025-08-29 17:49:19,043:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000268962C0910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 17:49:19,043:INFO:Checking exceptions
2025-08-29 17:49:19,043:INFO:Importing libraries
2025-08-29 17:49:19,043:INFO:Copying training dataset
2025-08-29 17:49:19,055:INFO:Defining folds
2025-08-29 17:49:19,055:INFO:Declaring metric variables
2025-08-29 17:49:19,056:INFO:Importing untrained model
2025-08-29 17:49:19,056:INFO:Extra Trees Classifier Imported successfully
2025-08-29 17:49:19,056:INFO:Starting cross validation
2025-08-29 17:49:19,105:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-29 17:54:26,313:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:26,330:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:26,341:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:28,009:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:28,025:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:28,039:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:28,128:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:28,144:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:28,155:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:30,378:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:30,387:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:30,395:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:30,961:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:30,970:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:30,977:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:32,781:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:32,790:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:32,797:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:54:32,858:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
4 fits failed out of a total of 10.
The score on these train-test partitions for these parameters will be set to 0.0.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 233, in transform
    X = to_df(X, index=getattr(y, "index", None))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\utils\generic.py", line 109, in to_df
    data = data.rename(columns=lambda col: str(col))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5518, in rename
    return super()._rename(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 1059, in _rename
    result = self if inplace else self.copy(deep=copy and not using_copy_on_write())
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 6685, in copy
    data = self._mgr.copy(deep=deep)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 587, in copy
    res._consolidate_inplace()
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 1750, in _consolidate_inplace
    self.blocks = _consolidate(self.blocks)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2217, in _consolidate
    merged_blocks, _ = _merge_blocks(
                       ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2242, in _merge_blocks
    new_values = np.vstack([b.values for b in blocks])  # type: ignore[misc]
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\numpy\core\shape_base.py", line 289, in vstack
    return _nx.concatenate(arrs, 0, dtype=dtype, casting=casting)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.04 GiB for an array with shape (20940, 13083) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 372, in transform
    X = X.drop(col, axis=1)
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (21007, 13084) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 233, in transform
    X = to_df(X, index=getattr(y, "index", None))
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\utils\generic.py", line 109, in to_df
    data = data.rename(columns=lambda col: str(col))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5518, in rename
    return super()._rename(
           ^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 1059, in _rename
    result = self if inplace else self.copy(deep=copy and not using_copy_on_write())
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 6685, in copy
    data = self._mgr.copy(deep=deep)
           ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 587, in copy
    res._consolidate_inplace()
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 1750, in _consolidate_inplace
    self.blocks = _consolidate(self.blocks)
                  ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2217, in _consolidate
    merged_blocks, _ = _merge_blocks(
                       ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 2249, in _merge_blocks
    new_values = new_values[argsort]
                 ~~~~~~~~~~^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.05 GiB for an array with shape (20995, 13084) and data type float64

--------------------------------------------------------------------------------
1 fits failed with the following error:
Traceback (most recent call last):
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 273, in fit
    X, y, _ = self._fit(X, y, routed_params)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 256, in _fit
    X, y = self._memory_transform(
           ^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py", line 80, in _transform_one
    output = transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 255, in transform
    output = self.transformer.transform(*args)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\utils\_set_output.py", line 295, in wrapped
    data_to_wrap = f(self, X, *args, **kwargs)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\preprocess\transformers.py", line 372, in transform
    X = X.drop(col, axis=1)
        ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\frame.py", line 5344, in drop
    return super().drop(
           ^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4711, in drop
    obj = obj._drop_axis(labels, axis, level=level, errors=errors)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\generic.py", line 4792, in _drop_axis
    new_mgr = self._mgr.reindex_indexer(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 663, in reindex_indexer
    new_blocks = self._slice_take_blocks_ax0(
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\managers.py", line 826, in _slice_take_blocks_ax0
    nb = blk.take_nd(taker, axis=0, new_mgr_locs=mgr_locs)
         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\internals\blocks.py", line 1061, in take_nd
    new_values = algos.take_nd(
                 ^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 118, in take_nd
    return _take_nd_ndarray(arr, indexer, axis, fill_value, allow_fill)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pandas\core\array_algos\take.py", line 158, in _take_nd_ndarray
    out = np.empty(out_shape, dtype=dtype)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
numpy.core._exceptions._ArrayMemoryError: Unable to allocate 2.04 GiB for an array with shape (20960, 13084) and data type float64

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2025-08-29 17:54:32,889:INFO:Calculating mean and std
2025-08-29 17:54:32,895:INFO:Creating metrics dataframe
2025-08-29 17:54:32,977:INFO:Uploading results into container
2025-08-29 17:54:32,981:INFO:Uploading model into container now
2025-08-29 17:54:32,986:INFO:_master_model_container: 5
2025-08-29 17:54:32,986:INFO:_display_container: 2
2025-08-29 17:54:32,996:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-29 17:54:32,996:INFO:create_model() successfully completed......................................
2025-08-29 17:54:33,707:INFO:SubProcess create_model() end ==================================
2025-08-29 17:54:33,707:INFO:Creating metrics dataframe
2025-08-29 17:54:33,711:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-08-29 17:54:33,712:INFO:Initializing create_model()
2025-08-29 17:54:33,712:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 17:54:33,713:INFO:Checking exceptions
2025-08-29 17:54:33,713:INFO:Importing libraries
2025-08-29 17:54:33,714:INFO:Copying training dataset
2025-08-29 17:54:33,727:INFO:Defining folds
2025-08-29 17:54:33,727:INFO:Declaring metric variables
2025-08-29 17:54:33,727:INFO:Importing untrained model
2025-08-29 17:54:33,727:INFO:Declaring custom model
2025-08-29 17:54:33,728:INFO:Extra Trees Classifier Imported successfully
2025-08-29 17:54:33,773:INFO:Cross validation set to False
2025-08-29 17:54:33,773:INFO:Fitting Model
2025-08-29 17:55:36,997:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-29 17:55:36,997:INFO:create_model() successfully completed......................................
2025-08-29 17:55:37,101:INFO:Creating Dashboard logs
2025-08-29 17:55:37,102:INFO:Model: Extra Trees Classifier
2025-08-29 17:55:37,156:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-29 17:55:37,283:INFO:Initializing predict_model()
2025-08-29 17:55:37,283:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000268991C80E0>)
2025-08-29 17:55:37,284:INFO:Checking exceptions
2025-08-29 17:55:37,284:INFO:Preloading libraries
2025-08-29 17:55:42,968:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:55:42,996:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:55:43,022:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 17:55:43,228:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\_distutils_hack\__init__.py:32: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-29 17:55:47,844:INFO:Creating Dashboard logs
2025-08-29 17:55:47,844:INFO:Model: Random Forest Classifier
2025-08-29 17:55:47,887:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-29 17:55:48,199:INFO:_master_model_container: 5
2025-08-29 17:55:48,199:INFO:_display_container: 2
2025-08-29 17:55:48,199:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-29 17:55:48,199:INFO:compare_models() successfully completed......................................
2025-08-29 17:55:48,201:INFO:Initializing plot_model()
2025-08-29 17:55:48,201:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False), plot=feature, scale=1, save=True, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-29 17:55:48,201:INFO:Checking exceptions
2025-08-29 17:55:48,241:INFO:Preloading libraries
2025-08-29 17:55:48,320:INFO:Copying training dataset
2025-08-29 17:55:48,321:INFO:Plot type: feature
2025-08-29 17:55:48,321:WARNING:No coef_ found. Trying feature_importances_
2025-08-29 17:55:55,118:INFO:Saving 'Feature Importance.png'
2025-08-29 17:55:55,285:INFO:Visual Rendered Successfully
2025-08-29 17:55:55,394:INFO:plot_model() successfully completed......................................
2025-08-29 17:55:55,404:INFO:Initializing finalize_model()
2025-08-29 17:55:55,404:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-08-29 17:55:55,404:INFO:Finalizing ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-29 17:55:55,407:INFO:Initializing create_model()
2025-08-29 17:55:55,407:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000026892EF6490>, estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 17:55:55,407:INFO:Checking exceptions
2025-08-29 17:55:55,408:INFO:Importing libraries
2025-08-29 17:55:55,408:INFO:Copying training dataset
2025-08-29 17:55:55,408:INFO:Defining folds
2025-08-29 17:55:55,408:INFO:Declaring metric variables
2025-08-29 17:55:55,409:INFO:Importing untrained model
2025-08-29 17:55:55,409:INFO:Declaring custom model
2025-08-29 17:55:55,409:INFO:Extra Trees Classifier Imported successfully
2025-08-29 17:55:55,450:INFO:Cross validation set to False
2025-08-29 17:55:55,450:INFO:Fitting Model
2025-08-29 17:57:38,247:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=123, verbose=0,
                                      warm_start=False))],
         verbose=False)
2025-08-29 17:57:38,247:INFO:create_model() successfully completed......................................
2025-08-29 17:57:38,355:INFO:Creating Dashboard logs
2025-08-29 17:57:38,356:INFO:Model: Extra Trees Classifier
2025-08-29 17:57:38,399:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-29 17:57:38,977:INFO:_master_model_container: 5
2025-08-29 17:57:38,977:INFO:_display_container: 2
2025-08-29 17:57:38,998:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=123, verbose=0,
                                      warm_start=False))],
         verbose=False)
2025-08-29 17:57:38,998:INFO:finalize_model() successfully completed......................................
2025-08-29 17:57:39,143:INFO:Initializing save_model()
2025-08-29 17:57:39,143:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=123, verbose=0,
                                      warm_start=False))],
         verbose=False), model_name=models\sentiment_model_v2, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None,
                                    include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-29 17:57:39,143:INFO:Adding model into prep_pipe
2025-08-29 17:57:39,143:WARNING:Only Model saved as it was a pipeline.
2025-08-29 17:57:39,497:INFO:models\sentiment_model_v2.pkl saved in current working directory
2025-08-29 17:57:39,518:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=['score'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean...
                 ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                      class_weight=None, criterion='gini',
                                      max_depth=None, max_features='sqrt',
                                      max_leaf_nodes=None, max_samples=None,
                                      min_impurity_decrease=0.0,
                                      min_samples_leaf=1, min_samples_split=2,
                                      min_weight_fraction_leaf=0.0,
                                      monotonic_cst=None, n_estimators=100,
                                      n_jobs=-1, oob_score=False,
                                      random_state=123, verbose=0,
                                      warm_start=False))],
         verbose=False)
2025-08-29 17:57:39,519:INFO:save_model() successfully completed......................................
2025-08-29 18:45:42,835:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 18:45:42,836:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 18:45:42,836:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 18:45:42,836:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 18:45:45,499:INFO:Initializing load_model()
2025-08-29 18:45:45,499:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 18:46:00,404:WARNING:C:\Users\fabri\Desktop\Portfolio\proyecto-mlops\app.py:68: UserWarning:

Starting a Matplotlib GUI outside of the main thread will likely fail.


2025-08-29 19:10:56,690:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:10:56,690:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:10:56,690:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:10:56,690:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:10:58,981:INFO:Initializing load_model()
2025-08-29 19:10:58,982:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 19:11:57,677:WARNING:C:\Users\fabri\Desktop\Portfolio\proyecto-mlops\app.py:68: UserWarning:

Starting a Matplotlib GUI outside of the main thread will likely fail.


2025-08-29 19:22:23,286:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:22:23,286:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:22:23,287:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:22:23,287:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:22:25,888:INFO:Initializing load_model()
2025-08-29 19:22:25,888:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 19:30:58,838:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:30:58,838:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:30:58,838:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:30:58,838:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:31:00,453:INFO:Initializing load_model()
2025-08-29 19:31:00,453:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 19:31:01,030:INFO:Initializing predict_model()
2025-08-29 19:31:01,031:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001EBAC527410>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['score'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['brand', 'comment_id', 'subreddit',
                                             'created_utc', 'emotion',
                                             'entities', 'topic'],
                                    transformer=...
                                    transformer=OneHotEncoder(cols=['subreddit',
                                                                    'emotion',
                                                                    'topic'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001EBA87B7420>)
2025-08-29 19:31:01,031:INFO:Checking exceptions
2025-08-29 19:31:01,031:INFO:Preloading libraries
2025-08-29 19:31:01,031:INFO:Set up data.
2025-08-29 19:31:01,083:INFO:Set up index.
2025-08-29 19:34:34,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:34:34,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:34:34,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:34:34,715:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:34:36,473:INFO:Initializing load_model()
2025-08-29 19:34:36,474:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 19:34:37,011:INFO:Initializing predict_model()
2025-08-29 19:34:37,012:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FE26ECB3D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['score'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['brand', 'comment_id', 'subreddit',
                                             'created_utc', 'emotion',
                                             'entities', 'topic'],
                                    transformer=...
                                    transformer=OneHotEncoder(cols=['subreddit',
                                                                    'emotion',
                                                                    'topic'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FE22F37420>)
2025-08-29 19:34:37,012:INFO:Checking exceptions
2025-08-29 19:34:37,012:INFO:Preloading libraries
2025-08-29 19:34:37,012:INFO:Set up data.
2025-08-29 19:34:37,064:INFO:Set up index.
2025-08-29 19:37:28,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:37:28,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:37:28,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:37:28,897:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:37:31,600:INFO:Initializing load_model()
2025-08-29 19:37:31,600:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 19:37:32,059:INFO:Initializing predict_model()
2025-08-29 19:37:32,059:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000243CE78F150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=['score'],
                                    transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['brand', 'comment_id', 'subreddit',
                                             'created_utc', 'emotion',
                                             'entities', 'topic'],
                                    transformer=...
                                    transformer=OneHotEncoder(cols=['subreddit',
                                                                    'emotion',
                                                                    'topic'],
                                                              handle_missing='return_nan',
                                                              use_cat_names=True))),
                ('rest_encoding',
                 TransformerWrapper(include=['comment_id', 'created_utc',
                                             'entities'],
                                    transformer=TargetEncoder(cols=['comment_id',
                                                                    'created_utc',
                                                                    'entities'],
                                                              handle_missing='return_nan'))),
                ('actual_estimator',
                 ExtraTreesClassifier(n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000243D19F4040>)
2025-08-29 19:37:32,059:INFO:Checking exceptions
2025-08-29 19:37:32,059:INFO:Preloading libraries
2025-08-29 19:37:32,060:INFO:Set up data.
2025-08-29 19:48:35,677:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:48:35,677:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:48:35,677:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:48:35,677:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:48:38,300:INFO:PyCaret ClassificationExperiment
2025-08-29 19:48:38,300:INFO:Logging name: reddit_sentiment_analysis_intel_amd
2025-08-29 19:48:38,300:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-29 19:48:38,300:INFO:version 3.3.2
2025-08-29 19:48:38,300:INFO:Initializing setup()
2025-08-29 19:48:38,300:INFO:self.USI: 6e12
2025-08-29 19:48:38,300:INFO:self._variable_keys: {'memory', 'logging_param', 'idx', 'data', 'gpu_n_jobs_param', 'exp_name_log', 'y_train', 'is_multiclass', 'target_param', 'n_jobs_param', 'X', '_ml_usecase', 'html_param', 'y_test', 'y', 'fold_generator', 'pipeline', 'X_test', 'USI', '_available_plots', 'fold_shuffle_param', 'exp_id', 'fold_groups_param', 'fix_imbalance', 'gpu_param', 'log_plots_param', 'seed', 'X_train'}
2025-08-29 19:48:38,300:INFO:Checking environment
2025-08-29 19:48:38,300:INFO:python_version: 3.11.13
2025-08-29 19:48:38,301:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-29 19:48:38,301:INFO:machine: AMD64
2025-08-29 19:48:38,329:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-29 19:48:38,329:INFO:Memory: svmem(total=34293444608, available=12991016960, percent=62.1, used=21302427648, free=12991016960)
2025-08-29 19:48:38,330:INFO:Physical Core: 6
2025-08-29 19:48:38,330:INFO:Logical Core: 12
2025-08-29 19:48:38,330:INFO:Checking libraries
2025-08-29 19:48:38,330:INFO:System:
2025-08-29 19:48:38,330:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-29 19:48:38,330:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-29 19:48:38,330:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-29 19:48:38,330:INFO:PyCaret required dependencies:
2025-08-29 19:48:38,392:INFO:                 pip: 25.1
2025-08-29 19:48:38,392:INFO:          setuptools: 72.1.0
2025-08-29 19:48:38,392:INFO:             pycaret: 3.3.2
2025-08-29 19:48:38,392:INFO:             IPython: 9.4.0
2025-08-29 19:48:38,392:INFO:          ipywidgets: 8.1.7
2025-08-29 19:48:38,392:INFO:                tqdm: 4.67.1
2025-08-29 19:48:38,392:INFO:               numpy: 1.26.4
2025-08-29 19:48:38,392:INFO:              pandas: 2.1.4
2025-08-29 19:48:38,392:INFO:              jinja2: 3.1.6
2025-08-29 19:48:38,392:INFO:               scipy: 1.11.4
2025-08-29 19:48:38,392:INFO:              joblib: 1.3.2
2025-08-29 19:48:38,392:INFO:             sklearn: 1.4.2
2025-08-29 19:48:38,392:INFO:                pyod: 2.0.5
2025-08-29 19:48:38,392:INFO:            imblearn: 0.14.0
2025-08-29 19:48:38,392:INFO:   category_encoders: 2.7.0
2025-08-29 19:48:38,393:INFO:            lightgbm: 4.6.0
2025-08-29 19:48:38,393:INFO:               numba: 0.61.2
2025-08-29 19:48:38,393:INFO:            requests: 2.32.4
2025-08-29 19:48:38,393:INFO:          matplotlib: 3.7.5
2025-08-29 19:48:38,393:INFO:          scikitplot: 0.3.7
2025-08-29 19:48:38,393:INFO:         yellowbrick: 1.5
2025-08-29 19:48:38,393:INFO:              plotly: 5.24.1
2025-08-29 19:48:38,393:INFO:    plotly-resampler: Not installed
2025-08-29 19:48:38,393:INFO:             kaleido: 1.0.0
2025-08-29 19:48:38,393:INFO:           schemdraw: 0.15
2025-08-29 19:48:38,393:INFO:         statsmodels: 0.14.5
2025-08-29 19:48:38,393:INFO:              sktime: 0.26.0
2025-08-29 19:48:38,393:INFO:               tbats: 1.1.3
2025-08-29 19:48:38,393:INFO:            pmdarima: 2.0.4
2025-08-29 19:48:38,393:INFO:              psutil: 7.0.0
2025-08-29 19:48:38,393:INFO:          markupsafe: 3.0.2
2025-08-29 19:48:38,393:INFO:             pickle5: Not installed
2025-08-29 19:48:38,393:INFO:         cloudpickle: 3.1.1
2025-08-29 19:48:38,393:INFO:         deprecation: 2.1.0
2025-08-29 19:48:38,393:INFO:              xxhash: 3.5.0
2025-08-29 19:48:38,393:INFO:           wurlitzer: Not installed
2025-08-29 19:48:38,394:INFO:PyCaret optional dependencies:
2025-08-29 19:48:41,038:INFO:                shap: 0.48.0
2025-08-29 19:48:41,038:INFO:           interpret: Not installed
2025-08-29 19:48:41,038:INFO:                umap: Not installed
2025-08-29 19:48:41,038:INFO:     ydata_profiling: Not installed
2025-08-29 19:48:41,038:INFO:  explainerdashboard: Not installed
2025-08-29 19:48:41,038:INFO:             autoviz: Not installed
2025-08-29 19:48:41,038:INFO:           fairlearn: Not installed
2025-08-29 19:48:41,038:INFO:          deepchecks: Not installed
2025-08-29 19:48:41,038:INFO:             xgboost: Not installed
2025-08-29 19:48:41,038:INFO:            catboost: Not installed
2025-08-29 19:48:41,038:INFO:              kmodes: Not installed
2025-08-29 19:48:41,038:INFO:             mlxtend: Not installed
2025-08-29 19:48:41,038:INFO:       statsforecast: Not installed
2025-08-29 19:48:41,038:INFO:        tune_sklearn: Not installed
2025-08-29 19:48:41,038:INFO:                 ray: Not installed
2025-08-29 19:48:41,038:INFO:            hyperopt: Not installed
2025-08-29 19:48:41,039:INFO:              optuna: Not installed
2025-08-29 19:48:41,039:INFO:               skopt: Not installed
2025-08-29 19:48:41,039:INFO:              mlflow: 3.3.2
2025-08-29 19:48:41,039:INFO:              gradio: 5.44.1
2025-08-29 19:48:41,039:INFO:             fastapi: 0.116.1
2025-08-29 19:48:41,039:INFO:             uvicorn: 0.35.0
2025-08-29 19:48:41,039:INFO:              m2cgen: Not installed
2025-08-29 19:48:41,039:INFO:           evidently: Not installed
2025-08-29 19:48:41,039:INFO:               fugue: Not installed
2025-08-29 19:48:41,039:INFO:           streamlit: 1.49.0
2025-08-29 19:48:41,039:INFO:             prophet: Not installed
2025-08-29 19:48:41,039:INFO:None
2025-08-29 19:48:41,039:INFO:Set up data.
2025-08-29 19:48:41,150:INFO:Set up folding strategy.
2025-08-29 19:48:41,150:INFO:Set up train/test split.
2025-08-29 19:48:41,208:INFO:Set up index.
2025-08-29 19:48:41,209:INFO:Assigning column types.
2025-08-29 19:48:41,212:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-29 19:48:41,251:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-29 19:48:41,255:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:48:41,289:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,289:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,329:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-29 19:48:41,330:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:48:41,354:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,355:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,355:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-29 19:48:41,394:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:48:41,421:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,422:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,463:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:48:41,490:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,490:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,490:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-29 19:48:41,557:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,557:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,624:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,625:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:48:41,628:INFO:Preparing preprocessing pipeline...
2025-08-29 19:48:41,630:INFO:Set up label encoding.
2025-08-29 19:48:41,630:INFO:Set up simple imputation.
2025-08-29 19:48:41,630:INFO:Set up text embedding.
2025-08-29 19:48:41,634:INFO:Set up encoding of ordinal features.
2025-08-29 19:48:41,635:INFO:Set up encoding of categorical features.
2025-08-29 19:48:59,114:INFO:Finished creating preprocessing pipeline.
2025-08-29 19:48:59,134:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-08-29 19:48:59,134:INFO:Creating final display dataframe.
2025-08-29 19:49:13,407:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pipeline.py:111: UserWarning: Persisting input arguments took 0.59s to run.If this happens often in your code, it can cause performance problems (results will be correct in all cases). The reason for this is probably some large input arguments for a wrapped function.
  X, y = pipeline._memory_transform(transformer, X, y)

2025-08-29 19:49:45,669:INFO:Setup _display_container:                        Description                                 Value
0                       Session id                                   123
1                           Target                             sentiment
2                      Target type                            Multiclass
3                   Target mapping  Negative: 0, Neutral: 1, Positive: 2
4              Original data shape                           (20768, 10)
5           Transformed data shape                        (20768, 22060)
6      Transformed train set shape                        (14537, 22060)
7       Transformed test set shape                         (6231, 22060)
8                  Ignore features                                     7
9                    Text features                                     1
10            Categorical features                                     1
11                      Preprocess                                  True
12                 Imputation type                                simple
13              Numeric imputation                                  mean
14          Categorical imputation                                  mode
15  Text features embedding method                                tf-idf
16        Maximum one-hot encoding                                    25
17                 Encoding method                                  None
18                  Fold Generator                       StratifiedKFold
19                     Fold Number                                    10
20                        CPU Jobs                                    -1
21                         Use GPU                                 False
22                  Log Experiment                          MlflowLogger
23                 Experiment Name   reddit_sentiment_analysis_intel_amd
24                             USI                                  6e12
2025-08-29 19:49:45,735:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:49:45,736:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:49:45,801:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:49:45,802:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:49:45,803:INFO:Logging experiment in loggers
2025-08-29 19:49:46,344:INFO:SubProcess save_model() called ==================================
2025-08-29 19:49:46,374:INFO:Initializing save_model()
2025-08-29 19:49:46,374:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), model_name=C:\Users\fabri\AppData\Local\Temp\tmpxyc5epf8\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-29 19:49:46,374:INFO:Adding model into prep_pipe
2025-08-29 19:49:46,375:WARNING:Only Model saved as it was a pipeline.
2025-08-29 19:49:46,522:INFO:C:\Users\fabri\AppData\Local\Temp\tmpxyc5epf8\Transformation Pipeline.pkl saved in current working directory
2025-08-29 19:49:46,541:INFO:Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-08-29 19:49:46,541:INFO:save_model() successfully completed......................................
2025-08-29 19:49:46,663:INFO:SubProcess save_model() end ==================================
2025-08-29 19:49:46,680:INFO:setup() successfully completed in 67.61s...............
2025-08-29 19:49:46,680:INFO:Initializing compare_models()
2025-08-29 19:49:46,680:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025028F46490>, include=['lightgbm', 'rf', 'et'], exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000025028F46490>, 'include': ['lightgbm', 'rf', 'et'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-08-29 19:49:46,680:INFO:Checking exceptions
2025-08-29 19:49:46,683:INFO:Preparing display monitor
2025-08-29 19:49:46,688:INFO:Initializing Light Gradient Boosting Machine
2025-08-29 19:49:46,688:INFO:Total runtime is 0.0 minutes
2025-08-29 19:49:46,688:INFO:SubProcess create_model() called ==================================
2025-08-29 19:49:46,689:INFO:Initializing create_model()
2025-08-29 19:49:46,689:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000025028F46490>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002502C6E8150>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 19:49:46,689:INFO:Checking exceptions
2025-08-29 19:49:46,689:INFO:Importing libraries
2025-08-29 19:49:46,689:INFO:Copying training dataset
2025-08-29 19:49:46,693:INFO:Defining folds
2025-08-29 19:49:46,693:INFO:Declaring metric variables
2025-08-29 19:49:46,693:INFO:Importing untrained model
2025-08-29 19:49:46,694:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-29 19:49:46,694:INFO:Starting cross validation
2025-08-29 19:49:46,719:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-08-29 19:52:38,178:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:38,179:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:38,179:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:38,179:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:49,701:INFO:PyCaret ClassificationExperiment
2025-08-29 19:52:49,701:INFO:Logging name: reddit_sentiment_analysis_intel_amd
2025-08-29 19:52:49,701:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-08-29 19:52:49,701:INFO:version 3.3.2
2025-08-29 19:52:49,701:INFO:Initializing setup()
2025-08-29 19:52:49,701:INFO:self.USI: e11b
2025-08-29 19:52:49,701:INFO:self._variable_keys: {'USI', 'gpu_param', 'logging_param', 'html_param', '_available_plots', 'seed', 'exp_id', 'idx', 'fold_shuffle_param', 'gpu_n_jobs_param', 'exp_name_log', 'X', 'y', 'memory', 'fix_imbalance', 'pipeline', 'fold_generator', 'log_plots_param', 'X_test', 'y_train', 'target_param', 'n_jobs_param', 'fold_groups_param', 'X_train', 'y_test', '_ml_usecase', 'data', 'is_multiclass'}
2025-08-29 19:52:49,701:INFO:Checking environment
2025-08-29 19:52:49,701:INFO:python_version: 3.11.13
2025-08-29 19:52:49,701:INFO:python_build: ('main', 'Jun  5 2025 13:03:15')
2025-08-29 19:52:49,701:INFO:machine: AMD64
2025-08-29 19:52:49,728:INFO:platform: Windows-10-10.0.26100-SP0
2025-08-29 19:52:49,729:INFO:Memory: svmem(total=34293444608, available=23185416192, percent=32.4, used=11108028416, free=23185416192)
2025-08-29 19:52:49,729:INFO:Physical Core: 6
2025-08-29 19:52:49,729:INFO:Logical Core: 12
2025-08-29 19:52:49,729:INFO:Checking libraries
2025-08-29 19:52:49,729:INFO:System:
2025-08-29 19:52:49,729:INFO:    python: 3.11.13 | packaged by Anaconda, Inc. | (main, Jun  5 2025, 13:03:15) [MSC v.1929 64 bit (AMD64)]
2025-08-29 19:52:49,729:INFO:executable: C:\Users\fabri\anaconda3\envs\nlp311\python.exe
2025-08-29 19:52:49,730:INFO:   machine: Windows-10-10.0.26100-SP0
2025-08-29 19:52:49,730:INFO:PyCaret required dependencies:
2025-08-29 19:52:49,810:INFO:                 pip: 25.1
2025-08-29 19:52:49,811:INFO:          setuptools: 72.1.0
2025-08-29 19:52:49,811:INFO:             pycaret: 3.3.2
2025-08-29 19:52:49,811:INFO:             IPython: 9.4.0
2025-08-29 19:52:49,811:INFO:          ipywidgets: 8.1.7
2025-08-29 19:52:49,811:INFO:                tqdm: 4.67.1
2025-08-29 19:52:49,811:INFO:               numpy: 1.26.4
2025-08-29 19:52:49,811:INFO:              pandas: 2.1.4
2025-08-29 19:52:49,811:INFO:              jinja2: 3.1.6
2025-08-29 19:52:49,811:INFO:               scipy: 1.11.4
2025-08-29 19:52:49,811:INFO:              joblib: 1.3.2
2025-08-29 19:52:49,811:INFO:             sklearn: 1.4.2
2025-08-29 19:52:49,811:INFO:                pyod: 2.0.5
2025-08-29 19:52:49,811:INFO:            imblearn: 0.14.0
2025-08-29 19:52:49,811:INFO:   category_encoders: 2.7.0
2025-08-29 19:52:49,811:INFO:            lightgbm: 4.6.0
2025-08-29 19:52:49,811:INFO:               numba: 0.61.2
2025-08-29 19:52:49,811:INFO:            requests: 2.32.4
2025-08-29 19:52:49,811:INFO:          matplotlib: 3.7.5
2025-08-29 19:52:49,812:INFO:          scikitplot: 0.3.7
2025-08-29 19:52:49,812:INFO:         yellowbrick: 1.5
2025-08-29 19:52:49,812:INFO:              plotly: 5.24.1
2025-08-29 19:52:49,812:INFO:    plotly-resampler: Not installed
2025-08-29 19:52:49,812:INFO:             kaleido: 1.0.0
2025-08-29 19:52:49,812:INFO:           schemdraw: 0.15
2025-08-29 19:52:49,812:INFO:         statsmodels: 0.14.5
2025-08-29 19:52:49,812:INFO:              sktime: 0.26.0
2025-08-29 19:52:49,812:INFO:               tbats: 1.1.3
2025-08-29 19:52:49,812:INFO:            pmdarima: 2.0.4
2025-08-29 19:52:49,812:INFO:              psutil: 7.0.0
2025-08-29 19:52:49,812:INFO:          markupsafe: 3.0.2
2025-08-29 19:52:49,812:INFO:             pickle5: Not installed
2025-08-29 19:52:49,812:INFO:         cloudpickle: 3.1.1
2025-08-29 19:52:49,812:INFO:         deprecation: 2.1.0
2025-08-29 19:52:49,812:INFO:              xxhash: 3.5.0
2025-08-29 19:52:49,812:INFO:           wurlitzer: Not installed
2025-08-29 19:52:49,812:INFO:PyCaret optional dependencies:
2025-08-29 19:52:53,555:INFO:                shap: 0.48.0
2025-08-29 19:52:53,556:INFO:           interpret: Not installed
2025-08-29 19:52:53,556:INFO:                umap: Not installed
2025-08-29 19:52:53,556:INFO:     ydata_profiling: Not installed
2025-08-29 19:52:53,556:INFO:  explainerdashboard: Not installed
2025-08-29 19:52:53,556:INFO:             autoviz: Not installed
2025-08-29 19:52:53,556:INFO:           fairlearn: Not installed
2025-08-29 19:52:53,556:INFO:          deepchecks: Not installed
2025-08-29 19:52:53,556:INFO:             xgboost: Not installed
2025-08-29 19:52:53,556:INFO:            catboost: Not installed
2025-08-29 19:52:53,556:INFO:              kmodes: Not installed
2025-08-29 19:52:53,556:INFO:             mlxtend: Not installed
2025-08-29 19:52:53,556:INFO:       statsforecast: Not installed
2025-08-29 19:52:53,556:INFO:        tune_sklearn: Not installed
2025-08-29 19:52:53,556:INFO:                 ray: Not installed
2025-08-29 19:52:53,556:INFO:            hyperopt: Not installed
2025-08-29 19:52:53,556:INFO:              optuna: Not installed
2025-08-29 19:52:53,556:INFO:               skopt: Not installed
2025-08-29 19:52:53,556:INFO:              mlflow: 3.3.2
2025-08-29 19:52:53,556:INFO:              gradio: 5.44.1
2025-08-29 19:52:53,557:INFO:             fastapi: 0.116.1
2025-08-29 19:52:53,557:INFO:             uvicorn: 0.35.0
2025-08-29 19:52:53,557:INFO:              m2cgen: Not installed
2025-08-29 19:52:53,557:INFO:           evidently: Not installed
2025-08-29 19:52:53,557:INFO:               fugue: Not installed
2025-08-29 19:52:53,557:INFO:           streamlit: 1.49.0
2025-08-29 19:52:53,557:INFO:             prophet: Not installed
2025-08-29 19:52:53,557:INFO:None
2025-08-29 19:52:53,557:INFO:Set up GPU usage.
2025-08-29 19:52:53,557:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:53,557:WARNING:cuML is outdated or not found. Required version is >=23.08.
                Please visit https://rapids.ai/install for installation instructions.
2025-08-29 19:52:53,557:INFO:Set up data.
2025-08-29 19:52:53,664:INFO:Set up folding strategy.
2025-08-29 19:52:53,664:INFO:Set up train/test split.
2025-08-29 19:52:53,722:INFO:Set up index.
2025-08-29 19:52:53,724:INFO:Assigning column types.
2025-08-29 19:52:53,726:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-08-29 19:52:53,727:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:53,766:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-29 19:52:53,766:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:53,769:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:53,770:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:52:53,770:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:53,798:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:53,801:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:53,804:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:57,652:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:57,653:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,711:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-08-29 19:52:57,711:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,711:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,711:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:52:57,711:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,737:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,743:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,745:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:57,870:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:57,870:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-08-29 19:52:57,872:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,922:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,923:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:52:57,923:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,949:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,953:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:57,954:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,084:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,084:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,129:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,129:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,130:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-08-29 19:52:58,130:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,162:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,169:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,170:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,295:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,295:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-08-29 19:52:58,295:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,343:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,344:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,344:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,375:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,380:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,381:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,512:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,513:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,581:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,582:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,583:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,613:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,617:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:52:58,618:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,743:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:52:58,745:INFO:Preparing preprocessing pipeline...
2025-08-29 19:52:58,747:INFO:Set up label encoding.
2025-08-29 19:52:58,748:INFO:Set up simple imputation.
2025-08-29 19:52:58,748:INFO:Set up text embedding.
2025-08-29 19:52:58,751:INFO:Set up encoding of ordinal features.
2025-08-29 19:52:58,753:INFO:Set up encoding of categorical features.
2025-08-29 19:53:14,997:INFO:Finished creating preprocessing pipeline.
2025-08-29 19:53:15,015:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-08-29 19:53:15,015:INFO:Creating final display dataframe.
2025-08-29 19:53:41,914:INFO:Setup _display_container:                        Description                                 Value
0                       Session id                                   123
1                           Target                             sentiment
2                      Target type                            Multiclass
3                   Target mapping  Negative: 0, Neutral: 1, Positive: 2
4              Original data shape                           (20768, 10)
5           Transformed data shape                        (20768, 22060)
6      Transformed train set shape                        (14537, 22060)
7       Transformed test set shape                         (6231, 22060)
8                  Ignore features                                     7
9                    Text features                                     1
10            Categorical features                                     1
11                      Preprocess                                  True
12                 Imputation type                                simple
13              Numeric imputation                                  mean
14          Categorical imputation                                  mode
15  Text features embedding method                                tf-idf
16        Maximum one-hot encoding                                    25
17                 Encoding method                                  None
18                  Fold Generator                       StratifiedKFold
19                     Fold Number                                    10
20                        CPU Jobs                                    -1
21                         Use GPU                                  True
22                  Log Experiment                          MlflowLogger
23                 Experiment Name   reddit_sentiment_analysis_intel_amd
24                             USI                                  e11b
2025-08-29 19:53:41,914:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:41,954:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:41,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:41,955:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:41,976:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:41,980:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:41,981:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:53:42,158:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:53:42,159:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:42,209:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:42,209:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:42,210:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:42,238:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:42,242:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 19:53:42,244:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:53:42,378:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-08-29 19:53:42,380:INFO:Logging experiment in loggers
2025-08-29 19:53:43,016:INFO:SubProcess save_model() called ==================================
2025-08-29 19:53:43,044:INFO:Initializing save_model()
2025-08-29 19:53:43,044:INFO:save_model(model=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), model_name=C:\Users\fabri\AppData\Local\Temp\tmpxvj6g5db\Transformation Pipeline, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-29 19:53:43,044:INFO:Adding model into prep_pipe
2025-08-29 19:53:43,044:WARNING:Only Model saved as it was a pipeline.
2025-08-29 19:53:43,188:INFO:C:\Users\fabri\AppData\Local\Temp\tmpxvj6g5db\Transformation Pipeline.pkl saved in current working directory
2025-08-29 19:53:43,202:INFO:Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2025-08-29 19:53:43,203:INFO:save_model() successfully completed......................................
2025-08-29 19:53:43,350:INFO:SubProcess save_model() end ==================================
2025-08-29 19:53:43,364:INFO:setup() successfully completed in 53.02s...............
2025-08-29 19:53:43,364:INFO:Initializing compare_models()
2025-08-29 19:53:43,365:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, include=['lightgbm', 'rf', 'et'], exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, 'include': ['lightgbm', 'rf', 'et'], 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2025-08-29 19:53:43,365:INFO:Checking exceptions
2025-08-29 19:53:43,368:INFO:Preparing display monitor
2025-08-29 19:53:43,371:INFO:Initializing Light Gradient Boosting Machine
2025-08-29 19:53:43,371:INFO:Total runtime is 0.0 minutes
2025-08-29 19:53:43,371:INFO:SubProcess create_model() called ==================================
2025-08-29 19:53:43,371:INFO:Initializing create_model()
2025-08-29 19:53:43,372:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000129D54D6950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 19:53:43,372:INFO:Checking exceptions
2025-08-29 19:53:43,372:INFO:Importing libraries
2025-08-29 19:53:43,372:INFO:Copying training dataset
2025-08-29 19:53:43,375:INFO:Defining folds
2025-08-29 19:53:43,375:INFO:Declaring metric variables
2025-08-29 19:53:43,376:INFO:Importing untrained model
2025-08-29 19:53:43,376:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-29 19:53:43,376:INFO:Starting cross validation
2025-08-29 19:53:43,400:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=1
2025-08-29 19:54:05,020:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:54:05,074:INFO:[LightGBM] [Info] Total Bins 90431
2025-08-29 19:54:05,079:INFO:[LightGBM] [Info] Number of data points in the train set: 13083, number of used features: 2356
2025-08-29 19:54:05,158:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:54:05,158:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:54:09,183:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:54:09,185:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:54:09,187:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.001392 secs. 1 sparse feature groups
2025-08-29 19:54:09,195:INFO:[LightGBM] [Info] Start training from score -1.079309
2025-08-29 19:54:09,195:INFO:[LightGBM] [Info] Start training from score -0.731717
2025-08-29 19:54:09,195:INFO:[LightGBM] [Info] Start training from score -1.719882
2025-08-29 19:54:22,824:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:54:22,836:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:54:22,847:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:54:43,757:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:54:43,801:INFO:[LightGBM] [Info] Total Bins 90593
2025-08-29 19:54:43,807:INFO:[LightGBM] [Info] Number of data points in the train set: 13083, number of used features: 2341
2025-08-29 19:54:43,893:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:54:43,893:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:54:43,910:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:54:43,913:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:54:43,914:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.000866 secs. 1 sparse feature groups
2025-08-29 19:54:43,923:INFO:[LightGBM] [Info] Start training from score -1.079309
2025-08-29 19:54:43,924:INFO:[LightGBM] [Info] Start training from score -0.731717
2025-08-29 19:54:43,924:INFO:[LightGBM] [Info] Start training from score -1.719882
2025-08-29 19:54:56,436:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:54:56,448:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:54:56,460:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:55:19,550:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:55:19,602:INFO:[LightGBM] [Info] Total Bins 90703
2025-08-29 19:55:19,607:INFO:[LightGBM] [Info] Number of data points in the train set: 13083, number of used features: 2351
2025-08-29 19:55:19,689:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:55:19,689:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:55:19,711:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:55:19,713:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:55:19,714:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.000849 secs. 1 sparse feature groups
2025-08-29 19:55:19,724:INFO:[LightGBM] [Info] Start training from score -1.079309
2025-08-29 19:55:19,724:INFO:[LightGBM] [Info] Start training from score -0.731717
2025-08-29 19:55:19,724:INFO:[LightGBM] [Info] Start training from score -1.719882
2025-08-29 19:55:34,239:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:55:34,251:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:55:34,263:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:55:56,064:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:55:56,148:INFO:[LightGBM] [Info] Total Bins 91056
2025-08-29 19:55:56,155:INFO:[LightGBM] [Info] Number of data points in the train set: 13083, number of used features: 2369
2025-08-29 19:55:56,241:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:55:56,242:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:55:56,260:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:55:56,262:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:55:56,263:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.000670 secs. 1 sparse feature groups
2025-08-29 19:55:56,272:INFO:[LightGBM] [Info] Start training from score -1.079309
2025-08-29 19:55:56,273:INFO:[LightGBM] [Info] Start training from score -0.731717
2025-08-29 19:55:56,273:INFO:[LightGBM] [Info] Start training from score -1.719882
2025-08-29 19:56:10,081:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:56:10,093:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:56:10,106:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:56:31,980:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:56:32,030:INFO:[LightGBM] [Info] Total Bins 90793
2025-08-29 19:56:32,037:INFO:[LightGBM] [Info] Number of data points in the train set: 13083, number of used features: 2355
2025-08-29 19:56:32,115:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:56:32,115:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:56:32,133:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:56:32,136:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:56:32,137:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.001051 secs. 1 sparse feature groups
2025-08-29 19:56:32,146:INFO:[LightGBM] [Info] Start training from score -1.079309
2025-08-29 19:56:32,146:INFO:[LightGBM] [Info] Start training from score -0.731558
2025-08-29 19:56:32,146:INFO:[LightGBM] [Info] Start training from score -1.720308
2025-08-29 19:56:45,474:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:56:45,486:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:56:45,498:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:57:07,072:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:57:07,125:INFO:[LightGBM] [Info] Total Bins 90759
2025-08-29 19:57:07,131:INFO:[LightGBM] [Info] Number of data points in the train set: 13083, number of used features: 2354
2025-08-29 19:57:07,216:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:57:07,216:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:57:07,232:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:57:07,235:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:57:07,236:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.000924 secs. 1 sparse feature groups
2025-08-29 19:57:07,244:INFO:[LightGBM] [Info] Start training from score -1.079309
2025-08-29 19:57:07,244:INFO:[LightGBM] [Info] Start training from score -0.731558
2025-08-29 19:57:07,244:INFO:[LightGBM] [Info] Start training from score -1.720308
2025-08-29 19:57:20,807:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:57:20,819:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:57:20,831:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:57:43,014:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:57:43,071:INFO:[LightGBM] [Info] Total Bins 90525
2025-08-29 19:57:43,076:INFO:[LightGBM] [Info] Number of data points in the train set: 13083, number of used features: 2351
2025-08-29 19:57:43,157:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:57:43,157:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:57:43,174:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:57:43,177:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:57:43,178:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.000694 secs. 1 sparse feature groups
2025-08-29 19:57:43,186:INFO:[LightGBM] [Info] Start training from score -1.079309
2025-08-29 19:57:43,186:INFO:[LightGBM] [Info] Start training from score -0.731558
2025-08-29 19:57:43,186:INFO:[LightGBM] [Info] Start training from score -1.720308
2025-08-29 19:57:58,213:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:57:58,225:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:57:58,236:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:58:20,516:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:58:20,625:INFO:[LightGBM] [Info] Total Bins 90342
2025-08-29 19:58:20,635:INFO:[LightGBM] [Info] Number of data points in the train set: 13084, number of used features: 2338
2025-08-29 19:58:20,719:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:58:20,720:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:58:20,745:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:58:20,749:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:58:20,750:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.000849 secs. 1 sparse feature groups
2025-08-29 19:58:20,758:INFO:[LightGBM] [Info] Start training from score -1.079385
2025-08-29 19:58:20,759:INFO:[LightGBM] [Info] Start training from score -0.731634
2025-08-29 19:58:20,759:INFO:[LightGBM] [Info] Start training from score -1.719958
2025-08-29 19:58:38,238:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:58:38,250:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:58:38,262:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:59:01,377:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:59:01,451:INFO:[LightGBM] [Info] Total Bins 90361
2025-08-29 19:59:01,457:INFO:[LightGBM] [Info] Number of data points in the train set: 13084, number of used features: 2346
2025-08-29 19:59:01,539:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:59:01,539:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:59:01,562:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:59:01,564:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:59:01,565:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.000734 secs. 1 sparse feature groups
2025-08-29 19:59:01,574:INFO:[LightGBM] [Info] Start training from score -1.079385
2025-08-29 19:59:01,574:INFO:[LightGBM] [Info] Start training from score -0.731634
2025-08-29 19:59:01,574:INFO:[LightGBM] [Info] Start training from score -1.719958
2025-08-29 19:59:15,520:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:59:15,532:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:59:15,543:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:59:38,475:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 19:59:38,539:INFO:[LightGBM] [Info] Total Bins 90463
2025-08-29 19:59:38,544:INFO:[LightGBM] [Info] Number of data points in the train set: 13084, number of used features: 2337
2025-08-29 19:59:38,627:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 19:59:38,627:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 19:59:38,650:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 19:59:38,653:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 19:59:38,654:INFO:[LightGBM] [Info] 6 dense feature groups (0.10 MB) transferred to GPU in 0.001466 secs. 1 sparse feature groups
2025-08-29 19:59:38,663:INFO:[LightGBM] [Info] Start training from score -1.079385
2025-08-29 19:59:38,664:INFO:[LightGBM] [Info] Start training from score -0.731634
2025-08-29 19:59:38,664:INFO:[LightGBM] [Info] Start training from score -1.719958
2025-08-29 19:59:52,173:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:59:52,185:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:59:52,196:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 19:59:52,224:INFO:Calculating mean and std
2025-08-29 19:59:52,226:INFO:Creating metrics dataframe
2025-08-29 19:59:52,228:INFO:Uploading results into container
2025-08-29 19:59:52,228:INFO:Uploading model into container now
2025-08-29 19:59:52,229:INFO:_master_model_container: 1
2025-08-29 19:59:52,229:INFO:_display_container: 2
2025-08-29 19:59:52,230:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-08-29 19:59:52,230:INFO:create_model() successfully completed......................................
2025-08-29 19:59:52,366:INFO:SubProcess create_model() end ==================================
2025-08-29 19:59:52,366:INFO:Creating metrics dataframe
2025-08-29 19:59:52,368:INFO:Initializing Random Forest Classifier
2025-08-29 19:59:52,368:INFO:Total runtime is 6.149941873550415 minutes
2025-08-29 19:59:52,368:INFO:SubProcess create_model() called ==================================
2025-08-29 19:59:52,368:INFO:Initializing create_model()
2025-08-29 19:59:52,368:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000129D54D6950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 19:59:52,368:INFO:Checking exceptions
2025-08-29 19:59:52,368:INFO:Importing libraries
2025-08-29 19:59:52,368:INFO:Copying training dataset
2025-08-29 19:59:52,372:INFO:Defining folds
2025-08-29 19:59:52,372:INFO:Declaring metric variables
2025-08-29 19:59:52,372:INFO:Importing untrained model
2025-08-29 19:59:52,373:INFO:Random Forest Classifier Imported successfully
2025-08-29 19:59:52,373:INFO:Starting cross validation
2025-08-29 19:59:52,397:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=1
2025-08-29 20:00:35,000:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:00:35,008:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:00:35,015:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:01:15,907:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:01:15,915:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:01:15,923:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:01:59,356:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:01:59,364:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:01:59,372:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:02:44,378:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:02:44,386:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:02:44,394:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:03:26,505:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:03:26,512:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:03:26,520:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:04:08,687:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:04:08,695:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:04:08,702:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:04:50,703:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:04:50,710:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:04:50,718:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:05:34,032:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:05:34,039:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:05:34,046:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:06:17,056:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:06:17,063:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:06:17,071:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:06:57,869:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:06:57,877:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:06:57,884:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:06:57,912:INFO:Calculating mean and std
2025-08-29 20:06:57,913:INFO:Creating metrics dataframe
2025-08-29 20:06:57,916:INFO:Uploading results into container
2025-08-29 20:06:57,917:INFO:Uploading model into container now
2025-08-29 20:06:57,917:INFO:_master_model_container: 2
2025-08-29 20:06:57,917:INFO:_display_container: 2
2025-08-29 20:06:57,917:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-08-29 20:06:57,917:INFO:create_model() successfully completed......................................
2025-08-29 20:06:58,071:INFO:SubProcess create_model() end ==================================
2025-08-29 20:06:58,071:INFO:Creating metrics dataframe
2025-08-29 20:06:58,074:INFO:Initializing Extra Trees Classifier
2025-08-29 20:06:58,074:INFO:Total runtime is 13.245044064521789 minutes
2025-08-29 20:06:58,074:INFO:SubProcess create_model() called ==================================
2025-08-29 20:06:58,074:INFO:Initializing create_model()
2025-08-29 20:06:58,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000129D54D6950>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 20:06:58,074:INFO:Checking exceptions
2025-08-29 20:06:58,074:INFO:Importing libraries
2025-08-29 20:06:58,074:INFO:Copying training dataset
2025-08-29 20:06:58,078:INFO:Defining folds
2025-08-29 20:06:58,078:INFO:Declaring metric variables
2025-08-29 20:06:58,078:INFO:Importing untrained model
2025-08-29 20:06:58,079:INFO:Extra Trees Classifier Imported successfully
2025-08-29 20:06:58,079:INFO:Starting cross validation
2025-08-29 20:06:58,104:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=1
2025-08-29 20:08:02,830:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:08:02,837:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:08:02,844:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:09:10,969:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:09:10,980:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:09:10,991:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:10:18,451:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:10:18,458:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:10:18,466:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:11:28,269:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:11:28,276:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:11:28,284:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:12:37,181:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:12:37,189:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:12:37,198:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:13:45,609:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:13:45,619:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:13:45,627:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:14:48,334:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:14:48,342:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:14:48,349:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:15:54,380:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:15:54,387:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:15:54,395:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:17:02,787:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:17:02,794:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:17:02,802:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:18:10,653:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:18:10,662:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:18:10,673:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:18:10,717:INFO:Calculating mean and std
2025-08-29 20:18:10,718:INFO:Creating metrics dataframe
2025-08-29 20:18:10,720:INFO:Uploading results into container
2025-08-29 20:18:10,721:INFO:Uploading model into container now
2025-08-29 20:18:10,721:INFO:_master_model_container: 3
2025-08-29 20:18:10,721:INFO:_display_container: 2
2025-08-29 20:18:10,721:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-08-29 20:18:10,721:INFO:create_model() successfully completed......................................
2025-08-29 20:18:10,885:INFO:SubProcess create_model() end ==================================
2025-08-29 20:18:10,885:INFO:Creating metrics dataframe
2025-08-29 20:18:10,890:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:339: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  .applymap(highlight_cols, subset=["TT (Sec)"])

2025-08-29 20:18:10,891:INFO:Initializing create_model()
2025-08-29 20:18:10,891:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 20:18:10,892:INFO:Checking exceptions
2025-08-29 20:18:10,892:INFO:Importing libraries
2025-08-29 20:18:10,892:INFO:Copying training dataset
2025-08-29 20:18:10,896:INFO:Defining folds
2025-08-29 20:18:10,896:INFO:Declaring metric variables
2025-08-29 20:18:10,896:INFO:Importing untrained model
2025-08-29 20:18:10,896:INFO:Declaring custom model
2025-08-29 20:18:10,897:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-29 20:18:10,922:INFO:Cross validation set to False
2025-08-29 20:18:10,922:INFO:Fitting Model
2025-08-29 20:18:37,319:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 20:18:37,379:INFO:[LightGBM] [Info] Total Bins 99261
2025-08-29 20:18:37,384:INFO:[LightGBM] [Info] Number of data points in the train set: 14537, number of used features: 2519
2025-08-29 20:18:37,499:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 20:18:37,499:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 20:18:37,516:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 20:18:37,519:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 20:18:37,519:INFO:[LightGBM] [Info] 6 dense feature groups (0.11 MB) transferred to GPU in 0.000710 secs. 1 sparse feature groups
2025-08-29 20:18:37,528:INFO:[LightGBM] [Info] Start training from score -1.079332
2025-08-29 20:18:37,528:INFO:[LightGBM] [Info] Start training from score -0.731644
2025-08-29 20:18:37,528:INFO:[LightGBM] [Info] Start training from score -1.720032
2025-08-29 20:18:47,889:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-08-29 20:18:47,890:INFO:create_model() successfully completed......................................
2025-08-29 20:18:48,059:INFO:Creating Dashboard logs
2025-08-29 20:18:48,059:INFO:Model: Light Gradient Boosting Machine
2025-08-29 20:18:48,105:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 123, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0, 'device': 'gpu'}
2025-08-29 20:18:48,219:INFO:Initializing predict_model()
2025-08-29 20:18:48,219:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=False, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000129CD8CAD40>)
2025-08-29 20:18:48,219:INFO:Checking exceptions
2025-08-29 20:18:48,219:INFO:Preloading libraries
2025-08-29 20:18:54,112:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:18:54,147:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:18:54,181:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Positive') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-08-29 20:18:54,442:WARNING:C:\Users\fabri\anaconda3\envs\nlp311\Lib\site-packages\_distutils_hack\__init__.py:32: UserWarning: Setuptools is replacing distutils. Support for replacing an already imported distutils is deprecated. In the future, this condition will fail. Register concerns at https://github.com/pypa/setuptools/issues/new?template=distutils-deprecation.yml
  warnings.warn(

2025-08-29 20:18:58,537:INFO:Creating Dashboard logs
2025-08-29 20:18:58,537:INFO:Model: Extra Trees Classifier
2025-08-29 20:18:58,579:INFO:Logged params: {'bootstrap': False, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-29 20:18:58,899:INFO:Creating Dashboard logs
2025-08-29 20:18:58,899:INFO:Model: Random Forest Classifier
2025-08-29 20:18:58,945:INFO:Logged params: {'bootstrap': True, 'ccp_alpha': 0.0, 'class_weight': None, 'criterion': 'gini', 'max_depth': None, 'max_features': 'sqrt', 'max_leaf_nodes': None, 'max_samples': None, 'min_impurity_decrease': 0.0, 'min_samples_leaf': 1, 'min_samples_split': 2, 'min_weight_fraction_leaf': 0.0, 'monotonic_cst': None, 'n_estimators': 100, 'n_jobs': -1, 'oob_score': False, 'random_state': 123, 'verbose': 0, 'warm_start': False}
2025-08-29 20:18:59,265:INFO:_master_model_container: 3
2025-08-29 20:18:59,265:INFO:_display_container: 2
2025-08-29 20:18:59,266:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-08-29 20:18:59,266:INFO:compare_models() successfully completed......................................
2025-08-29 20:18:59,267:INFO:Initializing plot_model()
2025-08-29 20:18:59,267:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), plot=feature, scale=1, save=True, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2025-08-29 20:18:59,267:INFO:Checking exceptions
2025-08-29 20:18:59,269:INFO:Preloading libraries
2025-08-29 20:18:59,312:INFO:Copying training dataset
2025-08-29 20:18:59,312:INFO:Plot type: feature
2025-08-29 20:18:59,313:WARNING:No coef_ found. Trying feature_importances_
2025-08-29 20:19:04,322:INFO:Saving 'Feature Importance.png'
2025-08-29 20:19:04,491:INFO:Visual Rendered Successfully
2025-08-29 20:19:04,795:INFO:plot_model() successfully completed......................................
2025-08-29 20:19:04,797:INFO:Initializing finalize_model()
2025-08-29 20:19:04,797:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-08-29 20:19:04,797:INFO:Finalizing LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0)
2025-08-29 20:19:04,799:INFO:Initializing create_model()
2025-08-29 20:19:04,799:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000129C2B700D0>, estimator=LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               device='gpu', importance_type='split', learning_rate=0.1,
               max_depth=-1, min_child_samples=20, min_child_weight=0.001,
               min_split_gain=0.0, n_estimators=100, n_jobs=-1, num_leaves=31,
               objective=None, random_state=123, reg_alpha=0.0, reg_lambda=0.0,
               subsample=1.0, subsample_for_bin=200000, subsample_freq=0), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-08-29 20:19:04,799:INFO:Checking exceptions
2025-08-29 20:19:04,801:INFO:Importing libraries
2025-08-29 20:19:04,801:INFO:Copying training dataset
2025-08-29 20:19:04,801:INFO:Defining folds
2025-08-29 20:19:04,801:INFO:Declaring metric variables
2025-08-29 20:19:04,801:INFO:Importing untrained model
2025-08-29 20:19:04,801:INFO:Declaring custom model
2025-08-29 20:19:04,802:INFO:Light Gradient Boosting Machine Imported successfully
2025-08-29 20:19:04,829:INFO:Cross validation set to False
2025-08-29 20:19:04,829:INFO:Fitting Model
2025-08-29 20:19:54,142:INFO:[LightGBM] [Info] This is the GPU trainer!!
2025-08-29 20:19:54,255:INFO:[LightGBM] [Info] Total Bins 134113
2025-08-29 20:19:54,262:INFO:[LightGBM] [Info] Number of data points in the train set: 20768, number of used features: 3158
2025-08-29 20:19:54,354:INFO:[LightGBM] [Info] Using GPU Device: NVIDIA GeForce RTX 3060, Vendor: NVIDIA Corporation
2025-08-29 20:19:54,354:INFO:[LightGBM] [Info] Compiling OpenCL Kernel with 256 bins...
2025-08-29 20:19:54,369:INFO:[LightGBM] [Info] GPU programs have been built
2025-08-29 20:19:54,373:INFO:[LightGBM] [Info] Size of histogram bin entry: 8
2025-08-29 20:19:54,374:INFO:[LightGBM] [Info] 6 dense feature groups (0.16 MB) transferred to GPU in 0.000995 secs. 1 sparse feature groups
2025-08-29 20:19:54,384:INFO:[LightGBM] [Info] Start training from score -1.079252
2025-08-29 20:19:54,384:INFO:[LightGBM] [Info] Start training from score -0.731729
2025-08-29 20:19:54,384:INFO:[LightGBM] [Info] Start training from score -1.719959
2025-08-29 20:20:06,633:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, device='gpu',
                                importance_type='split', learning_rate=0.1,
                                max_depth=-1, min_child_samples=20,
                                min_child_weight=0.001, min_split_gain=0.0,
                                n_estimators=100, n_jobs=-1, num_leaves=31,
                                objective=None, random_state=123, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-08-29 20:20:06,633:INFO:create_model() successfully completed......................................
2025-08-29 20:20:06,847:INFO:Creating Dashboard logs
2025-08-29 20:20:06,848:INFO:Model: Light Gradient Boosting Machine
2025-08-29 20:20:06,894:INFO:Logged params: {'boosting_type': 'gbdt', 'class_weight': None, 'colsample_bytree': 1.0, 'importance_type': 'split', 'learning_rate': 0.1, 'max_depth': -1, 'min_child_samples': 20, 'min_child_weight': 0.001, 'min_split_gain': 0.0, 'n_estimators': 100, 'n_jobs': -1, 'num_leaves': 31, 'objective': None, 'random_state': 123, 'reg_alpha': 0.0, 'reg_lambda': 0.0, 'subsample': 1.0, 'subsample_for_bin': 200000, 'subsample_freq': 0, 'device': 'gpu'}
2025-08-29 20:20:07,236:INFO:_master_model_container: 3
2025-08-29 20:20:07,236:INFO:_display_container: 2
2025-08-29 20:20:07,253:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, device='gpu',
                                importance_type='split', learning_rate=0.1,
                                max_depth=-1, min_child_samples=20,
                                min_child_weight=0.001, min_split_gain=0.0,
                                n_estimators=100, n_jobs=-1, num_leaves=31,
                                objective=None, random_state=123, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-08-29 20:20:07,253:INFO:finalize_model() successfully completed......................................
2025-08-29 20:20:07,431:INFO:Initializing save_model()
2025-08-29 20:20:07,431:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, device='gpu',
                                importance_type='split', learning_rate=0.1,
                                max_depth=-1, min_child_samples=20,
                                min_child_weight=0.001, min_split_gain=0.0,
                                n_estimators=100, n_jobs=-1, num_leaves=31,
                                objective=None, random_state=123, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False), model_name=models\sentiment_model_v2, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\fabri\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,...
                                    transformer=EmbedTextFeatures(kwargs=None,
                                                                  method='tf-idf'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-08-29 20:20:07,431:INFO:Adding model into prep_pipe
2025-08-29 20:20:07,431:WARNING:Only Model saved as it was a pipeline.
2025-08-29 20:20:07,700:INFO:models\sentiment_model_v2.pkl saved in current working directory
2025-08-29 20:20:07,726:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('...
                 LGBMClassifier(boosting_type='gbdt', class_weight=None,
                                colsample_bytree=1.0, device='gpu',
                                importance_type='split', learning_rate=0.1,
                                max_depth=-1, min_child_samples=20,
                                min_child_weight=0.001, min_split_gain=0.0,
                                n_estimators=100, n_jobs=-1, num_leaves=31,
                                objective=None, random_state=123, reg_alpha=0.0,
                                reg_lambda=0.0, subsample=1.0,
                                subsample_for_bin=200000, subsample_freq=0))],
         verbose=False)
2025-08-29 20:20:07,726:INFO:save_model() successfully completed......................................
2025-08-29 21:08:01,594:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:08:01,594:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:08:01,594:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:08:01,594:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:08:04,760:INFO:Initializing load_model()
2025-08-29 21:08:04,760:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 21:08:05,010:INFO:Initializing predict_model()
2025-08-29 21:08:05,011:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001471D6E3FD0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['brand'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('text_embedding',
                 TransformerWrapper(include=['text'],
                                    transformer=EmbedTextFeatures())),
                ('ordinal_encoding',
                 TransformerWrapper(include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}]))),
                ('actual_estimator',
                 LGBMClassifier(device='gpu', n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000014721543E20>)
2025-08-29 21:08:05,011:INFO:Checking exceptions
2025-08-29 21:08:05,011:INFO:Preloading libraries
2025-08-29 21:08:05,011:INFO:Set up data.
2025-08-29 21:13:55,275:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:13:55,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:13:55,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:13:55,276:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:13:56,913:INFO:Initializing load_model()
2025-08-29 21:13:56,913:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 21:13:57,128:INFO:Initializing predict_model()
2025-08-29 21:13:57,128:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C8737B0150>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['brand'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('text_embedding',
                 TransformerWrapper(include=['text'],
                                    transformer=EmbedTextFeatures())),
                ('ordinal_encoding',
                 TransformerWrapper(include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}]))),
                ('actual_estimator',
                 LGBMClassifier(device='gpu', n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C874B60C20>)
2025-08-29 21:13:57,128:INFO:Checking exceptions
2025-08-29 21:13:57,128:INFO:Preloading libraries
2025-08-29 21:13:57,129:INFO:Set up data.
2025-08-29 21:13:57,180:INFO:Set up index.
2025-08-29 21:14:22,783:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:14:22,783:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:14:22,784:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:14:22,784:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:14:24,273:INFO:Initializing load_model()
2025-08-29 21:14:24,273:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 21:14:24,491:INFO:Initializing predict_model()
2025-08-29 21:14:24,491:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ECF2C106D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['brand'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('text_embedding',
                 TransformerWrapper(include=['text'],
                                    transformer=EmbedTextFeatures())),
                ('ordinal_encoding',
                 TransformerWrapper(include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}]))),
                ('actual_estimator',
                 LGBMClassifier(device='gpu', n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001ECF2CC0C20>)
2025-08-29 21:14:24,491:INFO:Checking exceptions
2025-08-29 21:14:24,491:INFO:Preloading libraries
2025-08-29 21:14:24,492:INFO:Set up data.
2025-08-29 21:14:24,545:INFO:Set up index.
2025-08-29 21:18:57,517:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:18:57,517:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:18:57,517:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:18:57,517:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-08-29 21:18:59,147:INFO:Initializing load_model()
2025-08-29 21:18:59,148:INFO:load_model(model_name=models\sentiment_model_v2, platform=None, authentication=None, verbose=True)
2025-08-29 21:18:59,359:INFO:Initializing predict_model()
2025-08-29 21:18:59,359:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001D519B0C7D0>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(include=[], transformer=SimpleImputer())),
                ('categorical_imputer',
                 TransformerWrapper(include=['brand'],
                                    transformer=SimpleImputer(strategy='most_frequent'))),
                ('text_embedding',
                 TransformerWrapper(include=['text'],
                                    transformer=EmbedTextFeatures())),
                ('ordinal_encoding',
                 TransformerWrapper(include=['brand'],
                                    transformer=OrdinalEncoder(cols=['brand'],
                                                               handle_missing='return_nan',
                                                               mapping=[{'col': 'brand',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': AMD      0
Intel    1
NaN     -1
dtype: int64}]))),
                ('actual_estimator',
                 LGBMClassifier(device='gpu', n_jobs=-1, random_state=123))]), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001D51B2C4CC0>)
2025-08-29 21:18:59,359:INFO:Checking exceptions
2025-08-29 21:18:59,359:INFO:Preloading libraries
2025-08-29 21:18:59,360:INFO:Set up data.
2025-08-29 21:18:59,411:INFO:Set up index.
